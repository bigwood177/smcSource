;  CVIM70 / IM 
;
;
;*****************************************************************************
;		INVENTORY MANAGEMENT  
;
;		RELEASED: AUGUST 1, 1984 (d70s10)
;*****************************************************************************
;
;		PROPRIETARY RIGHTS NOTICE:  All rights reserved.  This
;		material contains the valuable properties and trade secrets
;		of MCBA, Glendale, California, USA embodying substantial
;		creative effort and confidential information and ideas, no
;		part of which may be used and/or disclosed without MCBA's
;		duly authorized license agreement and/or written permission.
;
;		COPYRIGHT NOTICE:  Copyright <C> 1978, 1981, 1982, 1983, 1984
;		MCBA, AN UNPUBLISHED WORK.  ALL RIGHTS RESERVED.
;
;
;		COMPILE & LINK PER INSTALLATION OR TECHNICAL NOTES.
;
;:
;
;		PROGRAM TO CONVERT RELEASE 1.0 ITMMAS AND ITMIDX FILES
;		INTO RELEASE 1.1 OR RELEASE 7.0 FILES.  ALSO MAY INCREASE 
;		ARRAY SIZES FOR VENDOR, LOCATION, AND PRICE ARRAYS
;
;		IN ADDITION TO ALTERING THE "NEW" ITMMAS AND ITMIDX RECORD
;		DEFINITIONS, THE VALUES FOR THE FOLLOWING FIELDS MUST BE
;		CHANGED IN WORKING STORAGE:
;		NUMVN - NUMBER OF VENDORS
;		NUMLC - NUMBER OF LOCATIONS
;		NUMPR - NUMBER OF PRICES
;		OLDIMS - OLD ITMMAS RECORD LENGTH
;		NEWIMS - NEW ITMMAS RECORD LENGTH
;		OLDTRS - OLD INVTRX RECORD LENGTH
;		NEWTRS - NEW INVTRX RECORD LENGTH
;		OLDPRS - OLD PURCHS RECORD LENGTH
;		NEWPRS - NEW PURCHS RECORD LENGTH
;
RECORD OLDMAS
		; ITEM MASTER RECORD DEFINITION  
;***OLD ITEM MASTER RECORD DEFINITION FOR USE IN CONVERSION***
		;	RECORD SIZE	= 510
		;	DEVICE FILE#	= 041
		;	FILE NAME	= "ITMMAS"
	NTEMNO	,A15		; ITEM NUMBER
	NDESCR	,A30		; DESCRIPTION
	NRDCAT	,A2		; PRODUCT CATEGORY
	NSRDEF	,A2		; USER-DEFINED FIELD
	NSTCST	,D8		; LAST COST		($ XXX,XXX.XX)
	NVGCST	,D9		; AVERAGE COST		($ XXX,XXX.XXX)
	NGTMGN	,D2		; TARGET MARGIN		(XX %)
				;
				; THE FOLLOWING ARRAYS REFER TO
				; MULTIPLE PRICING.  ALL ARRAY SIZES
				; SHOULD BE IDENTICAL.
	NRICCD	,5A2		;   PRICE CODES ARRAY
	NPRICE	,5D8		;   SELLING PRICE ARRAY	($ XXX,XXX.XX)
				;
				; THE FOLLOWING ARRAYS REFER TO
				; MULTIPLE LOCATIONS.  ALL ARRAY SIZES
				; SHOULD BE IDENTICAL.
	NLOC	,5A2		;   LOCATIONS ARRAY
	NTYONH	,5D6		;   QUANTITY ON HAND	(XXX,XXX-)
	NTYCOM	,5D6		;   QUANTITY COMMITTED	(XXX,XXX)
	NTYONO	,5D5		;   QUANTITY ON ORDER	(XXX,XXX-)
	NEOLVL	,5D5		; REORDER LEVEL		(XX,XXX)
	NRDUPT	,5D6		; ORDER UP-TO QUANTITY	(XXX,XXX)
	NIKSEQ	,5A3		; ITEM PICKING SEQUENCE
				;
	NECMIN	,D5		; RECOMMENDED MINIMUM ORDER QTY	(XX,XXX)
	NEOQ	,D6		; ECONOMIC ORDER QUANTITY	(XXX,XXX)
	NVGUSE	,D6		; AVERAGE USAGE			(XXX,XXX)
	NSEWGT	,D2		; USAGE WEIGHTING FACTOR	(.XX)
	NAFSTK	,D5		; SAFETY STOCK AMOUNT		(XX,XXX)
	NAFFCT	,D2		; SAFETY FACTOR			(X.X)
	NVGERR	,D5		; AVERAGE FORECAST ERROR	(XX,XXX)
	NUMERR	,D5		; SUM OF FORECAST ERRORS	(XX,XXX)
	NSEFLT	,D2		; USAGE FILTER			(X.X)
	NEADTM	,D3		; VENDOR LEAD TIME (IN MONTHS)	(XX.X)
	NEIGHT	,D6		; ITEM WEIGHT			(X,XXX.XX)
	NSUOFM	,A2		; SELLING UNIT OF MEASURE
	NPUOFM	,A2		; PURCHASE UNIT OF MEASURE
	NPSRAT	,D8		; PURCHASE-TO-SELLING UOM RATIO	(XXXX.XXXX)
	NSEMTD	,D6		; USAGE (QTY) MONTH-TO-DATE	(XXX,XXX)
	NSEYTD	,D6		; USAGE (QTY) YEAR-TO-DATE	(XXX,XXX)
	NTYMTD	,D6		; QTY SOLD MONTH-TO-DATE	(XXX,XXX)
	NTYYTD	,D6		; QTY SOLD YEAR-TO-DATE		(XXX,XXX)
	NLSMTD	,D8		; SALES $ MONTH-TO-DATE		(XXX,XXX.XX)
	NLSYTD	,D9		; SALES $ YEAR-TO-DATE		(X,XXX,XXX.XX)
	NSTMTD	,D8		; COST MONTH-TO-DATE		(XXX,XXX.XX)
	NSTYTD	,D9		; COST YEAR-TO-DATE		(X,XXX,XXX.XX)
	NOCODE	,D1		; BACK ORDER CODE		(X)
				;  0 = BACK-ORDER
				;  1 = NO BACK-ORDER
	NTFLAG	,A1		; TAX FLAG
				;  "Y" = TAXABLE ITEM
				;  "N" = NON-TAXABLE ITEM
	NSFLAG	,D1		; STOCK STATUS FLAG		(X)
	NXFLAG	,A1		; EXTRA FLAG (USER DEF)
				;
				; THE FOLLOWING ARRAYS DEFINE MULTIPLE
				; VENDORS.  ALL ARRAY SIZES SHOULD BE
				; IDENTICAL.
				;
	NENDOR	,1D4		;   VENDOR #  (XXXX)
	NINORD	,1D5		;   MINIMUM ORDER QTY FROM VENDOR  (XX,XXX)
				;
	NRDMLT	,D3		; ORDER MULTIPLE	(XXX)
	NBSFLG	,A1		; OBSOLETE FLAG
				;  "O" = OBSOLETE ITEM.
				;  "A" = ACTIVE ITEM.
				;  "F" = FORECASTED ITEM.
	NTOKED	,A1		; STOKED FLAG
				;  "S" = STOCKED ITEM.
				;  "N" = NON-STOCKED ITEM.
	NNTRLD	,A1		; CONTROLLED FLAG
				;  "C" = CONTROLLED ITEM.
				;  "N" = NON-CONTROLLED ITEM.
	NRCHCD	,A1		; PURCHASED/MNFG FLAG
				;  "P" = PURCHASED ITEM.
				;  "M" = MANUFACTURED ITEM.
	NNVCLS	,A1		; INVENTORY CLASS
				;  "A", "B" OR "C" (USER DEFINED OR
				;                   SET THROUGH ABC ANALYSIS.
	NYCTCD	,D1		; CYCLE COUNT CODE (USER DEFINED)
	NSTCNT	,D6		; LAST COUNT		(MM/DD/YY)
	NOMCOD	,A4		; COMMODITY CODE (USER DEFINED)
	NLCODE	,D2		; LOWER LEVEL CODE (INTERNAL USE BY BOMP)
	NUYER	,A2		; BUYER ID (USER DEFINED)
	NRWREL	,A6		; DRAWING RELEASE #
	NRWREV	,A2		; DRAWING REVISION #
	NTEREL	,A6		; ROUTING RELEASE #
	NTEREV	,A2		; ROUTING REVISION #
	NTENUM	,A5		; ROUTING NUMBER
	NFGLOC	,A2		; MANUFACTURING LOCATION
	NRDPOL	,A1		; ORDER POLICY CODE (MRP)
	NLNPER	,D3		; PLANNING PERIOD (MRP)
	NLNLT	,D3		; PLANNING LEAD TIME (DAYS)
	NLNMLT	,D4		; PLANNING ORDER MULTIPLIER
	NUNDEF	,A1		; UNDEFINED (USER)
	NIFOBQ	,D6		; LIFO BASE QUANTITY
	NIFOBP	,D7		; LIFO BASE COST
		,A26		; FILLER
;:
RECORD OLDCTL,X
		;ITEM MASTER CONTROL RECORD 
;***OLD ITEM MASTER RECORD DEFINITION FOR USE IN CONVERSION***
		;	RECORD SIZE	= 510
		;	DEVICE FILE #	= 041
		;	FILE NAME	= "ITMMAS"
		;
		,A77		; (FILLER)
	NFLTLO	,A2		; DEFAULT LOCATION
				;
				; THE FOLLOWING ARRAYS ARE DEFINED FOR
				; THE CONVENIENCE OF SIZING FILLER SPACE
				; FOR THE ARRAYS USED IN "RD041A.DEF".
				;
		,5A10		;  (SHOULD BE THE SAME AS THE PRICE ARRAY)
		,5A33		;  (  "    "   "   "   "   "  LOCATIONS ARRAY)
		,1A9		;  (  "    "   "   "   "   "  VENDORS ARRAY)
				;
				; THE FOLLOWING ARRAYS ARE USED IN CONJUNCTION
				; WITH THE AUTOMATIC TRADE DISCOUNTING USED
				; IN CUSTOMER ORDER PROCESSING.  BOTH OF THESE
				; VARIABLES SHOULD BE DEFINED
				; WITH THE SAME SIZE.
				;
        NPRDCD	,45A2		; TRADE DISCOUNT PRODUCT TYPE
				; (CORRESPONDS TO THE PRODUCT TYPE
				;  RECORDED IN THE ITEM MASTER FILE).
	NDDISC	,45D2		; TRADE DISCOUNT (XX) (DISCOUNT ASSOCIATED
				;  WITH THE ABOVE DEFINED PRODUCT TYPE).
				;
	NYPSYS	,D1		; SYSTEM TYPE (DEFINED AT FILE INITIALIZATION)
				; 1 = IM INSTALLED ONLY
				; 2 = IM AND COP
				; 3 = IM AND BOMP
				; 4 = IM, BOMP, AND COP INSTALLED
	NNMPRC	,D2		; DIMENSION OF PRICING ARRAY.
	NNMLOC	,D2		; DIMENSION OF LOCATIONS ARRAY.
	NNMVEN	,D2		; DIMENSION OF VENDORS ARRAY.
	NFL041	,D1		; DELETION FLAG
	NSL041	,D1		; SORTING FLAG
	NRG041	,D5		; ORGANIZED RECORD COUNT
	NEC041	,D5		; RECORD COUNT
	NAX041	,D5		; MAXIMUM RECORDS ALLOWED COUNT
	NEL041	,D3		; NUMBER OF DELETED RECORDS IN THE FILE
;:
RECORD ITMIDX,X	
		.INCLUDE 'DEF:RD042A.DEF'

RECORD OLDTRX,X	
				;I/M RECEIVINGS TRANSACTION FILE 
		;***CONVERSION VERSION FOR REL 1.0 ---> REL 7.0 ***
				;	RECORD SIZE=113
				;	DEVICE FILE#=043
	XITMNO	,A15		; ITEM NUMBER
	XDESCR	,A30		; DESCRIPTION
	XLOCTO	,A2		; DESTINATION LOCATION
	XOCFRM	,A2		; SOURCE LOCATION
	XEWLOC	,D1		; NEW LOCATION FLAG
				; 1 = NEW TO-LOC
				; 2 = NEW FROM-LOC
				; 3 = NEW LOCATION FOR BOTH
	XOOONH	,D6		; QUANTITY ON HAND AT DESTINATION
	XOOONO	,D5		; QUANTITY ON ORDER AT DESTINATION
	XROONH	,D6		; QUANTITY ON HAND AT SOURCE
	XROONO	,D5		; QUANTITY ON ORDER AT SOURCE
	XLDAVG	,D9		; OLD AVERAGE COST
	XTYRCD	,D5		; QUANTITY RECEIVED
	XEWCST	,D8		; NEW ITEM COST
	XEWAVG	,D9		; NEW AVERAGE COST
	XPONUM	,A8		; PURCHASE ORDER NUMBER (OR ORDER REF NO.)
	XRDCMP	,A1		; COMPLETED FLAG (Y = COMPLETE N = NOT COMP.)
	XRXTYP	,D1		; TRANSACTION TYPE
				; 0 = RECEIVING
				; 1 = TRANSFER
				; 2 = ISSUE
;:
RECORD INVCTL,X
				;I/M RECEIVINGS TRANSACTION FILE CNTRL RECORD
		;***CONVERSION VERSION***
				;	RECORD SIZE=113
				;	DEVICE FILE#=043
		,A95		; UNUSED
	XRG043	,D5		; ORGANIZED COUNT
	XEC043	,D5		; RECORD COUNT
	XAX043	,D5		; MAXIMUM COUNT
	XEL043	,D3		; DELETE COUNT (NOT USED)
;:
RECORD OLDPUR,X
				;IM PURCHASING FILE RECORD 
			;***CONVERSION VERSION***
				;	RECORD LENGTH=088
				;	DEVICE FILE#=053
	WPVEND	,A4		;VENDOR NUMBER
	WPLOC	,A2		;LOCATION
	WPONUM	,A8		;PURCHASE ORDER NUMBER
	WPITEM	,A15		;ITEM #
	WDESCR	,A30		;ITEM DESCRIPTION
	WPRDCT	,A2		;PRODUCT CODE
	WLDTM	,D3		;LEAD TIME XX.X MONTHS
	WRCTDT	,D6		;EXPECTED RECEIPT DATE MMDDYY
	WLSTCT	,D7		;LAST COST	XX,XXX.XX
	WPWGT	,D6		;ITEM WEIGHT X,XXX.XX
	WORDED	,D5		;QUANTITY ORDERED
;:
RECORD PURCTL,X	
				;IM PURCHASING FILE CONTROL RECORD 
			;***CONVERSION VERSION***
				;	RECORD SIZE=088
				;	DEVICE FILE#=053
		,A70		;UNUSED
	WRG053	,D5		;ORGANIZED COUNT
	WEC053	,D5		;RECORD COUNT
	WAX053	,D5		;MAXIMUM COUNT
	WEL053	,D3		;DELETE COUNT
;:
RECORD OLDTAG,X
		.INCLUDE 'DEF:RD040A.DEF'

RECORD TAGCTL,X 
		.INCLUDE 'DEF:RD040B.DEF'

RECORD NEWMAS	
		.INCLUDE 'DEF:RD041A.DEF'

RECORD NEWCTL,X
		.INCLUDE 'DEF:RD041B.DEF'

RECORD NEWTRX,X
		.INCLUDE 'DEF:RD043A.DEF'

RECORD CTLINV,X	
		.INCLUDE 'DEF:RD043B.DEF'

RECORD NEWPUR,X
		.INCLUDE 'DEF:RD053A.DEF'

RECORD CTLPUR,X
		.INCLUDE 'DEF:RD053B.DEF'

RECORD BRACKS
		.INCLUDE 'DEF:RD041C.DEF'

RECORD DEVICE
		.INCLUDE 'DEF:DEV001.DEF'

RECORD COMPNY
			;RECORD DEFINITION FOR COMPNY.DDF
	CMPCOD	,8A3	;COMPANY CODE ARRAY

RECORD FILBL
	CODEV	,A3
		,A1,	':'
	FILENM	,A6
		,A1,	'.'
	COEXT	,A3
RECORD FILBL2
		,A11
		,A3,	'111'
		,A1,	'['
	SIZE	,D5
		,A1,	']'
RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2

RECORD BLKMSG
		,A34,	'FATAL ERROR - NO DEVICE FOUND FOR '
	BLKFIL	,A6
		,A19,	' IN DEVICE.DDF FILE'
RECORD
	BLANKS	,A3
	CNGCTL	,D1
	CNT	,D5
	CMPCNT	,D5
	ACHAR	,A1
	ENTRY	,A5
	INXCTL	,D1
	JUSTIF	,D1
	LOKCTL	,D1
	MASK	,A2,	'XX'
	NEWIMS	,D4,	0533
	NEWPRS	,D3,	089
	NEWTRS	,D3,	116
	NUMLC	,D2,	05
	NUMVN	,D2,	03
	NUMPR	,D2,	05
	OLDIMS	,D4,	0510
	OLDPRS	,D3,	088
	OLDTRS	,D3,	113
	READ	,D1,	0
	RECCNT	,D5
	RELEAS	,D1
	SAVREC	,D5
	SAVPRC	,D2
	SAVLOC	,D2
	SAVVEN	,D2
	SZ	,D4
	V	,D1
	WHATNO	,D1
	WRITE	,D1,	1
PROC (2)
	V = -1
	XCALL TERID (V)
	V = 1
	ON ERROR NOCMP
	OPEN (1,I,'UT:COMPNY.DDF')
	OFF ERROR
	ON ERROR NODEV
	OPEN (2,I,'UT:DEVICE.DDF')
	OFF ERROR
	XCALL OUTPT (1,1,2,'CONVERT INVENTORY MANAGEMENT FILES',1)

	XCALL OUTPT (12,15,0,'HAVE YOU BACKED UP ALL YOUR FILES ?',1)
	CTL = '12,51,01,00,YN'
	CALL INPUT
	IF (INXCTL.EQ.2)
	    BEGIN
		XCALL MESAG 
&		  ('PLEASE BACK UP ALL YOUR FILES. THEN RERUN THIS PROGRAM',2)
		GO TO END
	    END

	XCALL OUTPT (6,15,2,
&		'This program will change the size and configuration',1)
	XCALL OUTPT (8,15,0,
&		'of I/M files.  The new ITMMAS file will contain:',1)
	ENTRY (1,2) = NUMLC, MASK
	XCALL OUTPT (10,15,0,ENTRY(1,2),1)
	XCALL OUTPT (0,0,0,' - LOCATIONS',1)
	ENTRY (1,2) = NUMPR, MASK
	XCALL OUTPT (12,15,0,ENTRY(1,2),1)
	XCALL OUTPT (0,0,0,' - PRICES',1)
	ENTRY (1,2) = NUMVN, MASK
	XCALL OUTPT (14,15,0,ENTRY(1,2),1)
	XCALL OUTPT (0,0,0,' - VENDORS',1)
	XCALL OUTPT (17,15,0,'DO YOU WISH TO CONTINUE ?',1)
	CTL = '17,42,01,01,YN'
	CALL INPUT
	GO TO (BEGIN,END), INXCTL
BEGIN,
	CNGCTL =
	XCALL OUTPT (2,1,2,'\',1)
	XCALL OUTPT (10,15,0,'PLEASE ENTER',1)
	XCALL OUTPT (12,20,0,'1. COMPANY EXTENSION',1)
	XCALL OUTPT (14,20,0,'2. RIGHT JUSTIFY NUMERIC ITEM NUMBERS ?',1)
COEXT,
	CTL = '12,61,03,03,AE'
	CALL INPUT
	GO TO (BEGIN,END), INXCTL
	COEXT = ENTRY (1,3)
	CALL CHKEXT
	CMPCNT = CNT
	IF (COEXT.EQ.'   ') GO TO COEXT
	CALL CHKUSR
	IF (STATUS(CMPCNT).NE.0) GO TO COEXT
	GO TO (ANYCNG), CNGCTL
JSTIFY,
	CTL = '14,61,01,01,YN'
	CALL INPUT
	JUSTIF = 1
	IF (INXCTL.EQ.2) JUSTIF =
	GO TO ANYCNG
BADCNG,
	CNGCTL = 3
ANYCNG,
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (PROCES), CNGCTL + 1
	GO TO (COEXT,JSTIFY), WHATNO
	GO TO BADCNG

;*****************************************************************************

CHKEXT,
	LOKCTL = 1
	XCALL IOS (1,COMPNY,READ,LOKCTL)
	CNT = 0
LOOP,
	INCR CNT
	IF (CNT.GT.8) GO TO NOEXT
	IF (CMPCOD(CNT).EQ.COEXT) RETURN
	GO TO LOOP
NOEXT,
	XCALL MESAG ('INVALID COMPANY EXTENSION',1)
	COEXT =
	RETURN

;*****************************************************************************

CHKUSR,
	RECCNT = 40
	CALL RDDEV
	IF (STATUS(CMPCNT).NE.0) GO TO INUSE
	RECCNT = 41
	CALL RDDEV
	IF (STATUS(CMPCNT).NE.0) GO TO INUSE
	RECCNT = 42
	CALL RDDEV
	IF (STATUS(CMPCNT).NE.0) GO TO INUSE
	RECCNT = 43
	CALL RDDEV
	IF (STATUS(CMPCNT).NE.0) GO TO INUSE
	RECCNT = 53
	CALL RDDEV
	IF (STATUS(CMPCNT).NE.0) GO TO INUSE
	RETURN
RDDEV,
	LOKCTL = 1
	XCALL IO (2,DEVICE,RECCNT,READ,LOKCTL)
	RETURN
INUSE,
	XCALL MESAG
&	('CANNOT PROCESS THIS COMPANY - ONE OR MORE FILES ARE IN USE',2)
	RETURN

;*****************************************************************************

PROCES,
	XCALL WATE (4,1)
	CLOSE 1
	LOKCTL = 1
	XCALL IO (2,DEVICE,41,READ,LOKCTL)
	FILENM = 'ITMMAS'
	IF (DEVNAM(CMPCNT).EQ.BLANKS) GO TO BLKDEV
	CODEV = DEVNAM (CMPCNT)
	ON ERROR NOTFND
	OPEN (3,I,FILBL)
	OFF ERROR
	LOKCTL = 1
	IF (OLDIMS.GT.NEWIMS) XCALL IO (3,OLDMAS,1,READ,LOKCTL)
	IF (OLDIMS.LE.NEWIMS) XCALL IO (3,NEWMAS,1,READ,LOKCTL)
	XCALL RSTAT (SZ,ACHAR)
	IF (SZ.NE.OLDIMS) GO TO BADSIZ
	XCALL OUTPT (24,1,1,'PROCESSING ITMMAS FILE - ITEM # ',1)
	NEWMAS =
	OLDMAS =
	LOKCTL = 1
	XCALL IO (3,OLDCTL,1,READ,LOKCTL)
	RECCNT = NEC041
	SAVREC = NEC041
	SAVPRC = NNMPRC
	SAVLOC = NNMLOC
	SAVVEN = NNMVEN
	FILBL2 (1,11) = FILBL (1,11)
	SIZE = (((NAX041+1)*(NEWIMS+2))/512) + 1
	ON ERROR NOROOM
	OPEN (4,O,FILBL2)
	OFF ERROR
	JSTIFY = JUSTIF
	DFLTLO = NFLTLO
	DPRDCD = NPRDCD
	DDISC = NDDISC
	TYPSYS = NYPSYS
	NUMPRC = NUMPR
	NUMLOC = NUMLC
	NUMVEN = NUMVN
	DFL041 = NFL041
	SFL041 = NSL041
	ORG041 = NRG041
	IF (JUSTIF) ORG041 = 1
	REC041 = NEC041
	MAX041 = NAX041
	DEL041 = NEL041
	LOKCTL = 1
	XCALL IOS (4,NEWCTL,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
MASLUP,
	NEWMAS =
	LOKCTL = 1
	XCALL IOS (3,OLDMAS,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFMAS
	IF (NTEMNO.EQ.BRACKS) GO TO WRTBRM
	XCALL OUTPT (24,33,1,NTEMNO,1)
	ITEMNO = NTEMNO
	IF (JUSTIF) XCALL FRMAT (ITEMNO,15)
	DESCR = NDESCR
	PRDCAT = NRDCAT
	USRDEF = NSRDEF
	LSTCST = NSTCST
	AVGCST = NVGCST
	TGTMGN = NGTMGN
	CNT =
PRCLUP,
	INCR CNT
	IF (CNT.GT.SAVPRC) CNT =
	IF (CNT.GT.NUMPR) CNT =
	IF (CNT.EQ.0) GO TO LOCLUP
	PRICCD (CNT) = NRICCD (CNT)
	PRICE (CNT) = NPRICE (CNT)
	GO TO PRCLUP
LOCLUP,
	INCR CNT
	IF (CNT.GT.SAVLOC) CNT =
	IF (CNT.GT.NUMLC) CNT =
	IF (CNT.EQ.0) GO TO VENLUP
	LOC (CNT) = NLOC (CNT)
	QTYONH (CNT) = NTYONH (CNT)
	QTYCOM (CNT) = NTYCOM (CNT)
	QTYONO (CNT) = NTYONO (CNT)
	REOLVL (CNT) = NEOLVL (CNT)
	ORDUPT (CNT) = NRDUPT (CNT)
	PIKSEQ (CNT) = NIKSEQ (CNT)
	GO TO LOCLUP
VENLUP,
	INCR CNT
	IF (CNT.GT.SAVVEN) CNT =
	IF (CNT.GT.NUMVN) CNT =
	IF (CNT.EQ.0) GO TO REMAIN
	VENDOR (CNT) = NENDOR (CNT), 'ZZZX'
	XCALL FRMAT (VENDOR(CNT),4)
	MINORD (CNT) = NINORD (CNT)
	GO TO VENLUP
REMAIN,
	RECMIN = NECMIN
	EOQ =  NEOQ
	AVGUSE = NVGUSE
	USEWGT = NSEWGT
	SAFSTK = NAFSTK
	SAFFCT = NAFFCT
	AVGERR = NVGERR
	SUMERR = NUMERR
	USEFLT = NSEFLT
	LEADTM = NEADTM
	WEIGHT = NEIGHT
	SUOFM = NSUOFM
;------ IM1-RT ---------------------------------------------------------------
	PUOFM = NPUOFM
	IF (NPSRAT(1,4).EQ.0) THEN
		PSRAT = 1
	ELSE
		PSRAT = NPSRAT
;	PSRAT = NPSRAT
;----------------------------------------------------------------------------
	USEMTD = NSEMTD
	USEYTD = NSEYTD
	QTYMTD = NTYMTD
	QTYYTD = NTYYTD
	SLSMTD = NLSMTD
	SLSYTD = NLSYTD
	CSTMTD = NSTMTD
	CSTYTD = NSTYTD
	BOCODE = NOCODE
	TXFLAG = NTFLAG
	SSFLAG = NSFLAG
	EXFLAG = NXFLAG
	ORDMLT = NRDMLT
	OBSFLG = NBSFLG
	STOKED = NTOKED
	CNTRLD = NNTRLD
	PRCHCD = NRCHCD
	INVCLS = NNVCLS
	CYCTCD = NYCTCD
	LSTCNT = NSTCNT
	COMCOD = NOMCOD
	LLCODE = NLCODE
	BUYER = NUYER
	DRWREL = NRWREL
	DRWREV = NRWREV
	RTEREV = NTEREV
	RTEREL = NTEREL
	RTENUM = NTENUM
	XCALL FRMAT (RTENUM,5)
	MFGLOC = NFGLOC
	ORDPOL = NRDPOL
	IF (NRDPOL.EQ.' ') ORDPOL = 'R'
	PLNPER = NLNPER
	PLNLT = NLNLT
	PLNMLT = NLNMLT
	UNDEF = NUNDEF
	LIFOBQ = NIFOBQ
	LIFOBP = NIFOBP
	LOKCTL = 1
	XCALL IOS (4,NEWMAS,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	GO TO MASLUP
WRTBRM,
	LOKCTL = 1
	XCALL IOS (4,BRACKS,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	LOKCTL = 1
	XCALL IOS (3,OLDMAS,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFMAS
	GO TO WRTBRM

;*****************************************************************************

EOFMAS,
	CLOSE 3
	CLOSE 4
	LOKCTL = 1
	XCALL IO (2,DEVICE,43,READ,LOKCTL)
	FILENM = 'INVTRX'
	IF (DEVNAM(CMPCNT).EQ.BLANKS) GO TO BLKDEV
	CODEV = DEVNAM (CMPCNT)
	ON ERROR NOTRX
	OPEN (3,I,FILBL)
	OFF ERROR
	LOKCTL = 1
	IF (OLDTRS.GT.NEWTRS) XCALL IO (3,INVCTL,1,READ,LOKCTL)
	IF (OLDTRS.LE.NEWTRS) XCALL IO (3,CTLINV,1,READ,LOKCTL)
	XCALL RSTAT (SZ,ACHAR)
	IF (SZ.NE.OLDTRS) GO TO BADSIZ
	XCALL OUTPT (24,1,1,'PROCESSING INVTRX FILE - ITEM # ',1)
	OLDMAS =
	NEWMAS =
	LOKCTL = 1
	XCALL IO (3,INVCTL,1,READ,LOKCTL)
	RECCNT = XEC043
	FILBL2 (1,11) = FILBL (1,11)
	SIZE = (((XAX043+1)*(NEWTRS+2))/512) + 1
	ON ERROR NOROOM
	OPEN (4,O,FILBL2)
	OFF ERROR
	ORG043 = XRG043
	IF (JUSTIF) ORG043 = 1
	REC043 = XEC043
	MAX043 = XAX043
	DEL043 = XEL043
	LOKCTL = 1
	XCALL IOS (4,CTLINV,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
TRXLUP,
	LOKCTL = 1
	XCALL IOS (3,OLDTRX,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFTRX
	IF (XITMNO.EQ.BRACKS) GO TO WRTBRX
	XCALL OUTPT (24,33,1,XITMNO,1)
	RITMNO = XITMNO
	IF (JUSTIF) XCALL FRMAT (RITMNO,15)
	RDESCR = XDESCR
	LOCTO = XLOCTO
	LOCFRM = XOCFRM
	NEWLOC = XEWLOC
	TOOONH = XOOONH
	TOOONO = XOOONO
	FROONH = XROONH
	FROONO = XROONO
	OLDAVG = XLDAVG
	QTYRCD = XTYRCD
	NEWCST = XEWCST
	PONUM = XPONUM
	ORDCMP = XRDCMP
	TRXTYP = XRXTYP
	LOKCTL = 1
	XCALL IOS (4,NEWTRX,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	GO TO TRXLUP
WRTBRX,
	NEWTRX = BRACKS
	LOKCTL = 1
	XCALL IOS (4,NEWTRX,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	LOKCTL = 1
	XCALL IOS (3,OLDTRX,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFTRX
	GO TO WRTBRX

;*****************************************************************************

EOFTRX,
	CLOSE 4
	CLOSE 3
	LOKCTL = 1
	XCALL IO (2,DEVICE,53,READ,LOKCTL)
	FILENM = 'PURCHS'
	IF (DEVNAM(CMPCNT).EQ.BLANKS) GO TO BLKDEV
	CODEV = DEVNAM (CMPCNT)
	ON ERROR NOPUR
	OPEN (3,I,FILBL)
	OFF ERROR
	LOKCTL = 1
	IF (OLDPRS.GT.NEWPRS) XCALL IO (3,PURCTL,1,READ,LOKCTL)
	IF (OLDPRS.LE.NEWPRS) XCALL IO (3,CTLPUR,1,READ,LOKCTL)
	XCALL RSTAT (SZ,ACHAR)
	IF (SZ.NE.OLDPRS) GO TO BADSIZ
	XCALL OUTPT (24,1,1,'PROCESSING PURCHS FILE - ITEM # ',1)
	OLDMAS =
	NEWMAS =
	LOKCTL = 1
	XCALL IO (3,PURCTL,1,READ,LOKCTL)
	RECCNT = WEC053
	FILBL2 (1,11) = FILBL (1,11)
	SIZE = (((WAX053+1)*(NEWPRS+2))/512) + 1
	ON ERROR NOROOM
	OPEN (4,O,FILBL2)
	OFF ERROR
	ORG053 = 1
	REC053 = WEC053
	MAX053 = WAX053
	DEL053 = WEL053
	LOKCTL = 1
	XCALL IOS (4,CTLPUR,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
PURLUP,
	LOKCTL = 1
	XCALL IOS (3,OLDPUR,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFPUR
	IF (WPITEM.EQ.BRACKS) GO TO WRTBRP
	XCALL OUTPT (24,33,1,WPITEM,1)
;	PVEND = WPVEND, 'ZZZX'			;IM1-RT
	XCALL FRMAT (WPVEND,4)
	PVEND = WPVEND
	PLOC = WPLOC
	PPONUM = WPONUM
	PITEM = WPITEM
	IF (JUSTIF) XCALL FRMAT (PITEM,15)
	PDESCR = WDESCR
	PPRDCT = WPRDCT
	PLDTM = WLDTM
	PRCTDT = WRCTDT
	PLSTCT = WLSTCT
	PWGT = WPWGT
	PORDED = WORDED
	LOKCTL = 1
	XCALL IOS (4,NEWPUR,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	GO TO PURLUP
WRTBRP,
	NEWPUR = BRACKS
	LOKCTL = 1
	XCALL IOS (4,NEWPUR,WRITE,LOKCTL)
	IF (LOKCTL.EQ.3) GO TO NOROOM
	LOKCTL = 1
	XCALL IOS (3,OLDPUR,READ,LOKCTL)
	IF (LOKCTL.EQ.2) GO TO EOFPUR
	GO TO WRTBRP

;*****************************************************************************

EOFPUR,
	CLOSE 3
	CLOSE 4
	IF (JUSTIF.EQ.0) GO TO EOFTAG	;NO NEED TO UPDATE INDEX IF NO JUSTIFY
	OLDMAS =
	NEWMAS =
	LOKCTL = 1
	XCALL IO (2,DEVICE,42,READ,LOKCTL)
	FILENM = 'ITMIDX'
	IF (DEVNAM(CMPCNT).EQ.BLANKS) GO TO BLKDEV
	XCALL OUTPT (24,1,1,'PROCESSING ITMIDX FILE - ITEM # ',1)
	CODEV = DEVNAM (CMPCNT)
	ON ERROR NOIDX
	OPEN (3,U,FILBL)
	OFF ERROR
	LOKCTL = 1
	XCALL IO (3,ITMIDX,1,READ,LOKCTL)
	RECCNT = SAVREC
	CNT = 1
IDXLUP,
	INCR CNT
	IF (CNT.GT.RECCNT) GO TO EOFIDX
	LOKCTL = 1
	XCALL IO (3,ITMIDX,CNT,READ,LOKCTL)
	XCALL OUTPT (24,33,1,IITMNO,1)
	XCALL FRMAT (IITMNO,15)
	LOKCTL = 1
	XCALL IO (3,ITMIDX,CNT,WRITE,LOKCTL)
	GO TO IDXLUP

;*****************************************************************************

EOFIDX,
	CLOSE 3
	OLDMAS =
	LOKCTL = 1
	XCALL IO (2,DEVICE,40,READ,LOKCTL)
	FILENM = 'INVTAG'
	IF (DEVNAM(CMPCNT).EQ.BLANKS) GO TO BLKDEV
	XCALL OUTPT (24,1,1,'PROCESSING INVTAG FILE - ITEM # ',1)
	CODEV = DEVNAM (CMPCNT)
	ON ERROR NOTAG
	OPEN (3,U,FILBL)
	OFF ERROR
	LOKCTL = 1
	XCALL IO (3,TAGCTL,1,READ,LOKCTL)
	RECCNT = REC040
	CNT = 1
TAGLUP,
	INCR CNT
	IF (CNT.GT.RECCNT) GO TO EOFTAG
	LOKCTL = 1
	XCALL IO (3,OLDTAG,CNT,READ,LOKCTL)
	XCALL OUTPT (24,33,1,TAGITM,1)
	XCALL FRMAT (TAGITM,15)
	LOKCTL = 1
	XCALL IO (3,OLDTAG,CNT,WRITE,LOKCTL)
	GO TO TAGLUP
EOFTAG,
	CLOSE 3
	XCALL MESAG ('CONVERSION OF INVENTORY MANAGEMENT FILES SUCCESSFUL',2)
	LOKCTL = 1
	XCALL IO (2,DEVICE,41,READ,LOKCTL)
	CODEV = DEVNAM (CMPCNT)
	FILENM = 'ITMMAS'
	FILBL2 (1,11) = FILBL (1,11)
	XCALL RENAM (3,FILBL,FILBL2)
	LOKCTL = 1
	XCALL IO (2,DEVICE,43,READ,LOKCTL)
	CODEV = DEVNAM (CMPCNT)
	FILENM = 'INVTRX'
	FILBL2 (1,11) = FILBL (1,11)
	XCALL RENAM (3,FILBL,FILBL2)
	LOKCTL = 1
	XCALL IO (2,DEVICE,53,READ,LOKCTL)
	CODEV = DEVNAM (CMPCNT)
	FILENM = 'PURCHS'
	FILBL2 (1,11) = FILBL (1,11)
	XCALL RENAM (3,FILBL,FILBL2)
	CLOSE 2

;*****************************************************************************

END,
	XCALL PGMND

;*****************************************************************************

INPUT,
	XCALL INPUT (ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,1)
	RETURN

;*****************************************************************************

NOCMP,
	XCALL MESAG ('FATAL ERROR - COMPNY.DDF FILE NOT FOUND ON DEVICE UT',2)
	STOP

;*****************************************************************************

NODEV,
	XCALL MESAG ('FATAL ERROR - DEVICE.DDF FILE NOT FOUND ON DEVICE UT',2)
	CLOSE 1
	STOP

;*****************************************************************************

NOTFND,
	XCALL MESAG ('FATAL ERROR - ITMMAS FILE NOT FOUND',2)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	STOP

;*****************************************************************************

NOTAG,
	XCALL MESAG ('FATAL ERROR - INVTAG FILE NOT FOUND',2)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	STOP

;*****************************************************************************

NOTRX,
	XCALL MESAG ('FATAL ERROR - INVTRX FILE NOT FOUND',2)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	STOP

;*****************************************************************************

NOPUR,
	XCALL MESAG ('FATAL ERROR - PURCHS FILE NOT FOUND',2)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	STOP

;*****************************************************************************

NOIDX,
	XCALL MESAG ('FATAL ERROR - ITMIDX FILE NOT FOUND',2)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	STOP

;*****************************************************************************

BADSIZ,
	XCALL OUTPT (23,1,2,'FATAL ERROR - PRESENT ',1)
	XCALL OUTPT (0,0,0,FILENM,1)
	XCALL OUTPT (0,0,0,' RECORD LENGTH INCORRECT FOR CONVERSION',1)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	CLOSE 3
	STOP

;*****************************************************************************

NOROOM,
	ENTRY = SIZE, 'ZZZZX'
	XCALL OUTPT (22,1,2,ENTRY,1)
	XCALL OUTPT (0,0,0,' CONTIGUOUS BLOCKS NEEDED ON DEVICE ',1)
	XCALL OUTPT (0,0,0,CODEV,1)
	XCALL OUTPT (23,1,0,'FATAL ERROR - NO ROOM FOR NEW ',1)
	XCALL OUTPT (0,0,0,FILENM,1)
	XCALL OUTPT (0,0,0,' FILE',1)
	XCALL MESAG ('ALL FILES ARE IN THEIR ORIGINAL STATE',2)
	CLOSE 2
	CLOSE 3
	STOP

;*****************************************************************************

BLKDEV,
	BLKFIL = FILENM
	XCALL MESAG (BLKMSG,2)
	CLOSE 2
	STOP

;*****************************************************************************

END
