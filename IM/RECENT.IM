;  RECENT / IM 
;
;
;		::PCPYIM.DEF::
;*****************************************************************************
;		INVENTORY MANAGEMENT  
;
;		RELEASED: AUGUST 1, 1984 (d70s10)
;*****************************************************************************
;
;		PROPRIETARY RIGHTS NOTICE:  All rights reserved.  This
;		material contains the valuable properties and trade secrets
;		of MCBA, Glendale, California, USA embodying substantial
;		creative effort and confidential information and ideas, no
;		part of which may be used and/or disclosed without MCBA's
;		duly authorized license agreement and/or written permission.
;
;		COPYRIGHT NOTICE:  Copyright <C> 1978, 1981, 1982, 1983, 1984
;		MCBA, AN UNPUBLISHED WORK.  ALL RIGHTS RESERVED.
;
;
;		COMPILE & LINK PER INSTALLATION OR TECHNICAL NOTES.
;
;:
;		INVENTORY RECEIVINGS, TRANSFERS, & ISSUES TRANSACTIONS ENTRY
;		AND EDITING (ADD, CHANGE, AND DELETE MODES)
;
RECORD
	,A64,'THIS MATERIAL CONTAINS THE VALUABLE PROPERTIES AND TRADE SECRETS'
	,A62,'OF MCBA, EMBODYING CONFIDENTIAL INFORMATION AND IDEAS, NO PART'
	,A56,'OF WHICH MAY BE USED AND/OR DISCLOSED WITHOUT MCBAs DULY'
	,A55,'AUTHORIZED LICENSE AGREEMENT AND/OR WRITTEN PERMISSION.'
	,A61,'COPYRIGHT (C) MCBA, AN UNPUBLISHED WORK. ALL RIGHTS RESERVED.'

RECORD INVTRX		;
		.INCLUDE 'DEF:RD043A.DEF'
RECORD DUMREC		;
		.INCLUDE 'DEF:RD043B.DEF'
RECORD ITMMAS		;
		.INCLUDE 'DEF:RD041A.DEF'
RECORD DUMINV,X		;
		.INCLUDE 'DEF:RD041B.DEF'
RECORD ITMIDX		;
		.INCLUDE 'DEF:RD042A.DEF'
RECORD SNDMSG
	PRGNAM	,A9,	'IM:TRXCNT'
	RCNT	,D5
		,D5
		,D3,	043
RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2
RECORD
	OPTION	,D1
	ENTRY	,A16
	FULL	,D1
	INXCTL  ,D1
	JUSTIF	,D1
	CNGCTL	,D1
	WHATNO	,D2
	SELECT	,D1
	LOCTNS	,D2
	NXTPRG	,A9
	CTR	,D2
	SAVT	,D2
	SAVF	,D2
	SAVFO	,D2
	SAVTYP	,D1
	OLDQTY	,D6
	ALFQTY	,A18
	FRSTSW	,D1
	TOTONH	,D7
	RECNO	,D5
	KITMNO	,A15
	KEY   	,A15
	BSEND	,D5
	BSMID	,D5
	SRCCTL	,D1
	BLANKS	,A6
	SWITCH	,D1
	MAXIM	,D5
	MAXCNT	,D5
	WAVCST	,D10
	MASK	,A8,	'ZZZ,ZZX-'
	MASK1	,A11,	'ZZZ,ZZZ.XX-'
	MASK2	,A12,	'ZZZ,ZZZ.XXX-'
	V	,D1
	READ	,D1	,0
	WRITE	,D1	,1
	LOKCTL	,D1
PROC (1)
	XCALL TERID (V)
	SWITCH = 1
	XCALL FILES (2,'I',42,SWITCH)		;FILE # 42 -- ITMIDX FILE
	IF (SWITCH.EQ.9) GO TO END
	SWITCH = 1
	XCALL FILES (3,'U',43,SWITCH)		;FILE # 43 -- INVTRX FILE
	IF (SWITCH.NE.9) GO TO OPEN1
	CALL CLOSE1
	GO TO END
OPEN1,
	SWITCH = 1
	XCALL FILES (1,'U',41,SWITCH)		;FILE # 41 -- ITMMAS FILE
	IF (SWITCH.NE.9) GO TO CONT
	CALL CLOSE2
	GO TO END
CONT,
	SWITCH = 5
	XCALL FILES (13,'I',43,SWITCH)		;FILE # 43 -- INVTRX FILE
	LOKCTL = 0
	XCALL IO (1,DUMINV,1,READ,LOKCTL)
	GO TO (ENDOFF), LOKCTL
	LOCTNS = NUMLOC
	BSEND = ORG041
	MAXIM = MAX041
	JUSTIF = JSTIFY
	LOKCTL = 0
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	GO TO (ENDOFF), LOKCTL
	MAXCNT = MAX043
BEGIN,
	XCALL TMENU ('INVENTORY TRX ENTRY & EDITING',SELECT,V)
	GO TO (DISPLA,DISPLA,DISPLA,POST,POST), SELECT
ENDOFF,
	CALL CLOSE4
END,
	XCALL PGCHN ('IM:IMMENU',1)
POST,
	XCALL WATE (4,V)
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	IF (REC043.LE.1) GO TO NONE
	RCNT = REC043
	NXTPRG = 'IM:RECRPT'
	IF (SELECT.EQ.4) NXTPRG = 'IM:RECEDT'
	CALL CLOSE4
	IF (REC043.EQ.ORG043 .AND. NXTPRG.EQ.'IM:RECEDT') GO TO NOPROT
	SWITCH = 3
	XCALL FILES (3,'U',43,SWITCH)
	IF (SWITCH.EQ.9) GO TO END
NOPROT,
	IF (REC043.EQ.ORG043) XCALL PGCHN (NXTPRG,1)
	SWITCH = 5
	XCALL SNMSG (SNDMSG,SWITCH)
	SWITCH = 2
	XCALL SNMSG (NXTPRG,SWITCH)
	XCALL PGCHN ('IM:SRTREC',0)
DISPLA,
	UNLOCK 1
	UNLOCK 3
	FULL =
	IF (SELECT.EQ.1.AND.REC043.GE.MAXCNT) GO TO FULL
	FRSTSW =
	SAVT =
	SAVF =
	SAVFO =
	SAVTYP = 9
	CNGCTL =
	INVTRX =
	XCALL OUTPT (2,2,2,'1. ITEM #',V)
	XCALL OUTPT (4,2,0,'2. LOCATION-TO',V)
	XCALL OUTPT (5,2,0,'3. LOCATION-FROM',V)
	XCALL OUTPT (6,2,0,'4. QTY ',V)
	IF (SELECT.NE.1) XCALL OUTPT (2,1,0,'*',V)
ITMNUM,
	XCALL OUTPT (2,44,1,'\',V)
	CTL = '02,21,15,01,AE'
	CALL INPUT
	GO TO (DISPLA,BEGIN), INXCTL
	IF (JUSTIF) XCALL FRMAT (ENTRY(1,15),15)
	XCALL OUTPT (2,21,0,ENTRY(1,15),V)
	RITMNO = ENTRY(1,15)
	KITMNO = RITMNO
	KEY = RITMNO
	XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,1,16,20,0,0,0,0)
	GO TO (BADITM), SRCCTL
	GO TO (BADITM), IRC041 + 1
	LOKCTL = 1
	XCALL IO (1,ITMMAS,IRC041,READ,LOKCTL)
	GO TO (FNDTRX,FNDTRX), SELECT - 1
	RDESCR = DESCR
	OLDAVG = AVGCST
	XCALL OUTPT (3,21,0,RDESCR,V)
LOCATO,
	CTL = '04,21,02,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	LOCTO = ENTRY(1,2)
	IF (LOCTO.NE.'  '.AND.LOCTO.EQ.LOCFRM) GO TO LOCATO
	CALL LOCAT1
	IF (SAVT.EQ.0.AND.LOCTO.NE.'  ') GO TO LOCATO
	IF (CNGCTL.EQ.1.AND.LOCTO.EQ.'  '.AND.LOCFRM.EQ.'  ') GO TO LOCAFR
	GO TO (TTYPE), CNGCTL
LOCAFR,
	CTL = '05,21,02,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	LOCFRM = ENTRY(1,2)
	IF (LOCTO.EQ.'  '.AND.LOCFRM.EQ.'  ') GO TO LOCATO
	IF (LOCFRM.EQ.LOCTO) GO TO LOCAFR
	CALL LOCAF1
	IF (SAVF.EQ.0.AND.LOCFRM.NE.'  ') GO TO LOCAFR
	GO TO (TTYPE), CNGCTL
QRCVD,
	CTL = '06,21,05,01,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYRCD = ENTRY
TTYPE,
	IF (LOCTO.EQ.'  '.AND.LOCFRM.NE.'  ') GO TO TYPE2	;ISSUE
	IF (LOCTO.NE.'  '.AND.LOCFRM.EQ.'  ') GO TO TYPE0	;RECEIVING
	IF (LOCTO.NE.'  '.AND.LOCFRM.NE.'  ') GO TO TYPE1	;TRANSFER
	GO TO LOCATO
TYPE0,
	IF (TRXTYP.NE.0) CNGCTL =
	TRXTYP =
	XCALL OUTPT (5,32,1,'\',V)
	XCALL OUTPT (6,9,0,'RECEIVED   ',V)
	ALFQTY (1,8) = TOOONH, MASK
	XCALL OUTPT (4,32,0,'OLD ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	FROONH =
	FROONO =
	CTL = '04,70,06'
	ALFQTY (1,8) = (QTYRCD + TOOONH), MASK
	XCALL OUTPT (4,57,0,'NEW ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	GO TO (NWAVRG), CNGCTL
	XCALL OUTPT (7,2,0,'5. NEW UNIT COST',V)
	XCALL OUTPT (8,2,0,'6. ORDER COMP ?',V)
	XCALL OUTPT (9,2,0,'7. ORDER NUMBER',V)
	ALFQTY (1,11) = OLDAVG, MASK2 (1,11)
	XCALL OUTPT (7,32,0,'OLD AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	IF (SELECT.NE.1) GO TO DSPTX1
	GO TO NUNIT
TYPE1,
	TRXTYP = 1
	XCALL OUTPT (6,9,0,'TRANSFERRED',V)
	XCALL OUTPT (6,32,2,'\',V)
	ALFQTY (1,8) = TOOONH, MASK
	XCALL OUTPT (4,32,0,'OLD ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	ALFQTY (1,8) = FROONH, MASK
	XCALL OUTPT (5,32,0,'OLD AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	ALFQTY (1,8) = (QTYRCD + TOOONH), MASK
	XCALL OUTPT (4,57,0,'NEW ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	ALFQTY (1,8) = (FROONH - QTYRCD), MASK
	XCALL OUTPT (5,57,0,'NEW AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	NEWCST =
	NEWAVG =
	PONUM =
	ORDCMP =
	IF (SELECT.NE.1.AND.CNGCTL.EQ.0) GO TO DSPTX1
	GO TO ANYCNG
TYPE2,
	TRXTYP = 2
	XCALL OUTPT (4,32,1,'\',V)
	XCALL OUTPT (6,9,0,'ISSUED     ',V)
	XCALL OUTPT (6,32,2,'\',V)
	ALFQTY (1,8) = FROONH, MASK
	XCALL OUTPT (5,32,0,'OLD AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	NEWCST =
	NEWAVG =
	PONUM =
	ORDCMP =
	TOOONH =
	TOOONO =
	ALFQTY (1,8) = (FROONH - QTYRCD), MASK
	XCALL OUTPT (5,57,0,'NEW AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	IF (SELECT.NE.1.AND.CNGCTL.EQ.0) GO TO DSPTX1
	GO TO ANYCNG
NUNIT,
	CTL = '07,21,08,01,# '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	NEWCST = ENTRY(1,8)
	ALFQTY (1,10) = NEWCST, MASK1 (1,10)
	XCALL OUTPT (7,21,0,ALFQTY(1,10),V)
NWAVRG,
	TOTONH =
	CTR =
NWAVR1,
	INCR CTR
	IF (CTR.GT.LOCTNS) GO TO NWAVR2
	IF (LOC(CTR).EQ.'  ') GO TO NWAVR2
	TOTONH = TOTONH + QTYONH(CTR)
	GO TO NWAVR1
NWAVR2,
	IF (QTYRCD+TOTONH.EQ.0) GO TO DSPLAV
	WAVCST = (((TOTONH*OLDAVG*10)+((QTYRCD*NEWCST)*100))/(QTYRCD+TOTONH)) #1
	NEWAVG = WAVCST
DSPLAV,
	IF ((QTYRCD + TOTONH).EQ.0) NEWAVG = (NEWCST * 10)
	ALFQTY (1,11) = NEWAVG, MASK2 (1,11)
	XCALL OUTPT (7,57,0,'NEW AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	GO TO (ANYCNG), CNGCTL
COMPLT,
	CTL = '08,21,01,00,YY'
	CALL INPUT
	ORDCMP = ENTRY(1,1)
	GO TO (ANYCNG), CNGCTL
PRCHNO,
	CTL = '09,21,09,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	PONUM = ENTRY
	GO TO ANYCNG
FNDTRX,
	XCALL WATE (3,V)
	RECNO = 1
	LOKCTL = 1
	XCALL IO (13,INVTRX,MAXCNT,READ,LOKCTL)
READ,
	INCR RECNO
	ON ERROR NOFIND
	LOKCTL = 1
	XCALL IO (13,INVTRX,RECNO,READ,LOKCTL)
	IF (RITMNO.EQ.']]]]]]') GO TO NOFIND
	IF (KITMNO.NE.RITMNO) GO TO READ
	IF (RDESCR.EQ.']]]DEL') GO TO READ
	KEY = RITMNO
	SAVTYP = TRXTYP
	XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,1,16,20,0,0,0,0)
	GO TO (BADITM), SRCCTL
	LOKCTL = 1
	XCALL IO (1,ITMMAS,IRC041,READ,LOKCTL)
	LOKCTL = 1
	XCALL IO (3,INVTRX,RECNO,READ,LOKCTL)
	XCALL OUTPT (3,21,0,RDESCR,V)
	XCALL OUTPT (4,21,0,LOCTO,V)
	XCALL OUTPT (5,21,0,LOCFRM,V)
	GO TO (TYPE0,TYPE1,TYPE2), TRXTYP + 1
DSPTX1,
	ALFQTY (1,8) = QTYRCD, MASK
	XCALL OUTPT (6,21,0,ALFQTY(1,8),V)
	IF (TRXTYP.EQ.1.OR.TRXTYP.EQ.2) GO TO RIGHT
	XCALL OUTPT (7,2,0,'5. NEW UNIT COST',V)
	XCALL OUTPT (8,2,0,'6. ORDER COMP ?',V)
	XCALL OUTPT (9,2,0,'7. ORDER NUMBER',V)
	IF (FRSTSW) GO TO NUNIT
	ALFQTY (1,10) = NEWCST, MASK1 (1,10)
	XCALL OUTPT (7,21,0,ALFQTY(1,10),V)
	ALFQTY (1,11) = NEWAVG, MASK2 (1,11)
	XCALL OUTPT (7,57,0,'NEW AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	XCALL OUTPT (8,21,0,ORDCMP,V)
	XCALL OUTPT (9,21,0,PONUM,V)
	IF (SELECT.EQ.1) FRSTSW = 1
RIGHT,
	IF ((SAVTYP.NE.0.AND.TRXTYP.EQ.0).OR.CNGCTL.EQ.1) GO TO ANYCNG
	XCALL OUTPT (12,1,1,'RIGHT TRX ?',V)
	CTL = '12,14,01,00,YN'
	CALL INPUT
	GO TO (READ), INXCTL-1
	IF (TRXTYP.NE.0) CALL SETFRM
	IF (SELECT.NE.3) GO TO ANYCNG
	RDESCR = ']]]DEL'
	XCALL WATE (3,V)
	GO TO CHNGE1
SETFRM,
	SAVF =
	CTR =
	CALL LOCAF2
	SAVFO = SAVF
	OLDQTY = QTYRCD
	IF (LOC(SAVFO).EQ.'  ') SAVFO =
	IF (SAVFO.EQ.0) RETURN
	IF (CNTRLD.EQ.'C') QTYCOM(SAVFO) = QTYCOM(SAVFO) - OLDQTY
	FROONH(SAVFO) = FROONH(SAVFO) + OLDQTY
	IF (QTYCOM(SAVFO).LT.0) QTYCOM(SAVFO) =
	RETURN
ADD,
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	IF (REC043.GE.MAX043) FULL = 1
	IF (FULL) GO TO FULL
	INCR REC043
	IF (TRXTYP.EQ.0) GO TO WRTERR
	IF (LOC(SAVF).NE.'  '.AND.CNTRLD.EQ.'C')
&		QTYCOM(SAVF) = QTYCOM(SAVF) + QTYRCD
WRTERR,
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,WRITE,LOKCTL)
	LOKCTL = 1
	XCALL IO (3,INVTRX,REC043,WRITE,LOKCTL)
	LOKCTL = 1
	XCALL IO (1,ITMMAS,IRC041,WRITE,LOKCTL)
	GO TO FREBUF
CHANGE,
	IF (TRXTYP.EQ.0) GO TO CHNGE1
	IF (SAVTYP.EQ.0.AND.SAVF.EQ.0) CALL LOCAF1
	IF (SAVF.EQ.0) GO TO CHNGE1
	IF (LOC(SAVF).NE.'  '.AND.CNTRLD.EQ.'C')
&		QTYCOM(SAVF) = QTYCOM(SAVF) + QTYRCD
CHNGE1,
	LOKCTL = 1
	XCALL IO (3,INVTRX,RECNO,WRITE,LOKCTL)
	LOKCTL = 1
	XCALL IO (1,ITMMAS,IRC041,WRITE,LOKCTL)
FREBUF,
	LOKCTL = 1
	XCALL IO (3,DUMREC,MAXCNT,READ,LOKCTL)
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	LOKCTL = 1
	XCALL IO (1,DUMINV,MAXIM,READ,LOKCTL)
	LOKCTL = 1
	XCALL IO (1,DUMINV,1,READ,LOKCTL)
	IF (SELECT.EQ.3) XCALL MESAG ('TRX DELETED',2)
	GO TO DISPLA
LOCAT1,
	CTR =
	SAVT =
	TOOONH =
	TOOONO =
	IF (LOCTO.EQ.'  ') RETURN
LOCAT2,
	INCR CTR
	IF (CTR.GT.LOCTNS) GO TO NOLOC
	IF (LOC(CTR).EQ.LOCTO) GO TO FOUNDT
	IF (LOC(CTR).EQ.'  ') GO TO NEWLTO
	GO TO LOCAT2
FOUNDT,
	IF (NEWLOC.EQ.3) NEWLOC = 2
	IF (NEWLOC.EQ.1) NEWLOC =
FOUNT1,
	SAVT = CTR
	TOOONH = QTYONH(SAVT)		;NOTE: TOOONH IS ONLY THE QTY ON HAND.
	TOOONO = QTYONO(SAVT)
	RETURN
NEWLTO,
	IF (CTR.GE.LOCTNS.AND.(NEWLOC.EQ.2.OR.NEWLOC.EQ.3)) GO TO NOLOC
	XCALL MESAG ('TO LOCATION NOT ON FILE . . . ADDING LOCATION',2)
	IF (NEWLOC.EQ.0) NEWLOC = 1
	IF (NEWLOC.EQ.2) NEWLOC = 3
	GO TO FOUNT1
LOCAF1,
	CTR =
	SAVF =
	FROONH =
	IF (LOCFRM.EQ.'  ') RETURN
LOCAF2,
	INCR CTR
	IF (CTR.GT.LOCTNS) GO TO NOLOC
	IF (LOC(CTR).EQ.'  ') GO TO LOCAF4
	IF (LOC(CTR).NE.LOCFRM) GO TO LOCAF2
	IF (NEWLOC.EQ.3) NEWLOC = 1
	IF (NEWLOC.EQ.2) NEWLOC =
LOCAF3,
	SAVF = CTR				;FROONH IS THE QTY AVAIL.
	FROONH = QTYONH(SAVF) - QTYCOM(SAVF)	;NOTE: QTY AVAIL DOES NOT
						;INCLUDE QTY ON ORDER.
	RETURN
LOCAF4,
	IF (SELECT.EQ.1.OR.CNGCTL.NE.0) XCALL MESAG
&		 ('FROM LOCATION NOT ON FILE . . . ADDING LOCATION',2)
	IF (NEWLOC.EQ.0) NEWLOC = 2
	IF (NEWLOC.EQ.1) NEWLOC = 3
	GO TO LOCAF3
NOLOC,
	XCALL MESAG ('NO SUCH LOCATION, NO ROOM TO ADD IT ',1)
	RETURN
NOFIND,
	XCALL MESAG ('TRX NOT FOUND',1)
	GO TO DISPLA
INPUT,
	XCALL INPUT (ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,V)
	RETURN
ANYCNG,
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (PROCES,CNGBR,DISPLA), CNGCTL+1
CNGBR,
	IF (TRXTYP.NE.0.AND.WHATNO.GT.4) GO TO ANYCNG
	GO TO (DISPLA,LOCATO,LOCAFR,QRCVD,NUNIT,COMPLT,PRCHNO), WHATNO
BADCNG,
	CNGCTL = 3
	GO TO ANYCNG
PROCES,
	XCALL WATE (3,V)
	GO TO (ADD,CHANGE), SELECT
	GO TO ANYCNG
BADITM,
	XCALL MESAG ('ITEM NOT ON FILE',1)
	GO TO ITMNUM
NONE,
	XCALL MESAG ('NO TRANSACTIONS ON FILE',1)
	GO TO BEGIN
FULL,
	XCALL OUTPT (3,1,2,'\',1)
	IF (FULL) XCALL OUTPT (5,10,0,
&	'**WARNING - RECORD NOT ADDED**',V)
	XCALL OUTPT (6,10,0,
&	'The INVTRX file is now full.  Either post existing transactions',V)
	XCALL OUTPT (7,10,0,
&	'or increase the size of the INVTRX file using the EXPAND option',V)
	XCALL OUTPT (8,10,0,
&	'in the SYSTEM FUNCTIONS menu before entering more transactions.',V)
	XCALL MESAG (' ',2)
	GO TO BEGIN
CLOSE4,
	IF (SELECT.LT.4) XCALL WATE (3,V)
	XCALL FILES (1,'I',41,4)
	CLOSE 13
CLOSE2,
	XCALL FILES (3,'U',43,4)
CLOSE1,
	XCALL FILES (2,'I',42,4)
	RETURN
END
