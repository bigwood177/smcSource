;RECENT.PO	isam

RECORD INVTRX		;
		.INCLUDE 'DEF:RD143A.DEF'
RECORD DUMREC		;
		.INCLUDE 'DEF:RD143B.DEF'
RECORD ITMMAS		;
		.INCLUDE 'DEF:RD041A.def'
RECORD DUMINV,X		;
		.INCLUDE 'DEF:RD041B.def'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;RECORD ITMIDX		;
;;;		.INCLUDE 'DEF:RD042A.DEF'
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RECORD	ITMKEY
	.INCLUDE 'DEF:RD041K.DEF'
RECORD	COPTBL
	.INCLUDE 'DEF:RD182A.DEF'

RECORD SNDMSG
	PRGNAM	,A9,	'PO:TRXCNT'
	RCNT	,D5
		,D5
		,D3,	143
RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2


RECORD	CHANNEL
	CHN182	,D2

RECORD	VARS
	DF1	,D3
	DF2	,D3
	DF3	,D5
	TTYPE	,A1
	OPTION	,D1
	ENTRY	,A16
	FULL	,D1
	INXCTL  ,D1
	JUSTIF	,D1
	CNGCTL	,D1
	WHATNO	,D2
	SELECT	,D1
	LOCTNS	,D2
	NXTPRG	,A9
	CTR	,D2
	SAVT	,D2
	SAVF	,D2
	SAVFO	,D2
	SAVTYP	,D1
	OLDQTY	,D6
	ALFQTY	,A18
	FRSTSW	,D1
	TOTONH	,D7
	RECNO	,D5
	KITMNO	,A15
	KEY   	,A15
	BSEND	,D5
	BSMID	,D5
	SRCCTL	,D1
	BLANKS	,A6
	SWITCH	,D1
	MAXIM	,D5
	MAXCNT	,D5
	WAVCST	,D10
	MASK	,A8,	'ZZZ,ZZX-'
	MASK1	,A11,	'ZZZ,ZZZ.XX-'
	MASK2	,A12,	'ZZZ,ZZZ.XXX-'
	V	,D1
	READ	,D1	,0
	WRITE	,D1	,1
	LOKCTL	,D1
PROC 
	XCALL TERID (V)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;	SWITCH = 1
;;;	XCALL FILES (2,'I',42,SWITCH)		;FILE # 42 -- ITMIDX FILE
;;;	IF (SWITCH.EQ.9) GO TO END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	SWITCH = 1
	XCALL FILES (3,'U',143,SWITCH)		;FILE # 143 -- PORTRX FILE
	IF (SWITCH.NE.9) GO TO OPEN1
	CALL CLOSE1
	GO TO END
OPEN1,
	SWITCH = 1
	XCALL FILES (1,'SU',41,SWITCH)		;FILE # 41 -- ITMMAS FILE
	IF (SWITCH.NE.9) GO TO CONT
	CALL CLOSE2
	GO TO END
CONT,
	SWITCH = 5
	XCALL FILES (13,'I',143,SWITCH)		;FILE # 43 -- PORTRX FILE

	LOKCTL = 0

	ITEMNO = '!!!!!!!!!!!!!!!'
	XCALL ISIO (1, DUMINV, ITEMNO, READ, LOKCTL)
;;;	XCALL IO (1,DUMINV,1,READ,LOKCTL)
	GO TO (ENDOFF), LOKCTL

	LOCTNS = NUMLOC
	BSEND = ORG041
	MAXIM = MAX041
	JUSTIF = JSTIFY

	LOKCTL = 0
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	GO TO (ENDOFF), LOKCTL
	MAXCNT = MAX143

	SWITCH = 5
	XCALL FILES (17, 'SI', 182, SWITCH)	;182 = COPTBL
	CHN182 = 17

BEGIN,
	XCALL TMENU ('INVENTORY TRX ENTRY & EDITING',SELECT,V)
	GO TO (DISPLA,DISPLA,DISPLA,POST,POST), SELECT
ENDOFF,
	CALL CLOSE4
END,
	XCALL PGCHN ('PO:POMENU',1)
POST,
	XCALL WATE (4,V)
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	IF (REC143.LE.1) GO TO NONE
	RCNT = REC143
	NXTPRG = 'PO:RECRPT'
	IF (SELECT.EQ.4) NXTPRG = 'PO:RECEDT'
	CALL CLOSE4
	IF (REC143.EQ.ORG143 .AND. NXTPRG.EQ.'PO:RECEDT') GO TO NOPROT
	SWITCH = 3
	XCALL FILES (3,'U',143,SWITCH)
	IF (SWITCH.EQ.9) GO TO END
NOPROT,
	IF (REC143.EQ.ORG143) XCALL PGCHN (NXTPRG,1)
	SWITCH = 5
	XCALL SNMSG (SNDMSG,SWITCH)
	SWITCH = 2
	XCALL SNMSG (NXTPRG,SWITCH)
	XCALL PGCHN ('PO:SRTREC',0)
DISPLA,
	UNLOCK 1
	UNLOCK 3
	FULL =
	IF (SELECT.EQ.1.AND.REC143.GE.MAXCNT) GO TO FULL
	FRSTSW =
	SAVT =
	SAVF =
	SAVFO =
	SAVTYP = 9
	CNGCTL =
	INVTRX =
	XCALL OUTPT (2,2,2,'1. ITEM #',V)
	XCALL OUTPT (4,2,0,'2. TYPE                (I=ISSUE, R=RECEIPT)',V)
	XCALL OUTPT (6,2,0,'3. QTY ',V)
	IF (SELECT.NE.1) XCALL OUTPT (2,1,0,'*',V)
ITMNUM,
	XCALL OUTPT (2,44,1,'\',V)
	CTL = '02,21,15,01,AE'
	CALL INPUT
	GO TO (DISPLA,BEGIN), INXCTL
	IF (JUSTIF) XCALL FRMAT (ENTRY(1,15),15)
	XCALL OUTPT (2,21,0,ENTRY(1,15),V)
	RITMNO = ENTRY(1,15)
	KITMNO = RITMNO


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; first, check for default keys...
	CLEAR DF1, DF2, DF3

	CLEAR TBL_KEY		;is there a default key for this item?
	TBLCOD = 'IK'		
	IK_ITEM = RITMNO
	READ (CHN182,COPTBL,TBL_KEY)[ERR=NO_DEFAULT]
	DF1 = IK_F1		;note that these values will 
	DF2 = IK_F2		;be overridden if notes are
	DF3 = IK_F3		;running

no_default,

	CLEAR ITMKEY
	K_ITEM = RITMNO
	K_F1 = DF1,	'XXX'
	K_F2 = DF2,	'XXX'
	K_F3 = DF3,	'XXXXX'
	READ (1, ITMMAS, ITMKEY, KEYNUM:1) [ERR = BADITM]

;;;	LOKCTL = 1
;;;	XCALL ISIO (1, ITMMAS, RITMNO, READ, LOKCTL)
;;;	IF (LOKCTL .NE.0) GOTO BADITM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;----------------------------------------------------------------

	GO TO (FNDTRX,FNDTRX), SELECT - 1
	RDESCR = DESCR
	OLDAVG = AVGCST
	XCALL OUTPT (3,21,0,RDESCR,V)

;;;>	SSQ 6-18-99
	TOOONH = QTYONH		;NOTE: TOOONH IS ONLY THE QTY ON HAND.
	TOOONO = QTYONO
;;;<

TTYPE,
	CTL = '04,21,01,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL

	USING ENTRY(1,1) SELECT
	('I'),	TTYPE = 'I'	;ISSUE
	('R'),	TTYPE = 'R'	;RECEIPT
	(),	GOTO TTYPE
	ENDUSING

QRCVD,
	CTL = '06,21,05,01,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYRCD = ENTRY

	IF (TTYPE .EQ. 'I') GOTO TYPE2

TYPE0,
	IF (TRXTYP.NE.0) CNGCTL =
	TRXTYP =
	XCALL OUTPT (5,32,1,'\',V)
	XCALL OUTPT (6,9,0,'RECEIVED   ',V)
	ALFQTY (1,8) = TOOONH, MASK
	XCALL OUTPT (4,32,0,'OLD ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	FROONH =
	FROONO =
	CTL = '04,70,06'
	ALFQTY (1,8) = (QTYRCD + TOOONH), MASK
	XCALL OUTPT (4,57,0,'NEW ON-HAND  ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	GO TO (NWAVRG), CNGCTL
	XCALL OUTPT (7,2,0,'5. NEW UNIT COST',V)
	XCALL OUTPT (8,2,0,'6. ORDER COMP ?',V)
	XCALL OUTPT (9,2,0,'7. ORDER NUMBER',V)
	ALFQTY (1,11) = OLDAVG, MASK2 (1,11)
	XCALL OUTPT (7,32,0,'OLD AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	IF (SELECT.NE.1) GO TO DSPTX1
	GO TO NUNIT

TYPE2,
	TRXTYP = 2
;;;	XCALL OUTPT (4,32,1,'\',V)
	XCALL OUTPT (6,32,2,'\',V)
	XCALL OUTPT (6,29,0,'ISSUED     ',V)
	FROONH = QTYONH
	ALFQTY (1,8) = FROONH, MASK
	XCALL OUTPT (5,32,0,'OLD AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	NEWCST =
	NEWAVG =
	PONUM =
	ORDCMP =
	TOOONH =
	TOOONO =
	ALFQTY (1,8) = (FROONH - QTYRCD), MASK
	XCALL OUTPT (5,57,0,'NEW AVAIL.   ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,8),V)
	IF (SELECT.NE.1.AND.CNGCTL.EQ.0) GO TO DSPTX1
	GO TO ANYCNG
NUNIT,
	CTL = '07,21,08,01,# '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	NEWCST = ENTRY(1,8)
	ALFQTY (1,10) = NEWCST, MASK1 (1,10)
	XCALL OUTPT (7,21,0,ALFQTY(1,10),V)
NWAVRG,
	TOTONH = QTYONH
	IF (QTYRCD+TOTONH.EQ.0) GO TO DSPLAV
	WAVCST = (((TOTONH*OLDAVG*10)+((QTYRCD*NEWCST)*100))/(QTYRCD+TOTONH)) #1
	NEWAVG = WAVCST
DSPLAV,
	IF ((QTYRCD + TOTONH).EQ.0) NEWAVG = (NEWCST * 10)
	ALFQTY (1,11) = NEWAVG, MASK2 (1,11)
	XCALL OUTPT (7,57,0,'NEW AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	GO TO (ANYCNG), CNGCTL
COMPLT,
	CTL = '08,21,01,00,YY'
	CALL INPUT
	ORDCMP = ENTRY(1,1)
	GO TO (ANYCNG), CNGCTL
PRCHNO,
	CTL = '09,21,09,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	PONUM = ENTRY
	GO TO ANYCNG
FNDTRX,
	XCALL WATE (3,V)
	RECNO = 1
	LOKCTL = 1
	XCALL IO (13,INVTRX,MAXCNT,READ,LOKCTL)
READ,
	INCR RECNO
	ON ERROR NOFIND
	LOKCTL = 1
	XCALL IO (13,INVTRX,RECNO,READ,LOKCTL)
	IF (RITMNO.EQ.']]]]]]') GO TO NOFIND
	IF (KITMNO.NE.RITMNO) GO TO READ
	IF (RDESCR.EQ.']]]DEL') GO TO READ

;----------------------------------------------------------------
; first, check for default keys...
	CLEAR DF1, DF2, DF3

	CLEAR TBL_KEY		;is there a default key for this item?
	TBLCOD = 'IK'		
	IK_ITEM = RITMNO
	READ (CHN182,COPTBL,TBL_KEY)[ERR=NO_DEF2]
	DF1 = IK_F1		;note that these values will 
	DF2 = IK_F2		;be overridden if notes are
	DF3 = IK_F3		;running

no_def2,

	CLEAR ITMKEY
	K_ITEM = RITMNO
	K_F1 = DF1,	'XXX'
	K_F2 = DF2,	'XXX'
	K_F3 = DF3,	'XXXXX'
	READ (1, ITMMAS, ITMKEY, KEYNUM:1) [ERR = BADITM]

;;;	LOKCTL = 1
;;;	XCALL ISIO (1,ITMMAS,RITMNO,READ,LOKCTL)
;;;	IF (LOKCTL .NE. 0) GOTO BADITM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;----------------------------------------------------------------

	LOKCTL = 1
	XCALL IO (3,INVTRX,RECNO,READ,LOKCTL)
	XCALL OUTPT (3,21,0,RDESCR,V)

	USING TRXTYP SELECT
	(0),	BEGIN
		TTYPE = 'R'
		GOTO TYPE0
		END
	(2),	BEGIN
		TTYPE = 'I'
		GOTO TYPE2
		END
	(),	XCALL MESAG ('This trx has an invalid type',1)
	ENDUSING

;;;	XCALL OUTPT (4,21,0,LOCTO,V)
;;;	XCALL OUTPT (5,21,0,LOCFRM,V)
;;;	GO TO (TYPE0,TYPE1,TYPE2), TRXTYP + 1

DSPTX1,
	ALFQTY (1,8) = QTYRCD, MASK
	XCALL OUTPT (6,21,0,ALFQTY(1,8),V)
	IF (TRXTYP.EQ.1.OR.TRXTYP.EQ.2) GO TO RIGHT
	XCALL OUTPT (7,2,0,'5. NEW UNIT COST',V)
	XCALL OUTPT (8,2,0,'6. ORDER COMP ?',V)
	XCALL OUTPT (9,2,0,'7. ORDER NUMBER',V)
	IF (FRSTSW) GO TO NUNIT
	ALFQTY (1,10) = NEWCST, MASK1 (1,10)
	XCALL OUTPT (7,21,0,ALFQTY(1,10),V)
	ALFQTY (1,11) = NEWAVG, MASK2 (1,11)
	XCALL OUTPT (7,57,0,'NEW AVG COST ',V)
	XCALL OUTPT (0,0,0,ALFQTY(1,11),V)
	XCALL OUTPT (8,21,0,ORDCMP,V)
	XCALL OUTPT (9,21,0,PONUM,V)
	IF (SELECT.EQ.1) FRSTSW = 1
RIGHT,
	IF ((SAVTYP.NE.0.AND.TRXTYP.EQ.0).OR.CNGCTL.EQ.1) GO TO ANYCNG
	XCALL OUTPT (12,1,1,'RIGHT TRX ?',V)
	CTL = '12,14,01,00,YN'
	CALL INPUT
	GO TO (READ), INXCTL-1
	IF (TRXTYP.NE.0) CALL SETFRM
	IF (SELECT.NE.3) GO TO ANYCNG
	RDESCR = ']]]DEL'
	XCALL WATE (3,V)
	GO TO CHNGE1

SETFRM,
	FROONH = QTYONH - QTYCOM
	OLDQTY = QTYRCD
	QTYCOM = QTYCOM - OLDQTY
	RETURN


ADD,
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)
	IF (REC143.GE.MAX143) FULL = 1
	IF (FULL) GO TO FULL
	INCR REC143
	IF (TRXTYP.EQ.0) GO TO WRTERR
	QTYCOM = QTYCOM + QTYRCD
WRTERR,
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,WRITE,LOKCTL)
	LOKCTL = 1
	XCALL IO (3,INVTRX,REC143,WRITE,LOKCTL)
	LOKCTL = 1

	XCALL ISIO (1, ITMMAS, ITEMNO, WRITE, LOKCTL)
;;;	XCALL IO (1,ITMMAS,IRC041,WRITE,LOKCTL)

	GO TO FREBUF
CHANGE,
	IF (TRXTYP.EQ.0) GO TO CHNGE1

	QTYCOM = QTYCOM + QTYRCD
CHNGE1,
	LOKCTL = 1
	XCALL IO (3,INVTRX,RECNO,WRITE,LOKCTL)
	LOKCTL = 1

	XCALL ISIO (1, ITMMAS, ITEMNO, WRITE, LOKCTL)
;;;	XCALL IO (1,ITMMAS,IRC041,WRITE,LOKCTL)

FREBUF,
	LOKCTL = 1
	XCALL IO (3,DUMREC,MAXCNT,READ,LOKCTL)
	LOKCTL = 1
	XCALL IO (3,DUMREC,1,READ,LOKCTL)

;;;	LOKCTL = 1
;;;	XCALL IO (1,DUMINV,MAXIM,READ,LOKCTL)
;;;	LOKCTL = 1
;;;	XCALL IO (1,DUMINV,1,READ,LOKCTL)

	IF (SELECT.EQ.3) XCALL MESAG ('TRX DELETED',2)
	GO TO DISPLA

NOFIND,
	XCALL MESAG ('TRX NOT FOUND',1)
	GO TO DISPLA
INPUT,
	XCALL INPUT (ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,V)
	RETURN
ANYCNG,
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (PROCES,CNGBR,DISPLA), CNGCTL+1
CNGBR,
	IF (TRXTYP.NE.0.AND.WHATNO.GT.4) GO TO ANYCNG
	GO TO (DISPLA,TTYPE,QRCVD,NUNIT,COMPLT,PRCHNO), WHATNO
;;;	GO TO (DISPLA,LOCATO,LOCAFR,QRCVD,NUNIT,COMPLT,PRCHNO), WHATNO
BADCNG,
	CNGCTL = 3
	GO TO ANYCNG
PROCES,
	XCALL WATE (3,V)
	GO TO (ADD,CHANGE), SELECT
	GO TO ANYCNG
BADITM,
	XCALL MESAG ('ITEM NOT ON FILE',1)
	GO TO ITMNUM
NONE,
	XCALL MESAG ('NO TRANSACTIONS ON FILE',1)
	GO TO BEGIN
FULL,
	XCALL OUTPT (3,1,2,'\',1)
	IF (FULL) XCALL OUTPT (5,10,0,
&	'**WARNING - RECORD NOT ADDED**',V)
	XCALL OUTPT (6,10,0,
&	'The INVTRX file is now full.  Either post existing transactions',V)
	XCALL OUTPT (7,10,0,
&	'or increase the size of the INVTRX file using the EXPAND option',V)
	XCALL OUTPT (8,10,0,
&	'in the SYSTEM FUNCTIONS menu before entering more transactions.',V)
	XCALL MESAG (' ',2)
	GO TO BEGIN
CLOSE4,
	IF (SELECT.LT.4) XCALL WATE (3,V)
	XCALL FILES (1,'I',41,4)
	CLOSE 13
CLOSE2,
	XCALL FILES (3,'U',143,4)
CLOSE1,
;;;	XCALL FILES (2,'I',42,4)
	IF (CHN182) CLOSE CHN182

	RETURN
END
