;exppst.cp - process and post ups, roc-ups, spee-dee, roc spee-dee

;UPSPST.DBL
;
EXTERNAL FUNCTION
	GU_NAME	,A

RECORD	BUFFER
		,A1024

RECORD	UPSDATA
	.INCLUDE 'DEF:UPSDAT.DEF'

RECORD	ORDHDR
	.INCLUDE 'DEF:RD044A.DEF'

RECORD	CONFRM
	.INCLUDE 'DEF:RD158A.DEF'

RECORD	LOG
	L_USR	,A12
		,A1
	L_FILE	,A40
		,A1
	L_DATE	,D8


RECORD	CHANNEL
	CHN044	,D2		;ORDHDR
	CHN158	,D2		;CONFRM
	CHN184	,D2		;SLHHDR
	CHNERR	,D2		;CONFRM.ERR
	CHNUPS	,D2		;UPSDAT
	CHNIN	,D2		;INFILE

RECORD	IN_ROC
		,a4,	'wrk:'
	ir_file	,a28			;5/6/20 "cust" changed to "driver"?
;;;	ir_file	,a24

;;;		,A*,	'WRK:CUST_016995_'
;;;	R_DAT	,A8		;MMDDYYYY
;;;		,A4,	'.CSV'
RECORD	IN_SMC
		,a4,	'wrk:'
	is_file	,a28			;5/6/20 "cust" changed to "driver"?
;;;	is_file	,a24

;;;		,A*,	'WRK:CUST_002714_'
;;;	S_DAT	,A8		;MMDDYYYY
;;;		,A4,	'.CSV'


record	
	dt	,a20
record,x
	yyyy	,d4
	mm	,d2
	dd	,d2
	hh	,d2
	min	,d2

record	buf
		,a512

RECORD	VARS
	bf	,d1
	DAYS	,12D2,	31,28,31,30,31,30,31,31,30,31,30,31
	CMPCOD	,A3
	SEQNO	,D5
	TODAY	,D8		;CCYYMMDD
	SAVTRK	,A20
	CURTRK	,A20
	SAVORD	,D6
	OPNOK	,D1
	ALPHA	,A18
	ALP2	,A18
	DECML	,D18
	DP	,D2
	XDATE	,D8	
	INFILE	,A30
	SMC_UPS	,A*,	'WRK:UPS_CSV_EXPORT.CSV'
	ROC_UPS	,A*,	'WRK:ROC_CSV_EXPORT.CSV'
	XTIME	,D6
	LN	,D4
	START	,D4,	1
	DIM	,D2,	99
	POS	,99D4
	LEN	,99D4
	TYPE	,99D2
	ITEMS	,D2
	END	,D4
	IX	,D3
	NUM	,D2
	I1	,D4
	I2	,D4
	LOKCTL	,D1
	READ	,D1,0
	WRITE	,D1,1
	STORE	,D1,2
	SWITCH	,D1
	V	,D1

.PROC
	XCALL TERID (V)
	DISPLAY (15, $SCR_CLR(SCREEN), 'UPLOAD UPS/SPEE-DEE DATA')

	XCALL RDAT8(TODAY)


	OPEN (12, SU,'SMC:UPSDAT.ISM')
;;;	OPEN (12, SU,'TST:UPSDAT.ISM')
	CHNUPS = 12
		
	OPEN (24, A, 'WRK:UPSLOG.LOG')
	L_DATE = TODAY
	L_USR = %GU_NAME			
	CLEAR SEQNO

	CALL UPS
	CALL UPS_ROC

	xcall shell (0,'speedee.bat')		;create speedee.dat
	onerror no_speed
	open (9, i, 'speedee.dat')
	offerror

	repeat	begin
		reads (9, buf, endoff)
		if (%instr(1, buf, "002714")) call speed		;smc
		if (%instr(1, buf, "016995")) call speed_roc	;rock
		end


	GOTO ENDOFF

UPS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; SMC UPS
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CMPCOD = 'SMC'
	INFILE = SMC_UPS
	CALL OPENS
	IF (.NOT. OPNOK) RETURN			;NO FILE TO PROCESS

	XCALL OUTPT (2,1,2,'SMC-UPS UPLOAD',1)
U_LOOP,
	READS (1, BUFFER, U_EOF)
	LN = %TRIM(BUFFER)

	CLEAR UPSDATA

	XCALL S_PARSE(BUFFER(1,LN), START, DIM, POS, LEN, TYPE, ITEMS, END)
	NUM = 0
	FOR IX FROM 1 THRU ITEMS
		BEGIN
		I1 = POS(IX)
		I2 = POS(IX) + LEN(IX) - 1
		IF (TYPE(IX) .EQ. 8)
			BEGIN
			INCR NUM		;COUNT COMMAS
			NEXTLOOP
			END

		IF(LEN(IX).LE.0) NEXTLOOP

		USING NUM SELECT
		(00),	CURTRK = BUFFER(I1,I2)
		(01),	TOTWGT = BUFFER(I1,I2)
		(04),	BEGIN
			ALPHA = BUFFER(I1,I2)
			CALL TOTAL_AMOUNT
			END
		(05),	XCALL ALPDC(BUFFER(I1,I2), NPKG,bf)
		(06),	UNAME = BUFFER(I1,I2)
		(08),	UADD1 = BUFFER(I1,I2)
		(09),	UADD2 = BUFFER(I1,I2)
		(10),	UCITY = BUFFER(I1,I2)
		(11),	USTAT = BUFFER(I1,I2)
		(12),	UZIP = BUFFER(I1,I2)
		(13),	TRACK = BUFFER(I1,I2)
		(14),	BEGIN
			IF (BUFFER(I1,I2) .EQ. 'SAMPLE')
			THEN	ORDER = 999999
			ELSE	XCALL ALPDC(BUFFER(I1,I2), ORDER,bf)
			END
		(15),	PKGWGT = BUFFER(I1,I2)
		(16),	VOID = BUFFER(I1,I2)
		ENDUSING
		END

	UDATE = TODAY		;TAG W/ TODAY'S DATE

	IF (CURTRK .NE. SAVTRK) 
	THEN	CALL NEWTRK
	ELSE	IF (ORDER.EQ.0) ORDER = SAVORD

	INCR SEQNO
	USEQ = SEQNO
	STORE (CHNUPS, UPSDATA, UPS_KEY) [ERR=U_LOOP]

	XCALL ISIO (CHN044, ORDHDR,ORDER, READ, LOKCTL) ;CURRENT ORDER
	IF (LOKCTL .NE. 0) XCALL ISIO (CHN184, ORDHDR, ORDER, READ, LOKCTL)	;HISTORY


	IF (LOKCTL.NE.0) GOTO U_LOOP

	USING OCUSCD(1,1) SELECT
	('E'),	NOP
	(),	GOTO U_LOOP
	ENDUSING

	CLEAR CONFRM

	SP_ORD = ORDER
	SP_SRC = 'U'
	SP_REF = TRACK
	SP_PKG = NPKG
	SP_CONF =
	SP_DT(1,8) = UDATE
	SP_CUST = OCUSNO
	SP_MNBR = OC_NBR

	XCALL ISIO (CHN158, CONFRM, SP_KEY, STORE, LOKCTL)
	IF (LOKCTL.EQ.0) GOTO U_LOOP

	WRITES (10, CONFRM)	;WRITE RECORD TO ERROR FILE
	GOTO U_LOOP


U_EOF,
	CALL CLOSE
	XCALL DELET (INFILE(1,%TRIM(INFILE)))

	RETURN		;END OF UPS
;-------------------------------------------------


UPS_ROC,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; ROCKFORD UPS
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CMPCOD = 'ROC'
	INFILE = ROC_UPS
	CALL OPENS
	IF (.NOT. OPNOK) RETURN			;NO FILE TO PROCESS

	XCALL OUTPT (3,1,2,'ROC-UPS UPLOAD',1)
UR_LOOP,
	READS (1, BUFFER, UR_EOF)
	LN = %TRIM(BUFFER)

	CLEAR UPSDATA

	XCALL S_PARSE(BUFFER(1,LN), START, DIM, POS, LEN, TYPE, ITEMS, END)
	NUM = 0
	FOR IX FROM 1 THRU ITEMS
		BEGIN
		I1 = POS(IX)
		I2 = POS(IX) + LEN(IX) - 1
		IF (TYPE(IX) .EQ. 8)
			BEGIN
			INCR NUM		;COUNT COMMAS
			NEXTLOOP
			END

		IF(LEN(IX).LE.0) NEXTLOOP

		USING NUM SELECT
		(00),	CURTRK = BUFFER(I1,I2)
		(01),	TOTWGT = BUFFER(I1,I2)
		(04),	BEGIN
			ALPHA = BUFFER(I1,I2)
			CALL TOTAL_AMOUNT
			END
		(05),	XCALL ALPDC(BUFFER(I1,I2), NPKG,bf)
		(06),	UNAME = BUFFER(I1,I2)
		(08),	UADD1 = BUFFER(I1,I2)
		(09),	UADD2 = BUFFER(I1,I2)
		(10),	UCITY = BUFFER(I1,I2)
		(11),	USTAT = BUFFER(I1,I2)
		(12),	UZIP = BUFFER(I1,I2)
		(13),	TRACK = BUFFER(I1,I2)
		(14),	BEGIN
			IF (BUFFER(I1,I2) .EQ. 'SAMPLE')
			THEN	ORDER = 999999
			ELSE	XCALL ALPDC(BUFFER(I1,I2), ORDER,bf)
			END
		(15),	PKGWGT = BUFFER(I1,I2)
		(16),	VOID = BUFFER(I1,I2)
		ENDUSING
		END

	UDATE = TODAY		;TAG W/ TODAY'S DATE

	IF (CURTRK .NE. SAVTRK) 
	THEN	CALL NEWTRK
	ELSE	IF (ORDER.EQ.0) ORDER = SAVORD

	INCR SEQNO
	USEQ = SEQNO
	STORE (CHNUPS, UPSDATA, UPS_KEY) [ERR=UR_LOOP]

	XCALL ISIO (CHN044, ORDHDR,ORDER, READ, LOKCTL) ;CURRENT ORDER
	IF (LOKCTL .NE. 0) XCALL ISIO (CHN184, ORDHDR, ORDER, READ, LOKCTL)	;HISTORY


	IF (LOKCTL.NE.0) GOTO UR_LOOP

	USING OCUSCD(1,1) SELECT
	('E'),	NOP
	(),	GOTO UR_LOOP
	ENDUSING

	CLEAR CONFRM

	SP_ORD = ORDER
	SP_SRC = 'U'
	SP_REF = TRACK
	SP_PKG = NPKG
	SP_CONF =
	SP_DT(1,8) = UDATE
	SP_CUST = OCUSNO
	SP_MNBR = OC_NBR

	XCALL ISIO (CHN158, CONFRM, SP_KEY, STORE, LOKCTL)
	IF (LOKCTL.EQ.0) GOTO UR_LOOP

	WRITES (10, CONFRM)	;WRITE RECORD TO ERROR FILE
	GOTO UR_LOOP


UR_EOF,
	CALL CLOSE
	XCALL DELET (INFILE(1,%TRIM(INFILE)))

	RETURN		;END OF ROC UPS
;-------------------------------------------------

SPEED,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; SMC SPEE-DEE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CMPCOD = 'SMC'
	ln = %trim(buf)

	is_file = buf(1,ln)

	INFILE = IN_SMC
	CALL OPENS
	IF (.NOT. OPNOK) RETURN			;NO FILE TO PROCESS

	XCALL OUTPT (4,1,2,'SMC-SPEE-DEE UPLOAD',1)
S_LOOP,
	READS (1, BUFFER, S_EOF)
	LN = %TRIM(BUFFER)

	CLEAR UPSDATA

	XCALL S_PARSE(BUFFER(1,LN), START, DIM, POS, LEN, TYPE, ITEMS, END)
	NUM = 0
	FOR IX FROM 1 THRU ITEMS
		BEGIN
		I1 = POS(IX)
		I2 = POS(IX) + LEN(IX) - 1
		IF (TYPE(IX) .EQ. 8)
			BEGIN
			INCR NUM		;COUNT COMMAS
			NEXTLOOP
			END

		IF(LEN(IX).LE.0) NEXTLOOP


		USING NUM SELECT
		(14),	UNAME = BUFFER(I1,I2)
		(15),	UADD1 = BUFFER(I1,I2)
		(16),	UADD2 = BUFFER(I1,I2)
		(18),	UCITY = BUFFER(I1,I2)
		(19),	USTAT = BUFFER(I1,I2)
		(20),	UZIP = BUFFER(I1,I2)
		(24),	XCALL ALPDC(BUFFER(I1,I2), ORDER,bf)
		(28),	PKGWGT = BUFFER(I1,I2)
		(32),	BEGIN
			CURTRK = BUFFER(I1,I2)
			TRACK = CURTRK
			END
		ENDUSING
		END

	UDATE = TODAY		;TAG W/ TODAY'S DATE

	IF (CURTRK .NE. SAVTRK) 
	THEN	CALL NEWTRK
	ELSE	IF (ORDER.EQ.0) ORDER = SAVORD

	INCR SEQNO
	USEQ = SEQNO
	STORE (CHNUPS, UPSDATA, UPS_KEY) [ERR=S_LOOP]

	XCALL ISIO (CHN044, ORDHDR,ORDER, READ, LOKCTL) ;CURRENT ORDER
	IF (LOKCTL .NE. 0) XCALL ISIO (CHN184, ORDHDR, ORDER, READ, LOKCTL)	;HISTORY


	IF (LOKCTL.NE.0) GOTO S_LOOP

	USING OCUSCD(1,1) SELECT
	('E'),	NOP
	(),	GOTO S_LOOP
	ENDUSING

	CLEAR CONFRM

	SP_ORD = ORDER
	SP_SRC = 'S'
	SP_REF = TRACK
	SP_PKG = NPKG
	SP_CONF =
	SP_DT(1,8) = UDATE
	SP_CUST = OCUSNO
	SP_MNBR = OC_NBR

	XCALL ISIO (CHN158, CONFRM, SP_KEY, STORE, LOKCTL)
	IF (LOKCTL.EQ.0) GOTO S_LOOP


	WRITES (10, CONFRM)	;WRITE RECORD TO ERROR FILE
	GOTO S_LOOP


S_EOF,
	CALL CLOSE
	XCALL DELET (INFILE(1,%TRIM(INFILE)))

	RETURN		;END OF SPEE-DEE
;-------------------------------------------------

SPEED_ROC,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; ROC SPEE-DEE
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CMPCOD = 'ROC'
	ln = %trim(buf)
	ir_file = buf(1,ln)

	INFILE = IN_ROC
	CALL OPENS
	IF (.NOT. OPNOK) RETURN				;NO FILE TO PROCESS
	XCALL OUTPT (5,1,2,'ROC-SPEE-DEE UPLOAD',1)

SR_LOOP,
	READS (1, BUFFER, SR_EOF)
	LN = %TRIM(BUFFER)

	CLEAR UPSDATA

	XCALL S_PARSE(BUFFER(1,LN), START, DIM, POS, LEN, TYPE, ITEMS, END)
	NUM = 0
	FOR IX FROM 1 THRU ITEMS
		BEGIN
		I1 = POS(IX)
		I2 = POS(IX) + LEN(IX) - 1
		IF (TYPE(IX) .EQ. 8)
			BEGIN
			INCR NUM		;COUNT COMMAS
			NEXTLOOP
			END

		IF(LEN(IX).LE.0) NEXTLOOP


		USING NUM SELECT
		(14),	UNAME = BUFFER(I1,I2)
		(15),	UADD1 = BUFFER(I1,I2)
		(16),	UADD2 = BUFFER(I1,I2)
		(18),	UCITY = BUFFER(I1,I2)
		(19),	USTAT = BUFFER(I1,I2)
		(20),	UZIP = BUFFER(I1,I2)
		(24),	XCALL ALPDC(BUFFER(I1,I2), ORDER,bf)
		(28),	PKGWGT = BUFFER(I1,I2)
		(32),	BEGIN
			CURTRK = BUFFER(I1,I2)
			TRACK = CURTRK
			END
		ENDUSING
		END

	UDATE = TODAY		;TAG W/ TODAY'S DATE

	IF (CURTRK .NE. SAVTRK) 
	THEN	CALL NEWTRK
	ELSE	IF (ORDER.EQ.0) ORDER = SAVORD

	INCR SEQNO
	USEQ = SEQNO
	STORE (CHNUPS, UPSDATA, UPS_KEY) [ERR=SR_LOOP]

	XCALL ISIO (CHN044, ORDHDR,ORDER, READ, LOKCTL) ;CURRENT ORDER
	IF (LOKCTL .NE. 0) XCALL ISIO (CHN184, ORDHDR, ORDER, READ, LOKCTL)	;HISTORY


	IF (LOKCTL.NE.0) GOTO SR_LOOP

	USING OCUSCD(1,1) SELECT
	('E'),	NOP
	(),	GOTO SR_LOOP
	ENDUSING

	CLEAR CONFRM

	SP_ORD = ORDER
	SP_SRC = 'S'
	SP_REF = TRACK
	SP_PKG = NPKG
	SP_CONF =
	SP_DT(1,8) = UDATE
	SP_CUST = OCUSNO
	SP_MNBR = OC_NBR

	XCALL ISIO (CHN158, CONFRM, SP_KEY, STORE, LOKCTL)
	IF (LOKCTL.EQ.0) GOTO SR_LOOP


	WRITES (10, CONFRM)	;WRITE RECORD TO ERROR FILE
	GOTO SR_LOOP


SR_EOF,
	CALL CLOSE
	XCALL DELET (INFILE(1,%TRIM(INFILE)))

	RETURN		;END OF ROC SPEE-DEE
;-------------------------------------------------

;====================== GENERAL SUBS ===================
NEWTRK,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	SAVTRK = CURTRK
	SAVORD = ORDER
	RETURN
;----------------------------------------------------
	
TOTAL_AMOUNT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR TOTAMT
	DP = %INSTR(1, ALPHA, '.')
	IF (DP .EQ. 0)
	THEN	XCALL ALPDC(ALPHA, TOTAMT,bf)
	ELSE	BEGIN
		ALP2(1,DP-1) = ALPHA(1,DP-1)
		ALP2(DP,18) = ALPHA(DP+1,18)
		XCALL ALPDC(ALP2, TOTAMT,bf)
		END

	RETURN
;-------------------------------------------------

OPENS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR CHN044, CHN184, CHN158, CHNERR

	CLEAR OPNOK

	ONERROR NO_UPS
	OPEN (1, I, INFILE)
	OFFERROR

	SWITCH = 5
	XCALL FILEC (CMPCOD, 4, 'SI', 044, SWITCH)	;ORDHDR
	IF (SWITCH .EQ. 9) RETURN
	CHN044 = 4

	SWITCH = 5
	XCALL FILEC (CMPCOD, 5, 'SI', 184, SWITCH)	;SLHHDR
	IF (SWITCH .EQ. 9) RETURN
	CHN184 = 5

	SWITCH = 5
;;;	XCALL FILEC ('TST', 2, 'SU', 158, SWITCH)	;CONFRM
	XCALL FILEC (CMPCOD, 2, 'SU', 158, SWITCH)	;CONFRM

	IF (SWITCH .EQ. 9) RETURN
	CHN158 = 2

	OPEN (10,O,'SMC:CONFRM.ERR')
	CHNERR = 10

	L_FILE = INFILE			;DEBUG
	WRITES (24, LOG)

	OPNOK = 1
	RETURN

NO_UPS,
	L_FILE = 'NO'
	L_FILE(4,40) = INFILE
	WRITES (24,LOG)

	RETURN
;-------------------------------------------------

CLOSE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	IF (CHN044) CLOSE CHN044
	IF (CHN158) CLOSE CHN158
	IF (CHN184) CLOSE CHN184
	IF (CHNERR) CLOSE CHNERR
;;;	IF (CHNUPS) CLOSE CHNUPS

	CLOSE 1

	RETURN
;-------------------------------------------------

no_speed,
	offerror
ENDOFF,

	CLOSE CHNUPS
	CLOSE 24

	IF (.NOT. OPNOK) XCALL MESAG ("CAN'T OPEN FILES",1)
	XCALL PGCHN ('CP:UPSEDT',1)
;;;	STOP	'CP:UPSMNU'


.END

;call alpdc.man
;.SUBROUTINE	ALPDC
;	ALPHA	,A
;	DECML	,D
;.PROC
;
;	CLEAR DECML
;	ONERROR NOT_NUM
;	DECML = ALPHA
;NOT_NUM,
;	OFFERROR
;	RETURN
;.END

