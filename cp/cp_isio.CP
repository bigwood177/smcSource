SUBROUTINE CP_ISIO ; (CHANEL,BUFFER,KEYFLD,IOCTL,LOKCTL)
;
;	1-7-02 ssq:	added window #
;	9-26-16 ssq:	locked data
;

CHANEL	,D	; CHANNEL TO PERFORM READ/WRITE OPERATION ON
BUFFER	,A	; BUFFER AREA TO READ/WRITE RECORDS FROM
KEYFLD	,A	; KEY FIELD TO BE USED ON THE ATTEMPTED READ/WRITE
IOCTL	,D	; I-O CONTROL VARIABLE
		;	0 = READ (SEARCH FOR MATCH TO KEY PROVIDED)
		;	1 = WRITE (EXISTING RECORD)
		;	2 = STORE (ADD NEW RECORD)
		;	3 = DELETE (REMOVE RECORD)
LOKCTL	,D	; READ/WRITE TYPE
		;  ON ENTRY:
		;	0 = DISPLAY LOCK MESSAGE, AND ALLOW ABORT
		;	1 = DISPLAY LOCK MESSAGE, DO NOT ALLOW ABORT
		;  ON EXIT:
		;	0 = SUCCESSFUL OPERATION
		;	1 = ABORT SELECTED - LOCKED RECORD
		;	2 = KEY NOT SAME - RETURNING NEXT RECORD IN SEQUENCE
		;	3 = NO MATCH FOUND AND NO OTHER RECORDS OF LARGER KEY
		;	4 = DUPLICATE RECORD (RECORD WITH SAME KEY ALREADY
		;		EXISTS AND DUPLICATES ARE NOT ALLOWED)
		;	5 = OUT OF ROOM - STORE ATTEMPTED AND THE FILE IS FULL
		;				OR 
		;		THE OVERFLOW IS FULL (CTS-300 ONLY)
		;				OR 	
		;		NO INDEX BLOCKS AVAILABLE (DBL ONLY)

W_ID	,D	; OPTIONAL WINDOW NUMBER

.include 'wnd:windows.def'
RECORD	LOCK_LOG
	LL_CHAN	,A3
		,A1
	LL_FNAM	,A44
		,A*,	' @ LINE '
	LL_LINE	,D5
		,A*,	' IN '
	LL_RNAM	,A7


		
RECORD
	WND	,D4
	LCHAN	,D3
	ALPHA	,A3
	ALPH2	,A2
	DELCHR	,D1
	ERL	,D5
	ERR	,D3
	LOCKED	,D1
	MASK	,A5,	'ZZZZX'
	MESSAG	,A43
	MESAGE	,A43,	'RECORD TEMPORARILY IN USE - WILL YOU WAIT ?'
	MESAG2	,A14,	'PLEASE WAIT...'
	SYSTEM	,D1
	TCHAR	,D3
PROC
	XCALL ENVRN (SYSTEM)
	IF (SYSTEM.GT.1) SYSTEM = 1	;MAINTAIN TSX+ = 1
	IF (%PASSED(W_ID)) 
	THEN	WND = W_ID
	ELSE	WND = 0

	LCHAN = 97

	MESSAG = MESAGE
	IF (LOKCTL.EQ.1) MESSAG (29,43) = MESAG2
START,
	GO TO (WRITE,STORE,DELETE), IOCTL
				;DETERMINE IF READ, WRITE, STORE, OR DELETE
READ,
	ON ERROR FILERR
	READ (CHANEL,BUFFER,KEYFLD)
	OFF ERROR

	LOKCTL =
	GO TO EXIT
WRITE,
	ON ERROR FILERR
	WRITE (CHANEL,BUFFER,KEYFLD)
	OFF ERROR
	LOKCTL =
	GO TO EXIT
STORE,
	ON ERROR FILERR
	STORE (CHANEL,BUFFER,KEYFLD)
	OFF ERROR
	LOKCTL =
	GO TO EXIT
DELETE,
	ON ERROR FILERR
	DELETE (CHANEL,KEYFLD)
	OFF ERROR
	LOKCTL =
	GO TO EXIT
FILERR,
	OFF ERROR
	XCALL ERROR (ERR,ERL)
	IF (ERR.EQ.1) GO TO NOMACH		;EOF ON READ - NO MATCH
	IF (ERR.EQ.40) GO TO LOCKED		;LOCKED RECORD ERROR NUMBER
	IF (ERR.EQ.53) GO TO NOTFND		;NO MATCH BUT RETURN NEXT REC.
	IF (ERR.EQ.64) GO TO NOMACH		;NO MATCH - NO MORE RECORDS
	IF (ERR.EQ.57) GO TO FULL		;OVERFLOW AREA IS FULL-REORG
	IF (ERR.EQ.25) GO TO FULL		;FILE FULL
	IF (ERR.EQ.54) GO TO DUPLIC		;ATTEMPT TO STORE DUPLIC. REC.
	IF (ERR.EQ.112 .AND. SYSTEM.EQ.1) GO TO FULL	;DBL ONLY - FILE FULL
ERRMSG,
	ALPHA = ERR, 'ZZX'
	ALPH2 = CHANEL, 'ZX'
	XCALL OUTPT(24,1,1,'\',1)
	IF (IOCTL.EQ.0) XCALL OUTPT(0,0,0,'ISAM READ ',1)
	IF (IOCTL.EQ.1) XCALL OUTPT(0,0,0,'ISAM WRITE ',1)
	IF (IOCTL.EQ.2) XCALL OUTPT (0,0,0,'ISAM STORE ',1)
	IF (IOCTL.EQ.3) XCALL OUTPT (0,0,0,'ISAM DELETE ',1)
	DISPLAY (15,'ERROR ',ALPHA,'--CHANNEL ',ALPH2)
	XCALL OUTPT (3,1,1,'\',1)
	STOP
FULL,
	LOKCTL = 5
	GO TO EXIT
NOMACH,
	LOKCTL = 3
	GO TO EXIT
NOTFND,
	IF (IOCTL.EQ.0) 
	    THEN BEGIN
    		LOKCTL = 2
    		GO TO EXIT
    		END
	    ELSE GO TO ERRMSG
DUPLIC,
	LOKCTL = 4
	GO TO EXIT
LOCKED,						;BLOCK IS LOCKED
	OFFERROR

	IF (LCHAN .NE. 0) CALL LOCK_LOG		;9-26-16

	IF (WND .NE. 0)
	THEN	XCALL W_DISP(WND, WD_POS, 23,1, MESSAG)
	ELSE	XCALL OUTPT(24,1,1,MESSAG,1)

	LOCKED = 1
	GO TO (WAIT1), LOKCTL
	XCALL FLAGS (00010000,1)			;TURN OFF CHAR ECHO
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'F',29,'S')	;F=TURN OFF CHAR ECHO
	IF (WND .EQ. 0) DISPLAY (15,29,'F',29, 'S')
					;S=TURN ON SINGLE CHARACTER ACTIVATION
	IF (WND .NE. 0)
	THEN	XCALL W_DISP (WND, WD_ACCEPT, TCHAR)
	ELSE	ACCEPT (15,TCHAR)

	USING WND SELECT
	(0),	BEGIN
		IF (TCHAR.EQ.89) DISPLAY (15,'Y')
		IF (TCHAR.EQ.78) DISPLAY (15,'N')
		END
	(),	BEGIN
		IF (TCHAR.EQ.89) XCALL W_DISP (WND,'Y')
		IF (TCHAR.EQ.78) XCALL W_DISP (WND, 'N')
		XCALL W_UPDT
		END
	ENDUSING

	IF (TCHAR.EQ.089) GO TO WAIT	;'Y' = 089 IN ASCII
	IF (TCHAR.NE.078) GO TO LOCKED	;'N' = 078 IN ASCII
	CALL ACPTCR
	IF (DELCHR) GO TO DELCHR
	LOKCTL = 1
EXIT,
	IF (LOCKED) XCALL OUTPT (24,1,1,'\',1)
	LOCKED =
	RETURN
WAIT,
	CALL ACPTCR
	IF (DELCHR) GO TO DELCHR
	XCALL OUTPT(24,1,1,MESAG2,1)
WAIT1,
	SLEEP 5
	GO TO START
ACPTCR,
	DELCHR =
	ACCEPT (15,TCHAR)
	IF (TCHAR.EQ.127) DELCHR = 1
	IF (TCHAR.EQ.127) RETURN
	IF (TCHAR.NE.13) GO TO ACPTCR
	IF (SYSTEM.NE.1) ACCEPT (15,TCHAR)
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'T',29,'E')
	IF (WND .EQ. 0) DISPLAY (15,29,'T',29,'E')

					;T=TURN OFF SINGLE CHAR ACTIVATION
					;E=TURN ON CHARACTER ECHOING
	XCALL FLAGS (00010000,0)	;TURN ON CHARACTER ECHOING
	RETURN
DELCHR,
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'T',29,'E')
	IF (WND .EQ. 0) DISPLAY (15,29,'T',29,'E')

	XCALL FLAGS (00010000,0)
	GO TO LOCKED

WINDOW_LOCK,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL W_DISP(WND, WD_POS, 23,1,'Record locked -- <return> to abort')
	xcall w_updt
	xcall W_DISP(WND, WD_ACCEPT, TCHAR)
	LOKCTL = 1
	xcall w_disp(wnd, wd_pos,23,1,wd_clr,wdc_lin)
	return
;-----------------------------------------------------------------

LOCK_LOG,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; WRITE TO LOG FILE ONLY ONCE
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	OPEN (LCHAN, A, 'UT:LOCK_LOG.DAT')

	XCALL MODNAME (1, LL_RNAM, LL_LINE)
	XCALL FILNM (CHANEL, LL_FNAM)
	LL_CHAN = CHANEL
	WRITES (LCHAN, LOCK_LOG)
	CLOSE LCHAN
	LCHAN = 0				;PREVENTS MULTIPLE LOG RECORDS

	RETURN
;--------------------------------------------------------

END
