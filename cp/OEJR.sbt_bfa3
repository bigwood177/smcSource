subroutine oejr
	order	,d
	chn041	,d
	chn045	,d
	runtot	,d
	taxtot	,d
	oloc	,a
	has_ssefi	,d
	cmx	,d	;xx.x non-contractor mark up
;
;	create bc, flange & gasket line items...
;	modifications:
;	25-sep-03 ssq:	allow call from BILLS.CP add lqtysh code...
;	08-oct-03 ssq:	bills not using runtot, taxtot anymore
;	10-aug-04 ssq:	because damper (*) could be embedded in lcfgim, use
;				partno.
;
;	07-oct-04 ssq:	prdcat k1 & k3 are valid...
;	30-mar-06 ssq:  convert gasket from ft to 25' or 50' rolls
;	06-may-08 ssq:	allocate/de-allocate inventory
;	15-jan-09 ssq:  new f3 keys mod
;	20-jan-10 ssq:  add gtitm mods
;	22-sep-10 ssq:  pvc/vinyl material is hard-coded, no table entry...
;	30-apr-14 ssq:  need to look up material for certain parts (ie: ECS06)
;			which have the mat cost built into the itmmas.lprice -
;			but the l/i's genned by this routine (ie: bc06) need
;			to be priced using the appropriot mat_mult.\
;
;	01-nov-17 ssq:	jefixx -> efxx not working
;
;	8-jan-18: ssq:	Spiral Body Tee's
;	9-apr-18 ssq: bc and efi not counted correctly if there is a reducer.

;
;
EXTERNAL FUNCTION
	FUNCV	,A		;FUNCTION RETURNS VIRTUAL ITEM NUMBERS FOR SPIRAL BODY TEES


record	fv_data
	f_item	,a15	;virtual item to return
	f_f3	,5d1	;
	f_cfg	,d1	;same as cfg_item in scrnx
	f_ga	,d2	;
			
record	cfgmat
	.include 'def:cfgmat.def'

record	coptbl
	.include 'def:rd182a.def'

RECORD	EJECT
	E_CHAR	,A1		;<ESC>
		,A4,	"&l0H"	;PAGE EJECT


record	ordlin
	.include 'def:rd045a.def'
record,x
	.include 'def:rd045m.def'
record,x
	.include 'def:rd045d.def'
record	savlin
	.include 'def:rd045e.def'


record	itmmas
	.include 'def:rd041a.def'
record,x
	.include 'def:rd041b.def'

record	itmkey
	.include 'def:rd041k.def'

RECORD	F_MEMOS
	.INCLUDE 'DEF:CPMEMO.DEF'

RECORD	WRKFIL
		,A4,	'SPL:'
		,A1,	'W'
	WFORD	,A6
		,A4,	'.ISM'

RECORD	SPLRPT
		,A4,	'SPL:'
		,A1,	'W'
	SPORD	,A6
		,A4,	'.ERR'
record	out
	otyp	,d1
	dia 	,d2
	bc_qty	,d6	;count for barrel clamps
	ef_qty	,d6	;count for ez-flange
record,x
	okey	,d3

RECORD
	SEGS	,A12			;first 2 dig are gauge
RECORD,X
	GA	,D2
	SARA	,5D2
RECORD,X
		,D2	;GA
	MA	,D2
	MB	,D2
	BC	,D2
	BD	,D2

record
	tkey	,a5
record,x
	typ	,5d1


record	strng
	str	,a15

record	channels
	chncfg	,d2		;ordlin work file
	chnspl	,d2		;error report file
	chn182	,d2,17		;chan 17 already opened to coptbl...

record	err_line
	el_order	,d6
			,a1
	el_litmno	,a12
			,a1
	el_msg		,a60

record
	,a60,	'Invalid item for this type                                  '
	,a60,	'required item not in inventory - could not create line item ' 
	,a60,	'Invalid size for EF                                         '
	,a60,	'Invalid size for JR                                         '
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
	,a60,	'123456789012345678901234567890123456789012345678901234567890'
;                123456789012345678901234567890123456789012345678901234567890
record,x
	err_msg		,10a60

record	nine_values
	rw	,d1,	8	;raw
	sp	,d1,	4	;spiral end
	jr	,d1,	3	;ez jr
	ez	,d1,	3	;ez flange

	xx	,d1,	0	;anything else

record	vars
	rd_efi		,d1	;if adding extra ez-flange for reducer	4-9-18
	sbt		,d1	;1=item is spiral body tee
	sbt_qty		,d6
	sbt_mat		,d1
	sbt_item	,a15
	sbt_f3		,d5
	sbt_lmsq3	,d6
	sbt_lmsq2	,d6
	sbt_idx		,d6
	code	,8a3,	'SG ','R  ','SW1','SW2','C1 ','C2 ','BR1','BR2'
	xdia	,d2	;for dual wall
	dl_wall	,d2	;if dual wall add 2 or 4 inches to barrel clamps
	F6A	,5A4,	'GALV','ALUM','SST ','PGRP','S.S.'
	A4	,A4
	tl	,d6
	mi	,d6
	mat_sel	,d1
	p_mult	,d3
	is_jr	,d1	;1=is jr size (6-24)
	itmrfa	,a6
	vanrfa	,a6
	ivflag	,d1
	vanflg	,d1
	key	,a15
	clctl	,d1
	fil041	,a14
	partno	,a15
	fl	,d4
	maxflen	,d4
	LPON		,D1		;SSQ 4-6-04
	all_zeros	,d1
	err_num		,d3
	err_on		,d1
	routine		,a32
	decmal		,d10
	new_ext		,d10
	orig_ext	,d10
	no_gasket	,d1
	t_num	,d12
	tg_len	,d6		;gasket lenght in feet
	jg_len	,d6		;jr gasket length in feet
	stg_len	,d6		;shipped
	sjg_len	,d6		;shipped
	st_seq	,d3		;start linseq at 800
	bc_cnt	,d6
	ef_cnt	,d6
	sbc_cnt	,d6		;shipped
	sef_cnt	,d6		;shipped
	seg_max	,d2,	05
	entry	,a6
	blanks	,a30
	orginv	,d5
	bsmid	,d5
	bsend	,d5
	srcctl	,d1
	read	,d1,0
	write	,d1,1
	store	,d1,2
	lokctl	,d1
	i	,d6
	j	,d6
;
proc

	clear has_ssefi

	call opens
	clear err_on
	clear lpon

	XCALL ASCII (27, E_CHAR)

	clear i, j
	clear tg_len, jg_len, stg_len, sjg_len
	clear no_gasket
	xcall modname(1,routine)
	if (routine .eq. 'MAIN$BILLS') no_gasket = 1

	call load_memos
	call delete_lines

	call make_work
	call add_lines
	
xdone,
	close chncfg
	xcall delet(wrkfil)

	if (lpon)
		begin
		display (chnspl, eject)
		close chnspl
		if (err_on) lpque(splrpt,DELETE)
		end
	xreturn

;================================================

delete_lines,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; delete any flange, bc, and gasket tagged w/ notes...
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	clear orig_ext, new_ext

	find (chn045, ordlin, order) [err=d_loop]
d_loop,
	xcall ios (chn045,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto d_eof
	if (lordno .ne. order) goto d_eof
	if (ltype .eq. 'M') goto d_loop
	if (ljrmak .ne. 9) goto d_loop

	using litmno select
	('EB'),	call del45	;barrel clamps
	('EF'),	call del45	;e-z flange, all types
	('JG'),	if (no_gasket.eq.0) call del45	;jr gasket
	('TG'),	if (no_gasket.eq.0) call del45	;regular gasket
	('JEB'),	call del45	;barrel clamps
	('JEF'),	call del45	;e-z flange, all types
	('JJG'),	if (no_gasket.eq.0) call del45	;jr gasket
	('JTG'),	if (no_gasket.eq.0) call del45	;regular gasket
	endusing
	orig_ext = orig_ext + (lqtysh*lprice)#1

	goto d_loop
d_eof,
	return
;----------------------------------------------------------------
make_work,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; create line items and add to work file
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	find (chn045, ordlin, order) [err=loop]
loop,
	xcall ios(chn045,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto eof
	if (lordno .ne. order) goto eof
	if (ltype .eq. 'M') goto loop
	if (lmsq3 .le. 0) goto loop		;must have <f3> memo

	call find_damper	;remove any *'s from lcfgim, return partno

	using partno select			;skip these items...
	('SPCC1' thru 'SPCC9'),	goto loop
	('SSSP'),		goto loop
	('ASP'),		goto loop
	('EFISS'),		goto loop
	('JEB','JEF'),		goto loop	;12-18-08
	('JJG','JTG'),		goto loop	;12-18-08
;;;	('NOGASKET'),		goto loop
	endusing

	if (litmno .eq. 'NOGASKET') 
		begin
		no_gasket = 1
		goto loop
		end
	tkey = f3_key(lmsq3),	'ZZZZX' [LEFT]


	p_mult = 100		;1.00
	mat_sel = lmat

; 4-30-14: case for items like ECS06 where mat'l is built into the item and
; lmat does not get set to a material value (ie lmat=1 => galv).

	if (lmat.eq.1 .and. lf1.gt.0)	;material note running for galv.
		begin
		clear tbl_key
		tblcod = 'M1'
		m1_key = lf1
		xcall isio (chn182, coptbl, tbl_key, read, lokctl)
		if (lokctl.eq.0) mat_sel = m1_matl
		end

	clear dl_wall			;for dual wall

	using lf1 select
	(59,62,63),	mat_sel = 5	;vinyl/pvc
	(80,81),	dl_wall = 2
	(82,83),	dl_wall = 4
	endusing

	if (mat_sel .gt. galv) call chk_f6_matl

; sbt code...	1-8-18

	call check_sb_tees		
	if (.not. sbt) goto no_sbt

	for sbt_idx from 1 thru 8
		begin
		fv_data = funcv(sbt_item, code(sbt_idx), sbt_f3)
		if (f_item .ne. blanks)
			begin
			xcall g_item (f_item, itmmas, ordlin, f_memos, sbt_mat, sbt_lmsq2, sbt_lmsq3, f_ga, sbt_qty)
			if (code(sbt_idx).eq.'C1 ') lqtyor = lqtyor*2
			call find_damper	;remove any *'s from lcfgim, return partno
			lordno = order
			savlin = ordlin
			for i from 1 thru 5 typ(i) = f_f3(i)
			call load_line
			end
		end
	goto loop

no_sbt,
	savlin = ordlin
	call load_line	
	goto loop		;sbt

eof,

	ordlin = savlin
	clear lmsq1, lmsq2, lmsq3, lmsq4	;loose, out side of notes
	if (tg_len .gt. 0) call tg		;reg gasket
	if (jg_len .gt. 0) call jg		;jr gasket
	return
;---------------------------------------------------------------------


Load_line,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
		;;; sbt: now a routine
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sbd code end ----------------------------------

;;;	savlin = ordlin

	clear rd_efi				;4-9-18


	using lprdcd select
	('G1','G3','G4','G5','G9'),	xcall catg(partno,segs)
	(),	using partno select
		('SL'),	xcall catg(partno,segs)		;parse for segs
		('HD'),	xcall catg(partno,segs)		;parse for segs
		('HE'),	xcall catg(partno,segs)		;parse for segs
		('HO'),	xcall catg(partno,segs)		;parse for segs
		('H'),	xcall catg(partno,segs)		;parse for segs

		(),	xcall CFG2(partno,segs)
		endusing
	endusing


	clear err_num				;ssq 11-17-05
	all_zeros = 1				;assume all zeros
	for i from 1 thru seg_max		;dim of seq is dia of item #
		begin
		call proc_segs			;now a routine..		
		end

	if (all_zeros .eq. 1)	;this might indicate an error condition...
		begin
		using partno select
		('PEC','FC','EC','DSC'), NOP
		('SG'), NOP			;4-25-18 
		(),	using lprdcd select
			('K1','K3'), NOP
			(),	begin
				str = partno
				err_num = 1
				call in_error
				end
			endusing
		endusing
		end

;4-11-18 ssq: check for reducing tee or cross...
	if (bc.gt.0 .and. ma.gt.mb)		;tee or cross w/ reducer
		begin
		mb = ma					;use the big end twice
		for i from 1 thru 2 call proc_segs	;should give 1 bc and 2 efi
		end

	return			;sbt
;------------------------------------------------------

proc_segs,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; process each seg (end treatment) for ez-flange
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	clear is_jr

	otyp = typ(i)
	dia = sara(i)
	if (tkey.eq.'3  ') 
	then	using dia select
		(1 thru 5),	otyp=sp	;sp
		(6 thru 24),	begin
				if (dl_wall.ne.0)
				then	otyp = ez
				else	begin
					otyp=jr	;jr
					is_jr = 1
					end
				end
		(.gt. 24),	otyp=ez	;ef
		(),		otyp=xx	;anything else
		endusing

	else	using otyp select
		(3),	using dia select
			(1 thru 5),	otyp=sp	;sp
			(6 thru 24),	begin
					if (dl_wall.ne.0)
					then otyp = ez
					else begin
					     otyp=jr	;jr
					     is_jr = 1
					     end
					end
			(.gt. 24),	otyp=ez	;ef
			(),		otyp=xx	;anything else
			endusing
		endusing

			
		if (otyp.gt.0 .and. err_num.eq.0) call add_work	;add an acc rec

	return
;----------------------------------------------------------------------------
	
find_damper,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; check for *'s in lcfgim, return partno
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	partno = lcfgim
	maxflen = %trim(partno)
	for i from 1 thru 3
		begin
		xcall instr(1, partno, "*", fl)
		if (.not. fl) exitloop
		partno(fl,maxflen) = partno(fl+1, maxflen)
		end
	return
;------------------------------------------------------------

chk_f6_matl,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR TBL_KEY
	TBLCOD = 'CF'
	READ (CHN182,COPTBL,TBL_KEY)[ERR=NOT_CF_MUL]

	USING mat_sel SELECT
	(GALV),	p_mult = 100		;1.00
	(VIN),  p_mult = PVSMUL		;7-12-17
	(ALUM),	p_mult = ALUMUL
	(PGRP),	p_mult = PGRMUL
	(SST),	p_mult = SSTMUL
	ENDUSING

not_cf_mul,
	return
;------------------------------------------------------------


add_work,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	clear all_zeros			;something...
	ordlin = savlin			;fresh copy each time...
	clear lcpflg			;ssq 10-9-03
	bc_cnt = lqtyor
	ef_cnt = lqtyor
	sbc_cnt = lqtysh
	sef_cnt = lqtysh

	if(i.eq.1 .and. is_jr) return		;jr is 1st item
	if(i.eq.1 .and. otyp.eq.ez) 
		begin
		clear bc_cnt	;no bc for ef if 1st
		clear sbc_cnt
		end

	using otyp select
	(ez),	begin		;this is now both ez & jr...
		if (is_jr)
		then	begin
			call bc		;jr barrel clamps
			if(bc_cnt.gt.0)jg_len = jg_len + (dia*35*lqtyor)	;this is off by 10
			if(sbc_cnt.gt.0)sjg_len = sjg_len + (dia*35*lqtysh)	;this is off by 10
			end
		else	begin
			call efi	;ef ez-flange installed
			call bc		;ef barrel clamps
			if(bc_cnt.gt.0)tg_len = tg_len + (dia*35*lqtyor)	;this is off by 10
			if(sbc_cnt.gt.0)stg_len = stg_len + (dia*35*lqtysh)	;this is off by 10
			end
		end

	(sp),	nop		;sp don't count

	(rw),	begin
		call bcl	;rw barrel clamps loose
		call efl	;rw ez-flange loose
		using dia select
		(6 thru 24),	
			begin
			if(bc_cnt.gt.0)jg_len = jg_len + (dia*35*lqtyor)	;this is off by 10	;ssq 12-13-05
			if(sbc_cnt.gt.0)sjg_len = sjg_len + (dia*35*lqtysh)	;this is off by 10
			end
		(.gt.24),
			begin
			if(bc_cnt.gt.0)tg_len = tg_len + (dia*35*lqtyor)	;this is off by 10	;ssq 12-13-05
			if(sbc_cnt.gt.0)stg_len = stg_len + (dia*35*lqtysh)	;this is off by 10
			end
		endusing
		end
	endusing

	return
;----------------------------------------------
jg,	;25' rolls
	if (no_gasket) return		;ssq 9-16-03
	str = 'JJG'
	call read_itmmas
	if (lokctl) return

	jg_len = (jg_len*10/12)#2	;convert to feet
	t_num = jg_len/25*25
	if (jg_len .gt. t_num) jg_len = jg_len + 25

	lqtyor = (jg_len*100/25)#2	;25' rolls  ssq 3-30-06

	sjg_len = (sjg_len*10/12)#2	;convert to feet
	t_num = sjg_len/25*25
	if (sjg_len .gt. t_num) sjg_len = jg_len + 25

	lqtysh = (sjg_len*100/25)#2	;ssq 3-30-06

	clear lcpflg			;ssq 04-13-04
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
tg,
	if (no_gasket) return		;ssq 9-16-03
	str = 'JTG'	
	call read_itmmas
	if (lokctl) return

	tg_len = (tg_len*10/12)#2	;convert to feet
	t_num = tg_len#2 *100
	if (tg_len .gt. t_num)
	then	tg_len = t_num + 50
	else	tg_len = t_num

	lqtyor = (tg_len*100/50)#2	;50' rolls  ssq 3-30-06

	stg_len = (stg_len*10/12)#2	;convert to feet
	t_num = stg_len#2 *100
	if (stg_len .gt. t_num)
	then	stg_len = t_num + 50
	else	stg_len = t_num

	lqtysh = (stg_len*100/50)#2	;50' rolls ssq 3-30-06

	clear lcpflg			;ssq 04-13-04
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------

bc,
	if (dl_wall .ne. 0) clear lmsq1	;2-18-11
	xdia = dia + dl_wall		;ssq 2-11-11
	str = 'JEB'
	str(4,5) = xdia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	lqtyor = bc_cnt
	lqtysh = sbc_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
bcl,
	xdia = dia + dl_wall		;ssq 2-11-11
	str = 'JEB'
	str(4,5) = xdia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	clear lmsq1, lmsq2, lmsq3, lmsq4	;loose, out side of notes
	lqtyor = bc_cnt
	lqtysh = sbc_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
efi,
	str = 'JEFI'
	str(5,6) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	if (mat_sel.eq.sst .and. dia.ge.26) 
		begin
	;;;	lprice =	;per jess 9-22-10
		has_ssefi = 1	
		end
	lqtyor = ef_cnt + rd_efi	;4-9-18
	lqtysh = sef_cnt + rd_efi	;4-9-18
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
efl,
	str = 'JEF'

	using lf1 select		;8-28-12
	(80 thru 83),	if (lf3.eq.38) str = 'JEFD'
	endusing

	tl = %trim(str)
	str(tl+1, tl+2) = dia,	'XX' [left]
;;	str(4,5) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	if (mat_sel.eq.sst .and. dia.ge.26) 
		begin
		lprice =	;per jess 9-22-10
		has_ssefi = 1	
		end

	clear lmsq1, lmsq2, lmsq3, lmsq4	;loose, out side of notes
	lqtyor = ef_cnt
	lqtysh = sef_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------

add_lines,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; read thru work file and add lines to ordlin
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;	st_seq = 800
	st_seq = 700
;;;	st_seq = 650	;ssq 10-11-12
	clear ordkey
	find (chncfg, ordlin, ^first) [err=al_loop]
al_loop,
	xcall ios(chncfg,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto al_eof
	if (lqtyor .eq. 0) goto al_loop		;skip zero qty
	
	using litmno select
	('JEB','JEF'),	clear lf2, lf3		;need mat'l
	(),		clear lf1, lf2, lf3
	endusing

	call commit

al_next_seq,
;;;	incr st_seq
	linseq = st_seq
	ljrmak = 9				;record created in oejr
	new_ext = new_ext + (lqtysh*lprice)#1

;;;	clear lf1, lf2, lf3, lf4		;isam - never keys

	xcall isio (chn045,ordlin,ordkey,store,lokctl)
	if (lokctl .ne. 0) goto al_next_seq
	goto al_loop
al_eof,
	decmal = new_ext - orig_ext
	runtot = runtot + decmal
	taxtot = taxtot + decmal
	return
;----------------------------------------------------------------
check_sb_tees,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; is this item a spiral body tee?
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	sbt = 0
	using litmno select
	('BN'),				NOP		;BULLNOSE TEE
	('C9','C4','CV9','CV4'),	NOP	;CROSS
	('CT9','CC9','CTV','CCV'),	NOP	;CONICAL TEE/CROSS
	('T4','T9','TV4','TV9'),	NOP	;TEE
	('STC','STT'),			NOP	;SHOE TAP
	(),				RETURN	; anything else
	endusing

	partno = lcfgim
	if (ldampr) call find_damper

	xcall cfg2(partno,segs)

	if (ma.gt.36 .and. (bc.ge.20 .or. bd.ge.20) )goto sb_tee
	return
sb_tee,
	sbt_item = lcfgim
	sbt_qty = lqtyor
	sbt_mat = lmat
	sbt_f3  = lf3
	sbt_lmsq2 = lmsq2
	sbt_lmsq3 = lmsq3
	sbt = 1
	return
;----------------------------------------------------

read_itmmas,	;;;;;;;;;;;;;;;;;;


	
	CLEAR ITMKEY		;don't need itmkey for these items as they
				;are not affected by f* notes

	read (chn041, itmmas, strng) [err=baditm]
	lokctl = 0


	clear ldampr
	litmno = itemno
	lcfgim = itemno		;ssq 11-18-04
	ldescr = descr
	if (mat_sel .gt. galv) call chk_m_desc

	lstokt = stock

	lprice = (price*p_mult)#2
	using strng select
	('JEFI'),	begin
			if(mat_sel.eq.sst)lprice = price
			using dl_wall select				;4-26-17
			(2),	if (dia.ge.24) lprice = (lprice*25)#1
			(4),	if (dia.ge.22) lprice = (lprice*25)#1
			endusing
		;;;	if (dia.gt.24 .and. dl_wall.gt.0) lprice = (lprice*25)#1
			end
	('JTG','JJG'),	lprice = price
	endusing

	lprice = (lprice*cmx)#3*10	;ssq 2-29-16

;;;	lprice = price
	luofm = suofm
	lprdcd = prdcat
	ldept = usrdef
	lsrtsq = priccd
	if (txflag .eq. 'Y') ltxflg = 1
	return
;---------------------------------
baditm,
	lokctl = 9		;not found
	err_num = 2
	call in_error
	return
;---------------------------------

chk_m_desc,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; does ldescr need matl?
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	mi = 1
cf6l,
	a4 = f6a(mi)
	tl = %instr(1, ldescr, a4)
	if (tl .le. 1)
		begin
		incr mi
		if (mi .le. 5) goto cf6l
		end

	if (tl .gt. 1)
	  begin
	  using mat_sel select
	  (.le.galv),	nop
	  (),	begin
		tl = %instr(1,ldescr,'GALV')
		if (tl.le.1) 
			begin
			tl = %trim(ldescr)
			tl = tl + 2
			end
		if (tl.gt.30)tl=30		
		ldescr(tl,30) = c_short(mat_sel)
		end
	  endusing
	  end

	return
;--------------------------------------------------------------

LOAD_MEMOS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; Read thru ordlin file, and
		;;; load memo arrays
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR F1_NUM, F2_NUM, F3_NUM
	FOR J FROM 1 THRU F_MAX
		BEGIN
		CLEAR F1_MEMOS(J)
		CLEAR F2_MEMOS(J)
		CLEAR F3_MEMOS(J)

		CLEAR F1_MEMOL(J)
		CLEAR F2_MEMOL(J)
		CLEAR F3_MEMOL(J)

		CLEAR F1_KEY(J)
		CLEAR F2_KEY(J)
		CLEAR F3_KEY(J)
		END

	FIND (CHN045, ORDLIN, ORDER) [ERR=MLOOP]
MLOOP,
	READS (CHN045, ORDLIN, EOF_M)
	IF (LINSEQ .NE. 0) GOTO EOF_M
	IF (LMSQ1 .GT. 0) 
		BEGIN
		F1_MEMOS(LMSQ1) = M_SHORTD
		F1_MEMOL(LMSQ1) = M_LDESCR
		F1_KEY(LMSQ1) = M_KEY
		END
	IF (LMSQ2 .GT. 0) 
		BEGIN
		F2_MEMOS(LMSQ2) = M_SHORTD
		F2_MEMOL(LMSQ2) = M_LDESCR
		F2_KEY(LMSQ2) = M_KEY
		END
	IF (LMSQ3 .GT. 0) 
		BEGIN
		F3_MEMOS(LMSQ3) = M_SHORTD
		F3_MEMOL(LMSQ3) = M_LDESCR
		F3_KEY(LMSQ3) = M_KEY
		END
	GOTO MLOOP
EOF_M,
	RETURN
;-------------------------------------------------

in_error,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	if (lpon .eq. 0) call spool_on

	clear err_line
	el_order = order
	el_litmno = str
	el_msg = err_msg(err_num)
	writes (chnspl, err_line)
	err_on = 1
	return
;--------------------------------------------
del45,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	using litmno select
	('JEB','JEF'),	clear lf2, lf3		;need mat'l
	(),		clear lf1, lf2, lf3
	endusing

	lqtyor = -lqtyor
	call commit			;un-commit
	
	delete(chn045)			;delete the ordlin record
	return
;---------------------------------------------


commit,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	if (oloc .ne. 'O') return	;orders only

	using litmno select
	('JEB'),	KEY = LITMNO(2,15)	
	('JEFI'),	KEY = LITMNO(2,3) + LITMNO(5,15)	;11-1-17: this first
	('JEF'),	KEY = LITMNO(2,15)			;11-1-17: then this
	('JJG'),	KEY = LITMNO(2,15)	
	('JTG'),	KEY = LITMNO(2,15)	
	(),		KEY = LITMNO
	endusing
;;;	using litmno select
;;;	('JEB'),	KEY = LITMNO(2,15)	
;;;	('JEF'),	KEY = LITMNO(2,15)	
;;;	('JEFI'),	KEY = LITMNO(2,3) + LITMNO(5,15)
;;;	('JJG'),	KEY = LITMNO(2,15)	
;;;	('JTG'),	KEY = LITMNO(2,15)	
;;;	(),		KEY = LITMNO
;;;	endusing

;---------------------------------------------------------
	xcall gtitm (key, lf1, lf2, lf3, itmrfa, ivflag, vanflg, vanrfa)
	if (ivflag .eq. 0) return	;nothing to allocate,
					;need error message...
	close chn041
	open (chn041, su, fil041)

	read (chn041, itmmas, rfa:itmrfa) [err=badcmt]
;;;	read (chn041, itmmas, key) [err=badcmt]
;---------------------------------------------------------

	IF (stock.EQ.'S') QTYCOM = QTYCOM + LQTYOR
	if (qtycom .lt. 0) qtycom = 0
	write (chn041, itmmas, key)

badcmt,
	close chn041
	open (chn041, si, fil041)
	return
;--------------------------------------------

opens,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Create work file...
	CHNCFG = 8
	WFORD = ORDER,	'XXXXXX'
	XCALL ISAMC (WRKFIL, 180, 1, 'START=1, LENGTH=9, DUPS, ASCEND')
	OPEN (CHNCFG, SU, WRKFIL)

	XCALL FFILE (41, FIL041, CLCTL)
	fil041(14,14) = 'M'

	RETURN
;-------------------------------------------------

SPOOL_ON,
	CHNSPL = 20
	SPORD = ORDER,	'XXXXXX'
	OPEN(CHNSPL, O, SPLRPT)
	LPON = 1

	RETURN
;-------------------------------------------------

	END


