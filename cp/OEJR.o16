subroutine oejr
	order	,d
	chn041	,d
	chn042	,d
	chn045	,d
	runtot	,d
	taxtot	,d
;
;	create bc, flange & gasket line items...
;	modifications:
;	25-sep-03 ssq:	allow call from BILLS.CP add lqtysh code...
;	08-oct-03 ssq:	bills not using runtot, taxtot anymore
;
record	ordlin
	.include 'def:rd045a.def'
record,x
	.include 'def:rd045m.def'
record,x
	.include 'def:rd045d.def'
record	savlin
	.include 'def:rd045e.def'


record	itmmas
	.include 'def:rd041a.def'
record,x
	.include 'def:rd041b.def'
record	itmidx
	.include 'def:rd042a.def'

RECORD	F_MEMOS
	.INCLUDE 'DEF:CPMEMO.DEF'

RECORD	WRKFIL
		,A4,	'SPL:'
		,A1,	'W'
	WFORD	,A6
		,A4,	'.ISM'

RECORD	SPLRPT
		,A4,	'SPL:'
		,A1,	'W'
	SPORD	,A6
		,A4,	'.ERR'
record	out
	otyp	,d1
	dia 	,d2
	bc_qty	,d6	;count for barrel clamps
	ef_qty	,d6	;count for ez-flange
record,x
	okey	,d3

RECORD
	SEGS	,A12			;first 2 dig are gauge
RECORD,X
	GA	,D2
	SARA	,5D2

record
	tkey	,a5
record,x
	typ9	,d1
	typ	,4d1

record	dis
	i	,d6

record	strng
	str	,a15

record	channels
	chncfg	,d2		;ordlin work file
	chnspl	,d2		;error report file

record	err_line
	el_order	,d6
			,a1
	el_litmno	,a15
			,a1
	el_msg		,a65

record	vars
	err_num		,d3
	err_on		,d1
	routine		,a32
	decmal		,d10
	new_ext		,d10
	orig_ext	,d10
	no_gasket	,d1
	t_num	,d12
	tg_len	,d6		;gasket lenght in feet
	jg_len	,d6		;jr gasket length in feet
	stg_len	,d6		;shipped
	sjg_len	,d6		;shipped
	st_seq	,d3		;start linseq at 800
	bc_cnt	,d6
	ef_cnt	,d6
	sbc_cnt	,d6		;shipped
	sef_cnt	,d6		;shipped
	seg_max	,d2,	05
	entry	,a6
	blanks	,a30
	orginv	,d5
	bsmid	,d5
	bsend	,d5
	srcctl	,d1
	read	,d1,0
	write	,d1,1
	store	,d1,2
	lokctl	,d1
	j	,d6
;
proc
	call opens
	clear err_on

	read(chn041, itmmas, 1)
	orginv = org041

	clear i, j
	clear tg_len, jg_len, stg_len, sjg_len
	clear no_gasket
	xcall modname(1,routine)
	if (routine .eq. 'MAIN$BILLS') no_gasket = 1
	call load_memos
	call delete_lines
;;;	if(order.gt.503000 .and. order.le.607650) xreturn	;ssq 9/18/03
	if(order.gt.503000 .and. order.le.607650) goto xdone	;ssq 9/24/03
	call make_work
	call add_lines
	
xdone,
	close chncfg
	xcall delet(wrkfil)

	close chnspl
	if (err_on) lpque(splrpt)
	xreturn

;================================================

delete_lines,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; delete any flange, bc, and gasket tagged w/ notes...
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	clear orig_ext, new_ext

	find (chn045, ordlin, order) [err=d_loop]
d_loop,
	xcall ios (chn045,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto d_eof
	if (lordno .ne. order) goto d_eof
	if (ltype .eq. 'M') goto d_loop
;;;	if (lmsq3 .le. 0) goto d_loop
;;;	tkey = f3_key(lmsq3)
;;;	if (typ9 .ne. 9) goto d_loop
	if (ljrmak .ne. 9) goto d_loop

	using litmno select
	('EB'),	delete(chn045)	;barrel clamps
	('EF'),	delete(chn045)	;e-z flange, all types
	('JG'),	if (no_gasket.eq.0) delete(chn045)	;jr gasket
	('TG'),	if (no_gasket.eq.0) delete(chn045)	;regular gasket
	('JEB'),	delete(chn045)	;barrel clamps
	('JEF'),	delete(chn045)	;e-z flange, all types
	('JJG'),	if (no_gasket.eq.0) delete(chn045)	;jr gasket
	('JTG'),	if (no_gasket.eq.0) delete(chn045)	;regular gasket
	endusing
	orig_ext = orig_ext + (lqtysh*lprice)#1

	goto d_loop
d_eof,
	return
;----------------------------------------------------------------
make_work,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; create line items and add to work file
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	find (chn045, ordlin, order) [err=loop]
loop,
	xcall ios(chn045,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto eof
	if (lordno .ne. order) goto eof
	if (ltype .eq. 'M') goto loop
	if (lmsq3 .le. 0) goto loop		;must have <f3> memo
	tkey = f3_key(lmsq3),	'ZZZZX' [LEFT]
	if (litmno .eq. 'NOGASKET') no_gasket = 1
;;;	if (typ9 .ne. 9) goto loop		;must be flange series
	if (typ9.ne.9 .and. tkey.ne.'15 ') goto loop
	savlin = ordlin

	if (lprdcd .eq. 'G' .or. lcfgim.eq.'SL')
	then	xcall catg(lcfgim,segs)		;catg
	else	xcall cfg2(lcfgim,segs)		;parse for segs

	for i from 1 thru seg_max		;dim of seq is dia of item #
		begin
		otyp = typ(i)
		dia = sara(i)
		if (tkey.eq.'15 ') using dia select
					(1 thru 5),	otyp=3	;sp
					(6 thru 24),	otyp=2	;jr
					(.gt. 24),	otyp=1	;ef
					(),		otyp=0	;anything else
				   endusing
	;;;	if (otyp .gt. 0) call add_work
		if (otyp .gt. 0) 
		then	call add_work
		else	begin
			err_num = 1		
			call in_error
			end
		end		
	goto loop
eof,
	ordlin = savlin
	clear lmsq1, lmsq2, lmsq3	;loose, out side of notes
	if (tg_len .gt. 0) call tg		;reg gasket
	if (jg_len .gt. 0) call jg		;jr gasket
	return
;------------------------------------------------------

add_work,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ordlin = savlin			;fresh copy each time...
	clear lcpflg			;ssq 10-9-03
	bc_cnt = lqtyor
	ef_cnt = lqtyor
	sbc_cnt = lqtysh
	sef_cnt = lqtysh
	if(i.eq.1 .and. otyp.eq.2) return	;jr is 1st
	if(i.eq.1 .and. otyp.eq.1) 
		begin
		clear bc_cnt	;no bc for ef if 1st
		clear sbc_cnt
		end

	using otyp select
	(1),	begin
		call efi	;ef ez-flange installed
		call bc		;ef barrel clamps
		if(bc_cnt.gt.0)tg_len = tg_len + (dia*35*lqtyor)	;this is off by 10
		if(sbc_cnt.gt.0)stg_len = stg_len + (dia*35*lqtysh)	;this is off by 10
		end
	(2),	begin
		call bc		;jr barrel clamps
		if(bc_cnt.gt.0)jg_len = jg_len + (dia*35*lqtyor)	;this is off by 10
		if(sbc_cnt.gt.0)sjg_len = sjg_len + (dia*35*lqtysh)	;this is off by 10
		end
	(3),	nop		;sp don't count
	(4),	begin
		call bcl	;rw barrel clamps loose
		call efl	;rw ez-flange loose
		if(bc_cnt.gt.0)tg_len = tg_len + (dia*35*lqtyor)	;this is off by 10
		if(sbc_cnt.gt.0)stg_len = stg_len + (dia*35*lqtysh)	;this is off by 10
		end
	endusing

	return
;----------------------------------------------
jg,
	if (no_gasket) return		;ssq 9-16-03
	str = 'JJG'
	call read_itmmas
	if (lokctl) return

	jg_len = (jg_len*10/12)#2	;convert to feet
	t_num = jg_len#2 *100
	if (jg_len .gt. t_num)
	then	jg_len = t_num + 50
	else	jg_len = t_num
	lqtyor = jg_len

	sjg_len = (sjg_len*10/12)#2	;convert to feet
	t_num = sjg_len#2 *100
	if (sjg_len .gt. t_num)
	then	sjg_len = t_num + 50
	else	sjg_len = t_num
	lqtysh = sjg_len

;;;	jg_len = (jg_len*10/12)#1	;convert to feet
;;;	lqtyor = (jg_len/1000*100) + 100
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
tg,
	if (no_gasket) return		;ssq 9-16-03
	str = 'JTG'	
	call read_itmmas
	if (lokctl) return

	tg_len = (tg_len*10/12)#2	;convert to feet
	t_num = tg_len#2 *100
	if (tg_len .gt. t_num)
	then	tg_len = t_num + 50
	else	tg_len = t_num

	lqtyor = tg_len
	stg_len = (stg_len*10/12)#2	;convert to feet
	t_num = stg_len#2 *100
	if (stg_len .gt. t_num)
	then	stg_len = t_num + 50
	else	stg_len = t_num

	lqtysh = stg_len

;;;	lqtyor = (tg_len/1000*100) + 100
;;;	tg_len = (tg_len*10/12)#1	;convert to feet
;;;	lqtyor = (tg_len/1000*100) + 100
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
bc,
	str = 'JEB'
	str(4,5) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	lqtyor = bc_cnt
	lqtysh = sbc_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
bcl,
	str = 'JEB'
	str(4,5) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	clear lmsq1, lmsq2, lmsq3	;loose, out side of notes
	lqtyor = bc_cnt
	lqtysh = sbc_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
efi,
	str(1,4) = 'JEFI'
	str(5,6) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	lqtyor = ef_cnt
	lqtysh = sef_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------
efl,
	str(1,3) = 'JEF'
	str(4,5) = dia,	'XX' [left]
	call read_itmmas
	if (lokctl) return

	clear lmsq1, lmsq2, lmsq3	;loose, out side of notes
	lqtyor = ef_cnt
	lqtysh = sef_cnt
	store (chncfg, ordlin, ordkey)
	return
;--------------------------------

add_lines,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; read thru work file and add lines to ordlin
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	st_seq = 800
	clear ordkey
	find (chncfg, ordlin, ^first) [err=al_loop]
al_loop,
	xcall ios(chncfg,ordlin,read,lokctl)
	if (lokctl .ne. 0) goto al_eof
	if (lqtyor .eq. 0) goto al_loop		;skip zero qty
al_next_seq,
	incr st_seq
	linseq = st_seq
	ljrmak = 9				;record created in oejr
	new_ext = new_ext + (lqtysh*lprice)#1
	xcall isio (chn045,ordlin,ordkey,store,lokctl)
	if (lokctl .ne. 0) goto al_next_seq
	goto al_loop
al_eof,
	decmal = new_ext - orig_ext
	runtot = runtot + decmal
	taxtot = taxtot + decmal
	return
;----------------------------------------------------------------

read_itmmas,	;;;;;;;;;;;;;;;;;;

	LOKCTL = 9		;ASSUME NOT FOUND

	XCALL SERCH (CHN042,ITMIDX,STRNG,1,15,ORGINV,BSMID,SRCCTL,4,16,20,0,0,0,0)
	IF(SRCCTL .NE. 0) 
		BEGIN
		ERR_NUM = 2
		CALL IN_ERROR
		RETURN
		END

	LOKCTL = 0
	XCALL IO (CHN041,ITMMAS,IRC041,READ,LOKCTL)

	clear ldampr
	litmno = itemno
	ldescr = descr
	lstokt = stock
	lprice = price
	luofm = suofm
	lprdcd = prdcat
	ldept = usrdef
	lsrtsq = priccd
	if (txflag .eq. 'Y') ltxflg = 1
	return
;---------------------------------

LOAD_MEMOS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; Read thru ordlin file, and
		;;; load memo arrays
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR F1_NUM, F2_NUM, F3_NUM
	FOR J FROM 1 THRU F_MAX
		BEGIN
		CLEAR F1_MEMOS(J)
		CLEAR F2_MEMOS(J)
		CLEAR F3_MEMOS(J)

		CLEAR F1_MEMOL(J)
		CLEAR F2_MEMOL(J)
		CLEAR F3_MEMOL(J)

		CLEAR F1_KEY(J)
		CLEAR F2_KEY(J)
		CLEAR F3_KEY(J)
		END

	FIND (CHN045, ORDLIN, ORDER) [ERR=MLOOP]
MLOOP,
	READS (CHN045, ORDLIN, EOF_M)
	IF (LINSEQ .NE. 0) GOTO EOF_M
	IF (LMSQ1 .GT. 0) 
		BEGIN
		F1_MEMOS(LMSQ1) = M_SHORTD
		F1_MEMOL(LMSQ1) = M_LDESCR
		F1_KEY(LMSQ1) = M_KEY
		END
	IF (LMSQ2 .GT. 0) 
		BEGIN
		F2_MEMOS(LMSQ2) = M_SHORTD
		F2_MEMOL(LMSQ2) = M_LDESCR
		F2_KEY(LMSQ2) = M_KEY
		END
	IF (LMSQ3 .GT. 0) 
		BEGIN
		F3_MEMOS(LMSQ3) = M_SHORTD
		F3_MEMOL(LMSQ3) = M_LDESCR
		F3_KEY(LMSQ3) = M_KEY
		END
	GOTO MLOOP
EOF_M,
	RETURN
;-------------------------------------------------

in_error,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	el_order = order
	el_litmno = litmno
	using err_num select
	(1),	el_msg = 'Invalid item for this type'
	(2),	el_msg = 'required item not in inventory - could not create line item'
	endusing
	return
;--------------------------------------------

opens,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Create work file...
	CHNCFG = 8
	WFORD = ORDER,	'XXXXXX'
	XCALL ISAMC (WRKFIL, 154, 1, 'START=1, LENGTH=9, DUPS, ASCEND')
	OPEN (CHNCFG, SU, WRKFIL)

	CHNSPL = 20
	SPORD = ORDER,	'XXXXXX'
	OPEN(CHNSPL, O, SPLRPT)

	RETURN
;-------------------------------------------------


	END


