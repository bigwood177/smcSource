;SCRNY.DBL
;SCRNX.DBL
;s2new.dbl	-test
SUBROUTINE SCRNY
;
;	16-MAY-1997 SSQ: ADD QTY BREAK PRICING.
;	01-JUN-1998 SSQ: CHANGE "INCH" CHAR FROM "," TO "+"
;	11-Nov-1998 SSQ: Streamline configuration logic
;	16-FEB-1999 SSQ: No char. may follow "+" (inch) for r-angle
;	01-MAR-1999 SSQ: CLEAR bad_dig
;	14-JUL-1999 SSQ: "EDS"
;		HANDLES SECOND SCREEN IN ADD MODE OF OE
;
	CUSTP2	,A
	PCODES	,A
	PDISCS	,D
	PMAX	,D
	DCODES	,A
	DDISCS	,D
	DMAX	,D
	TYPSIS	,D
	ORDSEQ	,D
	OORDNO	,D
	TAXFLG	,A
	MAXRC2	,D
	ORGINV	,D
	LOCTNS	,D
	PRICES	,D
	FULL	,D
	ODISC	,D
	OLOC	,A
	OCUSNM	,A
	TAXTOT	,D
	V	,D
	CREDIT	,D
	ODATE	,D


	.INCLUDE 'WND:WINDOWS.DEF'
	.DEFINE POOLSIZE	,25000
	.DEFINE WNDCHNL		,15
	.DEFINE MAXWINS		,10


GLOBAL ORDL	;;;,INIT
RECORD ORDLIN  		
		.INCLUDE 'DEF:RD045A.NEW'
RECORD,X
		.INCLUDE 'DEF:RD045D.NEW'
ENDGLOBAL

GLOBAL IMS	;;;,INIT

RECORD INVMAS
	.INCLUDE 'DEF:RD041A.DEF'
RECORD DUMINV,X
	.INCLUDE 'DEF:RD041B.DEF'
RECORD ITMIDX 
	.INCLUDE 'DEF:RD042A.DEF'
ENDGLOBAL

;------------------------------------
RECORD	POP		;INTERNAL USE
	.INCLUDE 'DEF:POP1.DEF'

RECORD	MPOP2
	.INCLUDE 'MPOP2.DEF'
RECORD	MPOP3
	.INCLUDE 'MPOP3.DEF'
RECORD	LPOP
	.INCLUDE 'LPOP.DEF'
RECORD	FKEYS
	.INCLUDE 'DEF:FUNKEY.DEF'
;------------------------------------


RECORD	ID_LINE
		,A*	,'ORDER: '
	ID_ORDER	,A6
		,A*	,'  CUST: '
	ID_NAME	,A30

RECORD	HD_LINE
	,A*,'ITEM #          DESCRIPTION                       QTY       PRICE DS  EXT-PRICE'

RECORD	F_MEMOS
	.INCLUDE 'CPMEMO.DEF'

RECORD	WRKLIN
	ARO	,A1
		,A1
	REST	,A80

RECORD	WVARS
	W_ID	,D4
	WND_1	,D4
	WND_2	,D4
	WND_3	,D4
	WND_M	,D4	
	WN_NAME	,A6,	'MAKMEM'

RECORD	MEMO_LINE
	M_KY1	,A1	;MXX
	M_KY2	,D2
		,A1
	M_MEMO	,3A30
RECORD,X
	M_KEY	,A3

RECORD	COPTBL
	.INCLUDE 'DEF:RD182A.DEF'

RECORD TPRICE
	ARRAY	,80D5

RECORD TEEDAT
	TGUAG	,D2
	TMAIN	,D2
	TREDU	,D2
	TBRAN	,D2
	TDESCR	,A30

RECORD	SADDLE
	SANGL	,A2
	SGUAG	,A2
	SBRAN	,A2
	SMAIN	,A2
		,A1	;IN CASE "DAMPER" (*)
RECORD,X
		,A4	;ANGLE, GAUGE
	STAR	,A1	;FOR DAMPER
	ST_BRAN	,A2
	ST_MAIN	,A2

RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2
RECORD OUTSTK
		,A9,	'ON-HAND: '
	AQTYONH	,A7
		,A13,	'| COMMITTED: '
	AQTYCOM	,A7
		,A12,	'| ON-ORDER: '
	AQTYONO	,A7
		,A13,	'| NET AVAIL: '
	ANETAV	,A7

RECORD	VDAMPR
	DAMP		,D2	;DAMPER DIMENSIONS
	DAMPER_PRICE	,3D8
	FL	,D2	;
	MAXFLEN	,D2
	BAD_DIGIT	,D1
	PARTNO	,A15
	PFF	,A15

RECORD	W2_LINE
	W2_ITEM		,A15
			,A1
	W2_DESCR	,A30
			,A1
	W2_QTY		,A5
			,A2
	W2_PRICE	,A10
			,A2
	W2_EXT		,A10
	
RECORD	PVARS
	LI		,D2
	VAL		,D1
	SAVE_ROW	,D2
	FIRST_ROW	,D2
	LAST_ROW	,D2
	WROW		,D2
	WLEN		,D2
	TITLEN		,D2
	STAT_KEY	,D2
	STAT		,D2
	DEC		,D18

RECORD	VARS
	P_INS		,D1,2
	P_DEL		,D1,3
	P_UPD		,D1,4
	P_PG_UP		,D1,5
	P_PG_DN		,D1,6
	LINRFA		,A6
	MM_CODE		,D2
	KEY_FOUND	,D1
	CLVL1		,D2
	CLVL2		,D2
	CLVL3		,D2
	SAVL1		,D2
	SAVL2		,D2
	SAVL3		,D2
	F_KEY	,D3
	T_REC	,D5
	VINYL		,D1
	CONFIG_ERROR	,D1
	A_GUAGE	,A2
	IS_DAMPER	,D1
	I	,D5
	J	,D5
	NUMITM	,D2
	CHN182	,D2
	CHN045	,D2
	ORIG_PRICE	,D8
	CONFIG_PRICE	,D8
	RUNTOT	,D8
	RUNQTY	,D6
	EXEPRC	,D9
	BKOCTL	,D1
	BKOSEL	,D1
	JUSTIF	,D1
	WRKDAT	,D6
	ROWX	,D2
	ROW2	,D2
	OPTION	,D1
	ENTRY	,A36
	INXCTL  ,D1
	CNGCTL	,D1
	WHATNO	,D2
	DECMAL	,D18
	KEY   	,A15
	BSEND	,D5
	BSMID	,D5
	BSAVE	,D5
	SRCCTL	,D1
	ORDNOA	,A6
	ODISCA	,A2
	SAVEL	,D2
	RECNO	,D5
	TCHAR	,D3
	DCHAR	,D3
	CTR	,D2
	MSG	,A17
	ALPHA	,A10
	BLANKS	,A25
	BLANK1	,A80
	BADBIL	,D1
	BRACKS	,A15,	']]]]]]]]]]]]]]]'
	READ	,D1,	0	;USED FOR IO SUBROUTINE
	WRITE	,D1,	1	;USED FOR IO SUBROUTINE
	STORE	,D1,	2	;USED FOR ISIO SUBROUTINE
	LOKCTL	,D1
	SAVROW	,D2
	SAVITM	,A15	;SAVE THE LAST ITEM NUMBER *** NOTE SIZE ***
	SYSTEM	,D1
	DISDAT	,A8
	DPND	,D6
	DSIZ	,D3
	RA_SIZE	,D3		;R_ANGLE SIZE
	SP_SIZE	,D3		;SPIRAL SIZE
	WTPIN	,D6
	PRPPN	,D6
	WRANGL	,A12
	INCH	,D3
	DASH	,D2
	BADTPR	,D1
	NUMASK	,A7,'ZZ,ZZZ-'
	KITMNO	,A15
	TONH	,D8
	TONO	,D8
	TCOM	,D8
	TREO	,D8
	TREC	,D5
PROC
	XCALL ENVRN (SYSTEM)
	CALL INIT_WINDOW
	ID_ORDER = OORDNO,	'ZZZZZX'
	ID_NAME = OCUSNM
	XCALL W_DISP(WND_1, WD_POS,1,1, ID_LINE)
	XCALL W_DISP(WND_1, WD_POS,4,1, HD_LINE)
	XCALL W_UPDT

	CHN182 = 17		;OPENED IN ORDADD
	CHN045 = 5
	NUMITM = 4

	RUNTOT =
	RUNQTY =
	SAVITM =
	ORDSEQ = 1
	BSAVE = 1	;SET TO START OF INDEX FILE - IF TABBING USED FIRST
	LOKCTL = 1
	XCALL IO (1,DUMINV,1,READ,LOKCTL)
	JUSTIF = JSTIFY
	ORGINV = ORG041
	LOCTNS = NUMLOC
	PRICES = NUMPRC
BEGIN,
	UNLOCK 1
	ROW = 5
	ROW2 = 6
ITEM,
	ORDLIN =
	CLEAR BADTPR, LITMWT, LTXFLG, BKOCTL, DASH, INCH
	XCALL W_DISP(WND_1, WD_POS, ROW, 1, WD_CLR, WDC_LIN)

	CTL (4,14) = '01,15,00,AX'
	CALL INPUT
	IF (INXCTL) CALL CLEAR1
	GO TO (CLRDTA,ENDITM,TABNXT), INXCTL
	USING F_KEY SELECT
	(F_01),		BEGIN
			CALL F1_POP
			GOTO ITEM
			END
	(F_02),		BEGIN
			CALL F2_POP
			GOTO ITEM
			END
	(F_03),		BEGIN
			CALL F3_POP
			GOTO ITEM
			END
	(F_04),		BEGIN
			CALL F4_POP
			GOTO ITEM
			END
	(F_05),		BEGIN
			CALL F5_POP
			GOTO ITEM
			END
	
	ENDUSING

;;;	IF (ENTRY.EQ.BLANKS) CALL LSTITM
	IF (ENTRY.EQ.BLANKS) GOTO ITEM

	IF (JUSTIF) XCALL FRMAT (ENTRY(1,15),15)
	XCALL W_DISP(WND_1, WD_POS,ROW,1,ENTRY(1,15))
	LITMNO = ENTRY (1,15)
	CALL FIND_DAMPER
	GOTO (ITEM),BAD_DIGIT

	KITMNO = LITMNO					;;;
	IF (LITMNO.EQ.BLANKS) GO TO ITEM
	IF (LITMNO.EQ.'M              ') GOTO ENTDES	;;;

	CLEAR TDESCR, CONFIG_ERROR
	SP_SIZE = 1				;in case sph

;;; branch to product configurators:
	USING LITMNO SELECT
	('WR'),				CALL R_ANGLE
	('R20' THRU 'R26'),		CALL REDUCER
	('RV20' THRU 'RV26'),		CALL REDUCER
	('T4','T9','TV4','TV9'),	CALL TEE
	('S9','S4','SV','SW','SC'),	CALL SADDLE
	('SG','SX'),			CALL SPIRAL
	ENDUSING
	GOTO (ITEM), CONFIG_ERROR

GETITM,
	IF (LITMNO.EQ.'X'.OR.LITMNO.EQ.'CD'.OR.
&		(LITMNO.GE.'CR0'.AND.LITMNO.LE.'CR9') .OR.
&		(LITMNO.GE.'EDS0' .AND. LITMNO.LE.'EDS9') )
	BEGIN
	  USING LITMNO SELECT
	  ('X','CD'),		BEGIN
				  KEY = LITMNO(1,3)
				  KEY(4,4) = '0'
				END
	  ('CR0' thru 'CR9'),	KEY = LITMNO(1,4)
	  ('EDS0' THRU 'EDS9'),	KEY = LITMNO(1,9)
	  (),			KEY = LITMNO
	  ENDUSING
	  BSEND = ORGINV
	  XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,4,16,20,0,0,0,0)
	  GO TO (BADITM), SRCCTL
	  LOKCTL = 1
	  XCALL IO (1,INVMAS,IRC041,READ,LOKCTL)
	  TREC = IRC041
	  TONH = QTYONH
	  TONO = QTYONO
	  TCOM = QTYCOM
	  TREO = REOLVL
	END
	BSEND = ORGINV
	KEY = LITMNO
	XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,4,16,20,0,0,0,0)
	GO TO (BADITM), SRCCTL
	BSAVE = BSMID		;SAVE BSMID IN CASE TAB IS USED FOR NEXT ITEM
READIV,
	COL = 1
	LOKCTL = 0
	XCALL IO (1,INVMAS,IRC041,READ,LOKCTL)
	IF (LOKCTL.EQ.1) GO TO ITEM		;ABORT SELECTED
	LITMNO = ITEMNO
	SAVITM = ITEMNO
	XCALL W_DISP(WND_1, WD_POS,ROW,COL,ITEMNO)
	IF (LDAMPR) XCALL W_DISP(WND_1,WD_POS,ROW,COL+10,' DAMPER')

	XCALL W_DISP(WND_1, WD_POS,15,1, WD_CLR, WDC_LIN)
	IF (LITMNO.EQ.'???') GO TO ENTDES
	ROW2 = (ROW+1)

	IF (TDESCR .EQ. BLANKS)		;was desc created in configurator ?
	THEN	LDESCR = DESCR
	ELSE	LDESCR = TDESCR

	IF (LITMNO.EQ.'WR')
	BEGIN
	  LDESCR = DESCR
	  IF (DASH.OR.INCH) LDESCR(1,8) = WRANGL(1,7)		;;;
	  IF (DASH) LDESCR(DASH,DASH) = '/'		;;;
	  IF (INCH) LDESCR(INCH,INCH) = '"'		;;;
	END

	LSTOKT = STOCK
	LORDNO = OORDNO
	LLOC = OLOC


	XCALL W_DISP(WND_1, WD_POS, ROW2, 3, LDESCR)
	XCALL W_UPDT
	LCOST = AVGCST#1
	COL = 03
BADCHR,
	SAVROW = ROW
	ROW = ROW + 1
	CALL ACCEPT
	ROW = SAVROW
	IF (TCHAR.EQ.13) GOTO QNTITY	;RETURN TYPED -- ITEM & DESCRIPTION OK
	IF (TCHAR.EQ.09) GOTO TABNXT	;TAB TYPED -- RETREIVE NEXT ITEM
	IF (TCHAR.EQ.21) GOTO ENTDES	;CNTRL/U TYPED -- ENTER DESCRIPTION
	IF (TCHAR.EQ.23) CALL CLEAR1
	IF (TCHAR.EQ.23) ROW2 = ROW2 - 1
	IF (TCHAR.EQ.23) GOTO CLRDTA	;CNTRL/W TYPED -- CLEAR LINE
	GOTO BADCHR
TABNXT,
	INCR BSAVE
	LOKCTL = 1
	XCALL IO (2,ITMIDX,BSAVE,READ,LOKCTL)
	IF (ITMIDX.NE.BRACKS) GO TO READIV
	IF (IRC041.EQ.0) GO TO TABNXT
	XCALL OLMSG(WND_1, 23,'END OF FILE ... ENTER ITEM NUMBER',2)
	BSAVE = 1			;RESTORE POINTER TO BEGINNING
	GOTO ITEM
LSTITM,
	ENTRY = SAVITM
	XCALL W_DISP(WND_1, WD_POS,ROW,1,SAVITM)
	RETURN
ACCEPT,
	XCALL FLAGS (00010000,1)
;;;	XCALL W_DISP(WND_1, WD_POS,ROW,COL,0,'\',1)
;;;	ACCEPT (15,TCHAR)
	XCALL W_DISP(WND_1, WD_ACCEPT, TCHAR)
	IF (TCHAR.EQ.10) GOTO ACCEPT
	IF (SYSTEM.NE.1 .AND. TCHAR.EQ.13) ACCEPT (15,DCHAR)
	XCALL FLAGS (00010000,0)
	RETURN
ENTDES,
	SAVROW = ROW
	ROW = ROW + 1
;;;	IF (ROW.EQ.20) XCALL W_DISP(WND_1, WD_POS,22,1,1,'\',1)
	CTL (4,14) = '03,30,01,A '
	CALL INPUT
	IF (INXCTL) CALL CLEAR2
	IF (INXCTL.AND.LITMNO.NE.'???') ROW2 = ROW2 - 1
	GO TO (CLRDTA), INXCTL
	LDESCR = ENTRY
	XCALL W_DISP(WND_1, WD_POS,ROW,3,WD_CLR, WDC_LIN ,LDESCR)
	XCALL W_UPDT
	ROW = ROW - 1
;;;
	IF (LITMNO.EQ.'M              ')
	BEGIN
	  ROW2 = ROW2 + 1
	  LQTYOR = 1
	  LPRICE =
	  LUOFM = 
	  LDISC = 
	  GOTO ISLNOK
	END

QNTITY,
	CTL (4,14) = '44,05,00,#-'		;;;ALLOW NEGATIVE QUANTITY
	CALL INPUT
	IF (INXCTL.AND.LITMNO.NE.'???') ROW2 = ROW2 - 1
	IF (INXCTL) CALL CLEAR1
	GO TO (CLRDTA), INXCTL
	CALL DEFLT1
	LQTYOR = ENTRY
	AQTYONH = QTYONH,NUMASK
	AQTYCOM = QTYCOM,NUMASK
	AQTYONO = QTYONO,NUMASK
;;;	DECMAL = QTYONH-QTYCOM+QTYONO			;SSQ 6-13-97
	DECMAL = QTYONH-QTYCOM+QTYONO-REOLVL		;SSQ 6-13-97
	IF (LITMNO.EQ.'X'.OR.LITMNO.EQ.'CD'.OR.
&		(LITMNO.GE.'CR0'.AND.LITMNO.LE.'CR9') .OR.
&		(LITMNO.GE.'EDS0' .AND. LITMNO.LE.'EDS9') )
	BEGIN
	  AQTYONH = TONH,NUMASK
	  AQTYCOM = TCOM,NUMASK
	  AQTYONO = TONO,NUMASK
;;;	  DECMAL = TONH-TCOM+TONO
	  DECMAL = TONH-TCOM+TONO-TREO
	END
	IF (STOCK.EQ.'S'.AND.LLOC.EQ.'O'.AND.LQTYOR.GT.DECMAL)
	BEGIN
	  ANETAV = DECMAL, NUMASK
	  XCALL W_DISP(WND_1, WD_POS,23,1,OUTSTK)
	  XCALL OLMSG (WND_1, 23,'WARNING - POSSIBLE OUT OF STOCK SITUATION',2)
	  XCALL W_DISP(WND_1, WD_POS,23,1, WD_CLR, WDC_EOW)
	END
	IF (LITMNO.EQ.'???') GO TO OVRPRC
	CTR = 1
PRICE1,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 5-16-97 SSQ: QTY BREAK PRICING:
	LPRICE = PRICE		;DEFAULT TO ITMMAS PRICE

	CLEAR TBL_KEY
	TBLCOD = 'I1'
	I1_KEY = LITMNO
	XCALL ISIO (CHN182,COPTBL,TBL_KEY,READ,LOKCTL)
	IF (LOKCTL .EQ. 0)
	   BEGIN
	   FOR I FROM 1 THRU NUMITM
		BEGIN
		IF (LQTYOR.LT.I1_QTY(I))
		    BEGIN
		    LPRICE = I1_PRICE(I)
		    EXITLOOP
		    END
		END
	   END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;===================================================
; ------- Configuration Price Adjustments -------
;;;
;	ADDED FROM R-ANGLE PROCESSING
;;;
	USING LITMNO SELECT
	('WR'),		BEGIN		;R_ANGLE
			IF (DASH)
			   BEGIN
			   WTPIN = ((WEIGHT*1000)/120)
			   DPND = (WTPIN * RA_SIZE)#3
			   PRPPN = ((PRICE(CTR)*1000)/WEIGHT)
			   LPRICE = (PRPPN * DPND)#3
			   END
			IF (INCH)
			   BEGIN
			   WTPIN = ((WEIGHT*10000)/120)/2
			   DPND = (WTPIN * RA_SIZE)#3
			   PRPPN = ((PRICE(CTR)*1000)/WEIGHT)
			   LPRICE = (PRPPN * DPND)#4
			   END
			END
	('SP','SPV'),	BEGIN	;SPIRAL PIPE
	  		LPRICE = (SP_SIZE * PRICE(1))
			LUOFM = 'EA'
			END
	('T4','T9','TV4','TV9'),	LPRICE = CONFIG_PRICE
	('R20'  THRU  'R26'),		LPRICE = CONFIG_PRICE
	('RV20' THRU 'RV26'),		LPRICE = CONFIG_PRICE
	('S9','S4','SV','SW','SC'),	LPRICE = CONFIG_PRICE
	ENDUSING

;-------- Add in damper prices...
	IF (LDAMPR)
&		FOR I FROM 1 THRU 3 LPRICE = LPRICE + DAMPER_PRICE(I)

	CTL (4,8) = '57,08'
	DECMAL = LPRICE
	CALL DSP3DP
	IF (BADTPR) GOTO BADTPR
	CTR = 1	
	SAVEL = CTR
PREPRC,
	COL = 56
	CALL ACCEPT
	IF (TCHAR.EQ.13) GO TO DISCNT
	IF (TCHAR.EQ.09.OR.TCHAR.EQ.127) GO TO OVRPRC
	IF (TCHAR.NE.23) GO TO PREPRC
	CALL CLEAR1
	ROW2 = ROW2 - 1
	GO TO CLRDTA
DEFLT1,
	IF (ENTRY.EQ.BLANKS) ENTRY(1,1) = '1'
	XCALL W_DISP(WND_1, WD_POS,ROW,COL,ENTRY(1,1))
	XCALL W_UPDT
	RETURN
;
;	BAD TEE PRICE
;
BADTPR,
	XCALL W_DISP(WND_1, WD_POS,24,1,'INVALID PRICING FOR TEE ... DO YOU WANT TO OVERRIDE <Y/N> ? ')
	XCALL WINPT (WND_1,24,61,01,01,'YN',ENTRY,INXCTL)
	IF (INXCTL.NE.1) GOTO ITEM
;;;	IF (INXCTL.NE.1) GOTO BADTEE
OVRPRC,
	CTL (4,14) = '57,08,01,# '
	CALL INPUT
	DECMAL = ENTRY		
	CALL DSP3DP		
	IF (INXCTL.AND.LITMNO.NE.'???') ROW2 = ROW2 - 1
	IF (INXCTL) CALL CLEAR1
	GO TO (CLRDTA), INXCTL

;;; SSQ 10-30-96
;;; Flag if user changes price...

	IF (ORIG_PRICE .EQ. 0) ORIG_PRICE=LPRICE
	LPRICE = ENTRY
	IF (LPRICE .NE. ORIG_PRICE)
	THEN 	LCPFLG = 1
	ELSE	CLEAR LCPFLG

;;; SSQ 10-30-96

	IF (LITMNO.NE.'???') GO TO DISCNT
	ROW = ROW + 2
ENTCST,
	XCALL W_DISP(WND_1, WD_POS,ROW,1,WD_CLR, WDC_LIN)
	XCALL W_DISP(WND_1, WD_POS,ROW,45,'UNIT OF MEASURE:')
	CTL (4,14) = '62,02,00,A '		;;;
	CALL INPUT
	IF (INXCTL) CALL CLEAR3
	GO TO (CLRDTA), INXCTL
	IF (ENTRY.EQ.BLANKS)			;;;
	BEGIN					;;;
	  ENTRY(1,2) = 'EA'			;;;
	  XCALL W_DISP(WND_1, WD_POS,ROW,COL,ENTRY(1,2))
	END					;;;
	LUOFM = ENTRY				;;;
	ROW = ROW - 2
	GO TO DISCNT
DISCNT,
	LODISC = ODISC
	IF (PRDCAT.EQ.BLANKS) GOTO NODISC
	CTR =
DISCT2,
	INCR CTR
	IF (CTR.GT.PMAX.OR.PCODES(CTR).EQ.BLANKS) GOTO DISCT3
	IF (PCODES(CTR).NE.PRDCAT) GOTO DISCT2
	LDISC = PDISCS(CTR)
	GOTO TAKDIS
DISCT3,
	CTR =
DISCT4,
	INCR CTR
	IF (CTR.GT.DMAX.OR.DCODES(CTR).EQ.BLANKS) GOTO NODISC
	IF (DCODES(CTR).NE.PRDCAT) GOTO DISCT4
	LDISC = DDISCS(CTR)
	GOTO TAKDIS
NODISC,
	LDISC =
TAKDIS,
	CTL (4,8) = '67,02'
	DECMAL = LDISC
	CALL DSPNUM
	COL = 66
	CALL ACCEPT
	IF (TCHAR.EQ.13) GOTO EXTPRC
	CTL (4,14) = '67,02,00,# '
	CALL INPUT
	IF (INXCTL.AND.LITMNO.NE.'???') ROW2 = ROW2 - 1
	IF (INXCTL) CALL CLEAR1
	GO TO (CLRDTA), INXCTL
	LDISC = ENTRY
EXTPRC,
	DECMAL = ((LQTYOR)*LPRICE)#1				;;;
&		-(((LQTYOR*LPRICE)#1*LDISC)#2)			;;;
	EXEPRC = DECMAL - ((DECMAL*LODISC)#2)
	IF (EXEPRC.GE.100000000.OR.(RUNTOT+EXEPRC).GE.100000000) GO TO TOOBIG
	ALPHA = EXEPRC,'ZZ,ZZZ.XX-'
	XCALL W_DISP(WND_1, WD_POS,ROW,70,ALPHA)
	XCALL W_UPDT

	IF (LITMNO.EQ.'???') ROW2 = ROW2 + 1
ISLNOK,
	CNGCTL = 2
	XCALL WANCN(WND_1, 16, CNGCTL, WHATNO)
;;;	XCALL ANYCN(CNGCTL,WHATNO)
	IF (LITMNO.EQ.'???') GO TO ANYCN2
ANYCN1,
	IF (CNGCTL) XCALL W_DISP(WND_1, WD_POS,ROW2,1,WD_CLR, WDC_LIN)
	IF (CNGCTL) ROW2 = ROW2 - 1
	ROW = ROW2
	GO TO (LINEOK), CNGCTL+1
	EXEPRC =
	CALL CLEAR1
	GO TO CLRDTA
ANYCN2,
	ROW2=ROW2 + 1
	XCALL W_DISP(WND_1, WD_POS,ROW2,1,WD_CLR, WDC_LIN)
	ROW2 = ROW2 - 1
	GO TO ANYCN1
RUNQTY,
	XCALL W_DISP(WND_1, WD_POS,14,1,WD_CLR, WDC_EOW ,'RUNNING QTY:')
	CTL = '14,14,06'
	DECMAL = RUNQTY
	CALL DSPNUM
	XCALL W_DISP(WND_1, WD_POS,14,55,'RUNNING TOTAL:')
	CTL = '14,70,08'
	DECMAL = RUNTOT
	CALL DSPDLR
	RETURN
LINEOK,
	SAVEL = 1
	LORDNO = OORDNO
	LLOC = OLOC
							;;;ON LINE ITEMS
	IF (LITMNO.EQ.'M              ') GOTO NOST2	;;;
	LPRDCD = PRDCAT
	IF (LITMNO.NE.'???'.AND.LUOFM.EQ.BLANKS) LUOFM = SUOFM		;;;
	RUNQTY = RUNQTY + LQTYOR - LQTYBO
	RUNTOT = RUNTOT + EXEPRC
	IF (TAXFLG.NE.BLANKS.AND.TXFLAG.EQ.'Y') LTXFLG = 1
	LITMWT = WEIGHT
NOST2,
	CALL RUNQTY
	LINSEQ = ORDSEQ
	ORDSEQ = ORDSEQ + 1
	LDEPT = USRDEF
	LMSQ1 = CLVL1
	LMSQ2 = CLVL2
	LMSQ3 = CLVL3

ADDLIN,
	LOKCTL = 1
	XCALL ISIO (5,ORDLIN,ORDKEY,STORE,LOKCTL)
	IF (LOKCTL.EQ.4) GO TO DUPLIC
	IF (LOKCTL.EQ.5) GO TO FULL
;----------------------------------------------------
	XCALL W_AREA(WND_2, WA_SCROLL, WAS_UP, 1)
	CLEAR W2_LINE
	W2_ITEM = LITMNO
	W2_DESCR = LDESCR
	W2_QTY = LQTYOR,	'ZZZZZ'
	W2_PRICE = LPRICE,	'ZZZ,ZZX.XXX'
	W2_EXT = EXEPRC,	'ZZZ,ZZX.XX'
	XCALL W_DISP(WND_2, WD_POS, 14, 1, W2_LINE)
	XCALL W_UPDT
;----------------------------------------------------

	IF (LITMNO.EQ.'M              '.OR.LITMNO.EQ.'???') GOTO BEGIN
COMMIT,
	IF (STOCK.EQ.'S'.AND.OLOC.EQ.'O')
	BEGIN
	  IF (LITMNO.EQ.'X'.OR.LITMNO.EQ.'CD'.OR.
&		(LITMNO.GE.'CR0'.AND.LITMNO.LE.'CR9') .OR.
&		(LITMNO.GE.'EDS0' .AND. LITMNO.LE.'EDS9') )
	  BEGIN
	    USING LITMNO SELECT
	    ('X','CD'),		BEGIN
				  KEY = LITMNO(1,3)
				  KEY(4,4) = '0'
				END
	    ('CR0' thru 'CR9'),	KEY = LITMNO(1,4)
	    ('EDS0' THRU 'EDS9'), KEY = LITMNO(1,9)
	    (),			KEY = LITMNO
	    ENDUSING
	    BSEND = ORGINV
	    XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,4,16,20,0,0,0,0)
	    IF (SRCCTL)
	    BEGIN
	      XCALL OLMSG(WND_1, 23,'CANNOT FIND ITEM TO ALLOCATE INVENTORY',2)
	      UNLOCK 1
	      GOTO BEGIN
	    END
	    LOKCTL = 1
	    XCALL IO (1,INVMAS,IRC041,READ,LOKCTL)
	  END
	  QTYCOM = QTYCOM + LQTYOR
	  LOKCTL = 1
	  XCALL IO (1,INVMAS,IRC041,WRITE,LOKCTL)

;;;	xcall comlg(litmno, itemno, lqtyor, lordno, lloc, "scrn2")
	  
	  IF (IITMNO.NE.ITEMNO) 
	  BEGIN
;;;	    XCALL W_DISP(WND_1, WD_POS,24,1,1,'...   WARNING: ITMMAS ITMIDX MISMATCH - CALL SUPPORT !!!!',1)
	    DISPLAY (15,7,7,7)
	    DO XCALL INPUT (24,1,3,0,'A ',ENTRY,INXCTL,1) UNTIL (ENTRY.NE.'DCS')
	  END
	END
	GOTO BEGIN		;;;
DUPLIC,
	XCALL OLMSG
&	(WND_1, 23,'**RECORD NOT ADDED** ALREADY ADDED BY ANOTHER USER',1)
	GO TO BEGIN
FULL,
	XCALL OLMSG
&	(WND_1, 23,'**RECORD NOT ADDED**THE "ORDLIN" FILE IS NOW FULL',1)
	FULL = 1
	RETURN
TOOBIG,
	XCALL OLMSG(WND_1, 23,'TOTAL SALE OVER 1 MILLION DOLLARS',1)
	EXEPRC =
	CALL CLEAR1
	ROW2 = ROW2 - 1
	GO TO CLRDTA
BADITM,
	XCALL OLMSG(WND_1, 23,'ITEM NOT ON FILE',1)
	GO TO ITEM
CLRDTA,
	XCALL W_DISP(WND_1, WD_POS, 15, 1, WD_CLR, WDC_LIN)
	XCALL W_DISP(WND_1, WD_POS, ROW, 1, WD_CLR, WDC_LIN)
	ORDLIN =
	LORDNO = OORDNO
	GO TO BEGIN
SHIFT,
;;;	XCALL W_DISP(WND_1, WD_POS,24,1,0,'\',1)
;;;	XCALL W_DISP(WND_1, WD_POS,10,10,-1,'CNTRL',1)
;;;	XCALL W_DISP(WND_1, WD_POS,10,0,-1,'CNTRL',1)
;;;	XCALL W_DISP(WND_1, WD_POS,20,1,1,'\',1)
;;;	ROW2 = 18
;;;	XCALL OE2(ORDNOA,OCUSNM,ODISC,V)
;;;	XCALL W_DISP(WND_1, WD_POS,5,1,1,'\',1)
;;;	XCALL W_DISP(WND_1, WD_POS,21,1,1,'\',1)
;;;	CALL RUNQTY
	RETURN
ENDITM,
	XCALL W_PROC(WP_DELETE, WND_1)
;write memos to ordlin here...
	CALL WRITE_MEMOS
	RETURN

WRITE_MEMOS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF (F1_NUM .LE. 0) GOTO WRITE_F2
	FOR I FROM 1 THRU F1_NUM
		BEGIN
		CLEAR ORDLIN
		LORDNO = OORDNO
		LINSEQ = 0
		LITMNO = 'MM_F1'
		LMSQ1 = I
		LDESCR = F1_MEMOS(I)
		LTYPE = 'M'
		STORE (CHN045, ORDLIN, ORDKEY)
		END
WRITE_F2,
	IF (F2_NUM .LE. 0) GOTO WRITE_F3
	FOR I FROM 1 THRU F2_NUM
		BEGIN
		CLEAR ORDLIN
		LORDNO = OORDNO
		LINSEQ = 0
		LITMNO = 'MM_F2'
		LMSQ2 = I
		LDESCR = F2_MEMOS(I)
		STORE (CHN045, ORDLIN, ORDKEY)
		END
WRITE_F3,
	FOR I FROM 1 THRU F3_NUM
		BEGIN
		CLEAR ORDLIN
		LORDNO = OORDNO
		LINSEQ = 0
		LITMNO = 'MM_F3'
		LMSQ3 = I
		LDESCR = F3_MEMOS(I)
		STORE (CHN045, ORDLIN, ORDKEY)
		END

	RETURN
;-----------------------------------------------------------------

;=================================================================
INPUT,
	XCALL WINPT(W_ID,ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,F_KEY)
;;;	XCALL INPUT(ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,1)
		;"V" REFERENCE REMOVED FOR 24-LINE OPERATION
	RETURN
DSP3DP,				;;;
	OPTION = 4		;;;
	GOTO CALDSP		;;;
DSPNUM,
	OPTION = 1
	GOTO CALDSP
DSPDTE,
	OPTION = 2
	GOTO CALDSP
DSPDLR,
	OPTION = 3
CALDSP,
	XCALL WDSPL(WND_1, MAX, ROW, COL, DECMAL, OPTION)
;;;	XCALL DSPLY(MAX,ROW,COL,DECMAL,OPTION,1)
	RETURN
CLEAR1,
	ROWX = ROW + 2
	XCALL W_DISP(WND_1, WD_POS, ROWX,1, WD_CLR, WDC_LIN)
	ROWX = ROW + 1
	XCALL W_DISP(WND_1, WD_POS,ROWX,1, WD_CLR, WDC_LIN)
	XCALL W_DISP(WND_1, WD_POS,ROW,1, WD_CLR, WDC_LIN)
	RETURN
CLEAR2,
	ROWX = ROW + 1
	XCALL W_DISP(WND_1, WD_POS,ROWX,1, WD_CLR, WDC_LIN)
	XCALL W_DISP(WND_1, WD_POS,ROW,1, WD_CLR, WDC_LIN)
	ROWX = ROW - 1
	XCALL W_DISP(WND_1, WD_POS,ROWX,1, WD_CLR, WDC_LIN)
	RETURN
CLEAR3,
	XCALL W_DISP(WND_1, WD_POS,ROW,1, WD_CLR, WDC_LIN)
	ROWX = ROW - 1
	XCALL W_DISP(WND_1, WD_POS,ROWX,1, WD_CLR, WDC_LIN)
	ROWX = ROW - 2
	XCALL W_DISP(WND_1, WD_POS,ROWX,1, WD_CLR, WDC_LIN)
	RETURN

;====================================================
;----------- PRODUCE CONFIGURATOR ROUTINES ----------
;====================================================

R_ANGLE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR CONFIG_ERROR
	WRANGL = LITMNO(4,15)
	XCALL INSTR (1,WRANGL,'-',DASH)
	XCALL INSTR (1,WRANGL,'+',INCH)	;SSQ 6-1-98

	IF (DASH.EQ.0.AND.INCH.EQ.0) GOTO R_ANGLE_ERROR		;NEITHER
	IF (DASH.NE.0.AND.INCH.NE.0) GOTO R_ANGLE_ERROR		;BOTH
	IF (WRANGL(8,12).NE.BLANKS)  GOTO R_ANGLE_ERROR
	LITMNO(4,15) = 

	TDESCR = WRANGL(1,7)	
	IF (DASH) 
		BEGIN
		 ONERROR R_ANGLE_ERROR
		TDESCR(DASH,DASH) = '/'
		DSIZ = WRANGL(1,DASH-1)
		DECMAL = WRANGL(DASH+1,DASH+3)
		 OFFERROR
		RA_SIZE = DSIZ + DECMAL
		IF (DECMAL .LE. 0) GOTO R_ANGLE_ERROR	;3-26-99 SSQ
		END
	IF (INCH) 
		BEGIN
		TDESCR(INCH,INCH) = '"'
		 ONERROR R_ANGLE_ERROR
		RA_SIZE = WRANGL(1,INCH-1)
		 OFFERROR
		IF (WRANGL(INCH+1,12) .NE. BLANKS) GOTO R_ANGLE_ERROR	;2-17-99
		END

	RETURN

R_ANGLE_ERROR,
	OFFERROR
	XCALL OLMSG(WND_1, 23,'INVALID R-ANGLE PART NUMBER',1)
	CONFIG_ERROR = 1
	RETURN
;----------------------------------------------------------

REDUCER,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR CONFIG_ERROR

	IF (LITMNO.EQ.'RV') LITMNO = LITMNO(2,15)
	TEEDAT =

	A_GUAGE = LITMNO(2,3)
	USING A_GUAGE SELECT
	('20','22','24','26'),	TGUAG = A_GUAGE
	(),			GOTO REDUCER_ERROR
	ENDUSING

	IF (TGUAG.EQ.26.AND.LITMNO.EQ.'V') GOTO REDUCER_ERROR
	TMAIN = LITMNO(4,5)		;MAIN
	TREDU = LITMNO(6,7)		;REDUCER (PRICED BY MAIN SIZE)
	IF (TREDU.GT.TMAIN) GOTO REDUCER_ERROR
	TBRAN =
	TDESCR = 'GALV REDUCER '
	IF (LITMNO.EQ.'V') TDESCR(1,4) = 'PVS '
	TDESCR(14,15) = TGUAG
	TDESCR(16,18) = 'ga '
	TDESCR(19,23) = 'xx/xx'
	TDESCR(19,20) = TMAIN
	TDESCR(22,23) = TREDU
	LITMNO(4,15) =
	IF (LITMNO.EQ.'V') LITMNO(2,4) = LITMNO(1,3)
	IF (LITMNO.EQ.'VV') LITMNO(1,1) = 'R'

; get price from table...
	CLEAR LPRICE, BADTPR 

	IF (LITMNO.EQ.'RV')	
	THEN	OPEN (9,I,'SMC:TVPRIC.SMC')
	ELSE	OPEN (9,I,'SMC:TPRICE.SMC')

	IF (TMAIN.GT.TREDU)
	  BEGIN
	    LOKCTL = 1
	    IF (TGUAG.EQ.26) XCALL IO (9,TPRICE,13,READ,LOKCTL)
	    IF (TGUAG.EQ.24) XCALL IO (9,TPRICE,14,READ,LOKCTL)
	    IF (TGUAG.EQ.22) XCALL IO (9,TPRICE,15,READ,LOKCTL)
	    IF (TGUAG.EQ.20) XCALL IO (9,TPRICE,16,READ,LOKCTL)
	    IF (ARRAY(TMAIN).EQ.0) XCALL OLMSG(WND_1, 23,'NO MAIN PRICE ON FILE FOR THIS ITEM',1)
	    IF (TMAIN.LE.80) LPRICE = LPRICE + ARRAY(TMAIN)
	    IF (ARRAY(TMAIN).EQ.0.OR.TMAIN.GT.80) BADTPR = 1
	  END

	LPRICE = LPRICE * 10
	IF (LPRICE.EQ.0) XCALL OLMSG(WND_1, 23,'NO PRICING ON FILE FOR THIS ITEM',1)
	IF (LITMNO.NE.'RV' .AND. TGUAG.EQ.20) PRDCAT = '10'
	CLOSE 9

	CONFIG_PRICE = LPRICE
	RETURN

REDUCER_ERROR,
	CONFIG_ERROR = 1
	XCALL OLMSG(WND_1, 23,'INVALID ITEM NUMBER FOR REDUCER',2)
	RETURN
;----------------------------------------------------------------

TEE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	IF (LITMNO.EQ.'TV') LITMNO = LITMNO(2,15)
	TEEDAT =

	A_GUAGE = LITMNO(3,4)		;GAUGE
	USING A_GUAGE SELECT
	('20','22','24','26'),	TGUAG = A_GUAGE
	(),			GOTO REDUCER_ERROR
	ENDUSING

	IF (TGUAG.EQ.26.AND.LITMNO.EQ.'V') GOTO TEE_ERROR
	TMAIN = LITMNO(5,6)		;MAIN
	TREDU = LITMNO(7,8)		;REDUCER (PRICED BY MAIN SIZE)
	IF (TREDU.GT.TMAIN) GOTO TEE_ERROR
	TBRAN = LITMNO(9,10)		;BRANCH
	IF (TBRAN.GT.TMAIN) GOTO TEE_ERROR
	TDESCR = 'GALV TEE '
	IF (LITMNO.EQ.'V') TDESCR(1,4) = 'PVS '
	IF (LITMNO(2,2).EQ.'9') TDESCR(10,12) = '90 '
	IF (LITMNO(2,2).EQ.'4') TDESCR(10,12) = '45 '
	TDESCR(13,14) = TGUAG
	TDESCR(15,17) = 'ga '
	TDESCR(18,26) = 'xx/xx/xx '
	TDESCR(18,19) = TMAIN
	TDESCR(21,22) = TREDU
	TDESCR(24,25) = TBRAN
	LITMNO(3,15) =
	IF (LITMNO.EQ.'V') LITMNO(2,3) = LITMNO(1,2)
	IF (LITMNO.EQ.'VV') LITMNO(1,1) = 'T'

; look up price in table...
	CLEAR LPRICE, BADTPR 

	IF (LITMNO .EQ. 'TV')
	THEN	OPEN (9,I,'SMC:TVPRIC.SMC')
	ELSE	OPEN (9,I,'SMC:TPRICE.SMC')

	IF (TMAIN)
	  BEGIN
	    LOKCTL = 1
	    IF (TGUAG.EQ.26) XCALL IO (9,TPRICE,1,READ,LOKCTL)
	    IF (TGUAG.EQ.24) XCALL IO (9,TPRICE,2,READ,LOKCTL)
	    IF (TGUAG.EQ.22) XCALL IO (9,TPRICE,3,READ,LOKCTL)
	    IF (TGUAG.EQ.20) XCALL IO (9,TPRICE,4,READ,LOKCTL)
	    IF (ARRAY(TMAIN).EQ.0) XCALL OLMSG(WND_1, 23,'NO MAIN PRICE ON FILE FOR THIS ITEM',1)
	    IF (TMAIN.LE.80) LPRICE = LPRICE + ARRAY(TMAIN)
	    IF (ARRAY(TMAIN).EQ.0.OR.TMAIN.GT.80) BADTPR = 1
	  END

	IF (TMAIN.GT.TREDU)
	  BEGIN
	    LOKCTL = 1
	    IF (TGUAG.EQ.26) XCALL IO (9,TPRICE,13,READ,LOKCTL)
	    IF (TGUAG.EQ.24) XCALL IO (9,TPRICE,14,READ,LOKCTL)
	    IF (TGUAG.EQ.22) XCALL IO (9,TPRICE,15,READ,LOKCTL)
	    IF (TGUAG.EQ.20) XCALL IO (9,TPRICE,16,READ,LOKCTL)
	    IF (ARRAY(TMAIN).EQ.0) XCALL OLMSG(WND_1, 23,'NO MAIN PRICE ON FILE FOR THIS ITEM',1)
	    IF (TMAIN.LE.80) LPRICE = LPRICE + ARRAY(TMAIN)
	    IF (ARRAY(TMAIN).EQ.0.OR.TMAIN.GT.80) BADTPR = 1
	  END

	IF (TBRAN.AND.(LITMNO.EQ.'T9'.OR.LITMNO.EQ.'TV9'))
	  BEGIN
	    LOKCTL = 1
	    IF (TGUAG.EQ.26) XCALL IO (9,TPRICE,5,READ,LOKCTL)
	    IF (TGUAG.EQ.24) XCALL IO (9,TPRICE,6,READ,LOKCTL)
	    IF (TGUAG.EQ.22) XCALL IO (9,TPRICE,7,READ,LOKCTL)
	    IF (TGUAG.EQ.20) XCALL IO (9,TPRICE,8,READ,LOKCTL)
	    IF (ARRAY(TBRAN).EQ.0) XCALL OLMSG(WND_1, 23,'NO BRANCH PRICE ON FILE FOR THIS ITEM',1)
	    IF (TBRAN.LE.80) LPRICE = LPRICE + ARRAY(TBRAN)
	    IF (ARRAY(TBRAN).EQ.0.OR.TBRAN.GT.80) BADTPR = 1
	  END

	IF (TBRAN.AND.(LITMNO.EQ.'T4'.OR.LITMNO.EQ.'TV4'))
	  BEGIN
	    LOKCTL = 1
	    IF (TGUAG.EQ.26) XCALL IO (9,TPRICE,9,READ,LOKCTL)
	    IF (TGUAG.EQ.24) XCALL IO (9,TPRICE,10,READ,LOKCTL)
	    IF (TGUAG.EQ.22) XCALL IO (9,TPRICE,11,READ,LOKCTL)
	    IF (TGUAG.EQ.20) XCALL IO (9,TPRICE,12,READ,LOKCTL)
	    IF (ARRAY(TBRAN).EQ.0) XCALL OLMSG(WND_1, 23,'NO BRANCH PRICE ON FILE FOR THIS ITEM',1)
	    IF (TBRAN.LE.80) LPRICE = LPRICE + ARRAY(TBRAN)
	    IF (ARRAY(TBRAN).EQ.0.OR.TBRAN.GT.80) BADTPR = 1
	  END

	IF (LITMNO.NE.'TV' .AND. TGUAG.EQ.20) PRDCAT = '10'
	LPRICE = LPRICE * 10
	CONFIG_PRICE = LPRICE 

	IF (LPRICE.EQ.0) XCALL OLMSG(WND_1,23,'NO PRICING ON FILE FOR THIS ITEM',1)

	CLOSE 9	
	RETURN

TEE_ERROR,
	CONFIG_ERROR = 1
	XCALL OLMSG(WND_1, 23,'INVALID ITEM NUMBER FOR TEE',2)
	RETURN
;----------------------------------------------------------------

SADDLE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	VINYL = $FALSE
	USING KITMNO SELECT
	('SWV'),	BEGIN	;EDGE, VINYL
			SADDLE = KITMNO(4,15)
			TDESCR = '99"ON 99"90 26GA PVS SWDG SADD'
			VINYL = $TRUE
			LITMNO = KITMNO(1,4)
	  		OPEN (9,I,'SMC:SWVPRI.SMC')
			END
	('SCV'),	BEGIN	;CONICAL, VINYL
			SADDLE = KITMNO(3,15)
			TDESCR = '99"ON 99"90 26GA PVS CON/SADDL'
			VINYL = $TRUE
			LITMNO = KITMNO(1,4)
	  		OPEN (9,I,'SMC:SCVPRI.SMC')
			END
	('SW'),		BEGIN	;EDGE
			SADDLE = KITMNO(3,15)
			TDESCR = '99"ON 99"90 26GA SWEDGE SADDLE'
			LITMNO = KITMNO(1,3)
	  		OPEN (9,I,'SMC:SWPRIC.SMC')
			END
	('SV'),		BEGIN	;VINYL
			SADDLE = KITMNO(3,15)
			TDESCR = '99"ON 99"90 26GA PVS SADDLE   '
			VINYL = $TRUE
			LITMNO = KITMNO(1,3)
	  		OPEN (9,I,'SMC:SVPRIC.SMC')
			END
	('SC'),		BEGIN	;CONICAL
			SADDLE = KITMNO(3,15)
			TDESCR = '99"ON 99"90 26GA CONICAL SADDL'
			LITMNO = KITMNO(1,3)
	  		OPEN (9,I,'SMC:SCPRIC.SMC')
			END
	('S'),		BEGIN	;JUST PLAIN
			SADDLE = KITMNO(2,15)
			TDESCR = '99"ON 99"90 26GA SADDLE       '
			IF (SGUAG .EQ. '20') GOTO SADDLE_ERROR
			LITMNO = KITMNO(1,2)
	  		OPEN (9,I,'SMC:SPRICE.SMC')
			END
	(),		GOTO SADDLE_ERROR
	ENDUSING


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; check for "damper" code...
;;;	IF (STAR .EQ. '*')
;;;	THEN	BEGIN
;;;		SBRAN = ST_BRAN
;;;		SMAIN = ST_MAIN
;;;		LDAMPR = 1
;;;		END
;;;	ELSE	LDAMPR = 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; angle must be 90 or 45...
	USING SANGL SELECT
	('4'),	SANGL = '45'
	('9'),	SANGL = '90'
	(),	GOTO SADDLE_ERROR
	ENDUSING

; check for valid gauges...
	USING SGUAG SELECT
	('20','22','24','26'),	TGUAG = SGUAG
	(),			GOTO SADDLE_ERROR
	ENDUSING
; vinyl doesn't come in 26 ga.
	IF (VINYL .AND. TGUAG.EQ.26) GOTO SADDLE_ERROR

; check for valid branch length...
	USING SBRAN SELECT
;;;	('01' THRU '36'),	TBRAN = SBRAN
	('01' THRU '50'),	TBRAN = SBRAN	;SSQ 1-6-99
	(),			GOTO SADDLE_ERROR
	ENDUSING

; check for valid main length...
	USING SMAIN SELECT
	('00' THRU '99'),	TMAIN = SMAIN
	(),			GOTO SADDLE_ERROR
	ENDUSING
	IF (TBRAN .GT. TMAIN) GOTO SADDLE_ERROR

; insert dimensions and angle into description...
	TDESCR(1,2) = TBRAN,'XX'
	TDESCR(7,8) = TMAIN,'XX'
	TDESCR(10,11) = SANGL
	TDESCR(13,14) = SGUAG

; get price from table...

	CLEAR LPRICE, BADTPR
; at this point gauge has been validated to be 20,22,24,26.
; read TPRICE record as follows:
;     for angle = 90	for angle 45
;	26 = rec 5	26 = rec  9
;	24 = rec 6	24 = rec 10
;	22 = rec 7	22 = rec 11
;	20 = rec 8	20 = rec 12

	USING TGUAG SELECT
	(26),	T_REC = 5
	(24), 	T_REC = 6
	(22),	T_REC = 7
	(20),	T_REC = 8
	ENDUSING

	IF (SANGL .EQ. '45') T_REC = T_REC + 4
	LOKCTL = 1
	XCALL IO (9,TPRICE,T_REC,READ,LOKCTL)

	IF (ARRAY(TBRAN).EQ.0) 
&		XCALL OLMSG(WND_1,23,'NO BRANCH PRICE ON FILE FOR THIS ITEM',1)
	IF (TBRAN.LE.80) LPRICE = LPRICE + ARRAY(TBRAN)

	LPRICE = LPRICE * 10
	IF (LPRICE.EQ.0) XCALL OLMSG(WND_1,23,'NO PRICING ON FILE FOR THIS ITEM',1)
	IF ((LITMNO.NE.'SV'.AND.LITMNO.NE.'SWV'.AND.LITMNO.NE.'SCV')
&		.AND.TGUAG.EQ.20) PRDCAT = '10'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;	IF (LDAMPR)
;;;	THEN	BEGIN
;;;		CLOSE 9
;;;		OPEN (9,I,'SMC:SDPRIC.SMC')
;;;		XCALL IO (9,TPRICE,1,READ,LOKCTL)
;;;		IF(TBRAN.LE.80) DAMPER_PRICE = ARRAY(TBRAN)*10
;;;		END
;;;	ELSE	CLEAR DAMPER_PRICE
	CLOSE 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;	CONFIG_PRICE = LPRICE + DAMPER_PRICE
	CONFIG_PRICE = LPRICE 

	RETURN

SADDLE_ERROR,
	CLOSE 9
	CONFIG_ERROR = 1
	XCALL OLMSG(WND_1, 23,'INVALID ITEM NUMBER FOR SADDLE',2)
	RETURN
;----------------------------------------------------------------

SPIRAL,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF (KITMNO(7,7).EQ.'+')		;PROCESS INCHES
	THEN	BEGIN
		 ONERROR SPIRAL_ERROR
		INCH = KITMNO(8,10)
		 OFFERROR
		TDESCR = '__"-__GA X ___"LONG SPIRL ____'
		TDESCR(12,14) = INCH,'ZZX'
		DPND = (INCH*100) / 12
		IF (DPND(5,6).NE.0) 
		THEN DSIZ = DPND(1,4) + 1 
		ELSE DSIZ = DPND(1,4)
		END
	ELSE	BEGIN
		INCH = 
		 ONERROR SPIRAL_ERROR
		DSIZ = KITMNO(7,8)
		 OFFERROR
		TDESCR = '__"-__GA X __''SPIRAL PIPE ____'
		TDESCR(12,13) = DSIZ,'ZX'
		DSIZ = KITMNO(7,8)
		END

	IF (DSIZ.GT.30) GOTO SPIRAL_ERROR

	TDESCR(1,2) = KITMNO(3,4)	;DIA
	TDESCR(5,6) = KITMNO(5,6)	;GA
	IF (KITMNO.EQ.'SG') 
	BEGIN
	  LITMNO = 'SP'
	  LITMNO(3,4) = KITMNO(3,4)	;DIA
	  LITMNO(5,6) = '10'		;LEN
	  LITMNO(7,8) = KITMNO(5,6)	;GA
	  TDESCR(27,30) = 'GALV'
	END
	IF (KITMNO.EQ.'SX')
	BEGIN
	  LITMNO = 'SPV'
	  LITMNO(4,5) = KITMNO(3,4)	;DIA
	  LITMNO(6,7) = '10'		;LEN
	  LITMNO(8,9) = KITMNO(5,6)	;GA
	  TDESCR(27,30) = 'PVS '
	END

	SP_SIZE = DSIZ
	RETURN

SPIRAL_ERROR,
	OFFERROR
	CONFIG_ERROR = 1
	XCALL W_DISP(WND_1, WD_POS,23,1,WD_CLR, WDC_LIN)
	DISPLAY (15,'ITEM CODE ENTERED: ',KITMNO,     '/ ITEM CODE CALCULATED: ',LITMNO      )
	XCALL OLMSG(WND_1,23,'INVALID ITEM NUMBER FOR SPIRAL',2)
	RETURN
;----------------------------------------------------------------

FIND_DAMPER,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR LDAMPR, BAD_DIGIT

	PARTNO = LITMNO

	FOR I FROM 1 THRU 3	CLEAR DAMPER_PRICE(I)

	MAXFLEN = %TRIM(PARTNO)
	FOR I FROM 1 THRU 3
		BEGIN
		XCALL INSTR(1, PARTNO, "*", FL)
		IF (.NOT. FL) 		EXITLOOP
		PARTNO(FL, MAXFLEN) = PARTNO(FL+1, MAXFLEN)
		CALL D_SIZE
		IF (BAD_DIGIT)
			BEGIN
			XCALL OLMSG(WND_1,23,'damper configuration',2)
			RETURN
			END
		END

	LITMNO = PARTNO
	RETURN

D_SIZE,	;---------------------------------------
	CLEAR BAD_DIGIT

	ONERROR BADDIG
	DAMP = PARTNO(FL, FL+1)
	OFFERROR

;check damper price...
	CLOSE 9
	OPEN (9,I,'SMC:SDPRIC.SMC')
	XCALL IO (9,TPRICE,1,READ,LOKCTL)
	IF(DAMP.LE.80) 
	THEN	DAMPER_PRICE(I) = ARRAY(DAMP)*10
	ELSE	CLEAR DAMPER_PRICE(I)

	CLOSE 9
	IF (DAMPER_PRICE(I) .LE. 0)
		BEGIN
		XCALL OLMSG(WND_1,23,'Zero or missing damper price',2)
		GOTO BADDIG
		END
	LDAMPR = 1
	RETURN
BADDIG,
	CLEAR DAMPER_PRICE(I)
	BAD_DIGIT = 1
	CLEAR LDAMPR
	RETURN
;----------------------------------------------------------------
;;; FUNCTION KEY WINDOWS.....

F1_POP,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;	XCALL W_DISP(WND_1, WD_POS, 16,1, 'LEVEL-1:')
	XCALL WINPT(WND_M, 1, 12, 30, 00, 'AE', ENTRY, INXCTL, F_KEY)
	USING F_KEY SELECT
	(F_01),	BEGIN
		XCALL W_DISP(WND_M, WD_POS,1,1,WD_CLR, WDC_LIN)
		CLEAR CLVL1
		RETURN
		END
	ENDUSING

	GOTO (F1_POP,ABORT_F1),INXCTL
	IF (ENTRY(1,1) .EQ. '.')
		BEGIN
		ENTRY(1,30) = F1_MEMOS(1)
		XCALL W_DISP(WND_M, WD_POS, 6, 12, ENTRY(1,30))
		XCALL W_UPDT
		END
	XCALL W_AREA(WND_M, WA_COLOR, 7)		;RED

	CNGCTL = 2
	XCALL WANCN(WND_1, 16, CNGCTL, WHATNO)
	GOTO (F1_POP),CNGCTL	

;;;	INCR F1_NUM
	F1_NUM = 1		;ONLY 1 MAIN COMMENT ALLOWED
	F1_IDX = F1_NUM
	F1_MEMOS(F1_IDX) = ENTRY(1,30)		
	CLVL1 = F1_IDX
ABORT_F1,
	RETURN
;---------------------------------------

F2_POP,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR PI2
	IF (F2_NUM .LE. 0)
		BEGIN
		CALL INSERT_F2
		IF (INXCTL .NE. 0) RETURN
		END

DISP_F2,
	FOR I FROM 1 THRU F2_NUM
		BEGIN
		PARRY2(I) = F2_MEMOS(I)
		END
	NUMARA2 = F2_NUM

	DLINE2 = 'LEVEL-2 MEMOS'
	PALET2 = 5				;PALETTE 5 - GREEN
	XCALL POPM (MPOP2)
	USING P_ACTION2 SELECT
	(2),	BEGIN			;INSERT
		CALL INSERT_F2
		IF (INXCTL .NE. 0)
		THEN	RETURN
		ELSE	GOTO DISP_F2
		END
	(),	CLVL2 = PI2
	ENDUSING

	RETURN
;---------------------------------------
F3_POP,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR PI3
	IF (F3_NUM .LE. 0)
		BEGIN
		CALL INSERT_F3
		IF (INXCTL .NE. 0) RETURN
		END

DISP_F3,
	FOR I FROM 1 THRU F3_NUM
		BEGIN
		PARRY3(I) = F3_MEMOS(I)
		END
	NUMARA3 = F3_NUM

	DLINE3 = 'LEVEL-3 MEMOS'
	PALET3 = 6			;PALETTE 6 - CYAN
	XCALL POPM (MPOP3)
	USING P_ACTION3 SELECT
	(2),	BEGIN			;INSERT
		CALL INSERT_F3
		IF (INXCTL .NE. 0)
		THEN	RETURN
		ELSE	GOTO DISP_F3
		END
	(),	CLVL3 = PI3
	ENDUSING

	RETURN
;---------------------------------------
F4_POP,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; Change memos for a line 
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL GET_LINES
	IF (NUMARAL .EQ. 0) RETURN
	XCALL W_PROC(WP_REMOVE,WND_2)
	XCALL W_UPDT
L_POP,
	XCALL OLPOP(LPOP)			

	USING P_ACTIONL SELECT
	(P_INS),	NOP	;FUTURE
	(P_DEL),	NOP	;FUTURE
	(P_UPD),	BEGIN
			CALL UPD_LINE
	;;;		GOTO L_POP
			END
	(P_PG_UP),	BEGIN
			CALL OL_PAGE_UP
			IF (NUMARAL.GT.0) GOTO L_POP
			END
	(P_PG_DN),	BEGIN
			CALL OL_PAGE_DN
			IF (NUMARAL.GT.0) GOTO L_POP
			END
	ENDUSING

	XCALL W_PROC(WP_PLACE, WND_2, 8, 0)
	RETURN
;---------------------------------------
ADD_LINE,
	IF (PIL .EQ. 0) RETURN
	RETURN
;---------------------------------------
DEL_LINE,
	RETURN
;---------------------------------------
UPD_LINE,
	FOR I FROM 1 THRU NUMARAL
		BEGIN
		IF (PFLAGSL(I) .EQ. 1)
		   BEGIN
		   READ (CHN045, ORDLIN, RFA=PARRFAL(I))
		   LMSQ1 = CLVL1
		   LMSQ2 = CLVL2
		   LMSQ3 = CLVL3
		   WRITE (CHN045, ORDLIN, ORDKEY)
		   CLEAR PFLAGSL(I)
		   END
		END

	RETURN
;---------------------------------------
OL_PAGE_UP,
	CALL READ_REVERSE
	RETURN
;---------------------------------------
OL_PAGE_DN,
	CALL UPD_LINE		;update any lines already selected
	CALL MORE_LINES
	RETURN
;---------------------------------------
;;;;;;;;;;;;;;;;;; END F4_POP ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

F5_POP,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; Inquire mode, hi-lite memos
	;;; associated w/ each line...
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL GET_LINES
	IF (NUMARAL .EQ. 0) RETURN

; save current memos...
	SAVL1 = CLVL1
	SAVL2 = CLVL2
	SAVL3 = CLVL3

	LAST_ROW = NUMROWL
RE_PAGE,
	IF (NUMROWL .GT. NUMARAL) LAST_ROW = NUMARAL
;--------------------------------------------------------
	XCALL W_PROC(WP_REMOVE,WND_2)
	XCALL W_PROC(WP_DELETE,WND_2)
	XCALL W_PROC(WP_CREATE, WND_2, 'SCROL',LAST_ROW, 78)
	XCALL W_BRDR(WND_2,WB_TITLE,'LINE ITEMS',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE, WND_2, 8, 0)
	XCALL W_DISP(WND_2, WD_CLEAR)
	WLEN = 78
;--------------------------------------------------------

	CLEAR CLVL1, CLVL2, CLVL3

	CLEAR ARO
	CLEAR WROW
	FOR I FROM 1 THRU LAST_ROW
		BEGIN
		INCR WROW
		DLINE = PARRYL(I)
		REST = DLINE(1,PLENL)
		XCALL W_DISP(WND_2, WD_POS, WROW, 1, WRKLIN(1,PLENL+2))
		END
	XCALL W_UPDT

	CLEAR VAL
	CLEAR SAVE_ROW
	FIRST_ROW = 1
	WROW = 1
	LI = 1
	CALL DSPLIN

DSPLOP,
	IF (SAVE_ROW .NE. 0)	CALL CLEAR_LAST_LINE

	WROW = WROW + VAL
	IF (WROW .GT. LAST_ROW) CALL SCROLL_DN
	IF (WROW .LT. FIRST_ROW) CALL SCROLL_UP

	LI = LI + VAL
	IF (LI .LE. 0) LI = 1
	IF (LI .GT. NUMARAL) LI = NUMARAL

	CALL DSPLIN
	CALL PINPUT
	USING F_KEY SELECT
	(EXIT_KEY),	BEGIN
			CLEAR PIL
			CLEAR P_ACTIONL
			END
	(UP_ARO),	BEGIN
			VAL = - 1
			GOTO DSPLOP
			END
	(DN_ARO),	BEGIN
			VAL =  1
			GOTO DSPLOP
			END
	(PAGE_UP),	BEGIN
			END
	(PAGE_DN),	BEGIN
			CALL MORE_LINES
			IF (NUMARAL.GT.0) GOTO RE_PAGE
			END
	ENDUSING
	
	XCALL W_UPDT

; restore current line items...
	XCALL W_PROC(WP_REMOVE,WND_2)
	XCALL W_PROC(WP_DELETE,WND_2)
	CALL CREATE_WND2

	FIND (5, ORDLIN, OORDNO) [ERR=RES_LOOP]
RES_LOOP,
	LOKCTL = 1
	XCALL IOS (5,ORDLIN,READ,LOKCTL)
	IF (LOKCTL .NE. 0) GOTO RES_EOF
	IF (LORDNO .NE. OORDNO) GOTO RES_EOF
;----------------------------------------------------
	XCALL W_AREA(WND_2, WA_SCROLL, WAS_UP, 1)
	CLEAR W2_LINE
	W2_ITEM = LITMNO
	W2_DESCR = LDESCR
	W2_QTY = LQTYOR,	'ZZZZZ'
	W2_PRICE = LPRICE,	'ZZZ,ZZX.XXX'
	W2_EXT = EXEPRC,	'ZZZ,ZZX.XX'
	XCALL W_DISP(WND_2, WD_POS, 14, 1, W2_LINE)
	XCALL W_UPDT
;----------------------------------------------------
	GOTO RES_LOOP
RES_EOF,
; restore current memos...
	CLVL1 = SAVL1
	CLVL2 = SAVL2
	CLVL3 = SAVL3

	LMSQ1 = CLVL1
	LMSQ2 = CLVL2
	LMSQ3 = CLVL3
	CALL DISPLAY_MEMO_WINDOWS
	CLEAR ORDLIN
	CLEAR PI2, PI3
	RETURN
;;;control point here..

NEXT_LINE,
	XCALL IOS (CHN045, ORDLIN, READ, LOKCTL)
	IF (LOKCTL .NE. 0) RETURN
	IF (LORDNO.NE.OORDNO) RETURN
	FOR I FROM 1 THRU NUMARAL-1
		BEGIN
		PARRYL(I) = PARRYL(I+1)
		PARRFAL(I) = PARRFAL(I+1)
		END
	CALL SET_W2
	RETURN

DSPLIN,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; move arrow, highlight selected line
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ARO = '>'
	REST = PARRYL(LI)
	XCALL W_DISP (WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
	XCALL W_DISP (WND_2,WD_POS,WROW,1,WRKLIN(1,WLEN))
	XCALL W_DISP (WND_2,WD_POS,WROW,1)
	SAVE_ROW = WROW
;display any memos for current item...
	READ (CHN045, ORDLIN, RFA=PARRFAL(LI))

	CALL DISPLAY_MEMO_WINDOWS
	RETURN
;----------------------------------------------------------------------
DISPLAY_MEMO_WINDOWS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF (LMSQ1.GT.0)
	THEN	BEGIN
		ENTRY(1,30) = F1_MEMOS(LMSQ1)
		XCALL W_DISP(WND_M, WD_POS, 6, 12, ENTRY(1,30))
		XCALL W_AREA(WND_M, WA_COLOR, 7)		;RED
		END
	ELSE	XCALL W_DISP(WND_M, WD_CLEAR)
	XCALL W_UPDT

	IF (LMSQ2 .EQ. 0)
	THEN	BEGIN
		XCALL W_PROC(WP_FIND, POP_WND2, POP_WID2)
		IF (POP_WND2)
		   BEGIN
		   XCALL W_PROC(WP_REMOVE,POP_WND2)
	    	   XCALL W_PROC(WP_DELETE,POP_WND2)
		   END
		END
	ELSE	BEGIN
		PI2 = -LMSQ2
		CALL DISP_F2
		END

	IF (LMSQ3 .EQ. 0)
	THEN	BEGIN
		XCALL W_PROC(WP_FIND, POP_WND3, POP_WID3)
		IF (POP_WND3)
		   BEGIN
		   XCALL W_PROC(WP_REMOVE,POP_WND3)
		   XCALL W_PROC(WP_DELETE,POP_WND3)
		   END
		END
	ELSE	BEGIN
		PI3 = -LMSQ3
		CALL DISP_F3
		END

	RETURN
;----------------------------------------------------------------------

CLEAR_LAST_LINE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			;;; CLEAR HI-LITE ON PREV LINE
			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR ARO
	XCALL W_DISP (WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
	XCALL W_DISP (WND_2,WD_POS,SAVE_ROW,1,WRKLIN(1,WLEN))
	RETURN
;----------------------------------------------------------------------
PINPUT,	;;;;;;;;;;;;;;;;;;;;;;;
	;;; FUNCTION KEY INPUT
	;;;;;;;;;;;;;;;;;;;;;;;

	XCALL W_DISP(WND_2,WD_ACCEPT,STAT_KEY)
	XCALL TTSTS(STAT)
	IF (STAT) 
	THEN	XCALL W_DISP(WND_2,WD_ACCEPT,F_KEY)
	ELSE	F_KEY = STAT_KEY

	CASE F_KEY OF
	BEGINCASE
	079:	F_KEY = 027
	133:	F_KEY = 027
	008:	F_KEY = 027		;<BS>
	010:	F_KEY = 013		;<CR>
	ENDCASE

	RETURN

GETCHR,	
	XCALL W_DISP(WND_2,WD_ACCEPT,ALPHA)
	XCALL DECML (ALPHA, DEC)
	RETURN

;----------------------------------------------------------------------
;----------------------------------------------------------------------

;;; WINDOW SCROLLING ROUTINES
SCROLL_DN,
	WROW = LAST_ROW
	IF (LI .EQ. NUMARAL) RETURN
	XCALL W_AREA(WND_2,WA_SCROLL,WAS_UP,1)
	RETURN

SCROLL_UP,
	WROW = FIRST_ROW
	IF (LI .EQ. 1) RETURN
	XCALL W_AREA(WND_2,WA_SCROLL,WAS_DOWN,1)
	RETURN
;--------------------------


INIT_POP,
	XCALL W_PROC(WP_FIND,POP_WND,POP_WID)
	IF (POP_WND) 
		BEGIN
		XCALL W_PROC(WP_REMOVE,POP_WND)
		XCALL W_PROC(WP_DELETE,POP_WND)
		END
	XCALL W_PROC(WP_CREATE,POP_WND,POP_WID,2,PLEN+2)
;;;	XCALL W_PROC(WP_CREATE,POP_WND,POP_WID,WX,PLEN+2)

	TITLEN = %TRIM(POP_TITLE)
	XCALL W_BRDR(POP_WND,WB_TITLE,POP_TITLE(1,TITLEN),WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE,POP_WND,WX,WY)
	XCALL W_DISP(POP_WND,WD_CLEAR)
	XCALL W_DISP (POP_WND,WD_ATTR,ATTR_SET+ATTR_RVRS)
	XCALL W_UPDT
	RETURN

;---------------------------------------
GET_LINES,
	CLEAR ORDKEY, I
	LORDNO = OORDNO
	FIND (CHN045, ORDLIN, ORDKEY) [ERR=READ_LINES]

MORE_LINES,
	CLEAR I
READ_LINES,
	XCALL IOS (CHN045, ORDLIN, READ, LOKCTL)
	IF (LOKCTL .NE. 0) GOTO RL_EOF
	IF (LORDNO.NE.OORDNO) GOTO RL_EOF
	INCR I
	CALL SET_W2
	IF (I .LT. MAXARAL) GOTO READ_LINES	
RL_EOF,
	NUMARAL = I
	RETURN

SET_W2,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL GETRFA(CHN045, LINRFA)
	PARRFAL(I) = LINRFA
	CLEAR W2_LINE
	W2_ITEM = LITMNO
	W2_DESCR = LDESCR
	W2_QTY = LQTYOR,	'ZZZZZ'
	W2_PRICE = LPRICE,	'ZZZ,ZZX.XXX'
	W2_EXT = EXEPRC,	'ZZZ,ZZX.XX'
	PARRYL(I) = W2_LINE
	RETURN
;---------------------------------------
;---------------------------------------
READ_REVERSE,
	I = MAXARAL
RV_LINES,
	READS(CHN045, ORDLIN, RV_EOF, REVERSE)
	IF (LORDNO.NE.OORDNO) GOTO RV_EOF
	XCALL GETRFA(CHN045, LINRFA)
	PARRFAL(I) = LINRFA
	CLEAR W2_LINE
	W2_ITEM = LITMNO
	W2_DESCR = LDESCR
	W2_QTY = LQTYOR,	'ZZZZZ'
	W2_PRICE = LPRICE,	'ZZZ,ZZX.XXX'
	W2_EXT = EXEPRC,	'ZZZ,ZZX.XX'
	PARRYL(I) = W2_LINE
	I = I - 1
	IF (I .GT. 1) GOTO RV_LINES	
RV_EOF,
	NUMARAL = MAXARAL - I
	IF (NUMARAL .EQ. 0) RETURN
	FOR J FROM 1 THRU NUMARAL
		BEGIN
		PARRYL(J) = PARRYL(J+I)
		CLEAR PARRYL(J+I)
		PARRFAL(J) = PARRFAL(J+I)
		CLEAR PARRFAL(J+I)
		END
	RETURN

;---------------------------------------
;---------------------------------------

INSERT_F2,
	XCALL W_DISP(WND_1, WD_POS, ROW, 1, 'LEVEL-2 MEMO')
	CALL INSERT
	IF (INXCTL .NE. 0) RETURN

	INCR F2_NUM
	F2_IDX = F2_NUM
	F2_MEMOS(F2_IDX) = ENTRY(1,30)		
	RETURN
;---------------------------------------

INSERT_F3,
	XCALL W_DISP(WND_1, WD_POS, ROW, 1, 'LEVEL-3 MEMO')
	CALL INSERT
	IF (INXCTL .NE. 0) RETURN

	INCR F3_NUM
	F3_IDX = F3_NUM
	F3_MEMOS(F3_IDX) = ENTRY(1,30)		
	RETURN
;---------------------------------------

INSERT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL WINPT(WND_1, ROW+1, 3, 30, 00, 'AE', ENTRY, INXCTL)
	GOTO (INSERT,ABORT),INXCTL
	IF (ENTRY(1,1) .EQ. '.') 
		BEGIN
		CALL GET_MEMO_TABLE
		IF (KEY_FOUND)
		THEN	BEGIN
			ENTRY(1,30) = MM_DESC
			XCALL W_DISP(WND_1, WD_POS, ROW+1, 3, ENTRY)
			END
		ELSE	GOTO INSERT
		END

	LDESCR = ENTRY(1,30)
	CNGCTL = 2
	XCALL WANCN(WND_1, 16, CNGCTL, WHATNO)
	GOTO (INSERT),CNGCTL	
ABORT,
	RETURN

GET_MEMO_TABLE,	;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR KEY_FOUND

	ONERROR NOT_KEY
	MM_CODE = ENTRY(2,3)
	OFFERROR

	CLEAR TBL_KEY
	TBLCOD = 'MM'
	MM_KEY = MM_CODE
	READ (CHN182,COPTBL,TBL_KEY)[ERR=NOT_KEY]
	KEY_FOUND = 1
NOT_KEY,
	OFFERROR
	RETURN
;----------------------------------------------------------------

INIT_WINDOW,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; SET UP SCREEN 1 WINDOW
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;	XCALL W_INIT(POOLSIZE,WNDCHNL,MAXWINS)
	XCALL W_PROC(WP_FIND,WND_1,WN_NAME)
	IF (.NOT. WND_1)
		BEGIN
		XCALL W_PROC(WP_CREATE,WND_1,WN_NAME,0,0)
		END
	XCALL W_BRDR(WND_1,WB_TITLE,'ORDER ADD',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE,WND_1,1,1)	
	XCALL W_DISP(WND_1,WD_CLEAR)

	W_ID = WND_1

	CALL CREATE_WND2

	XCALL W_PROC(WP_CREATE, WND_M, 'TOPL',1, 80)
	XCALL W_PROC(WP_PLACE, WND_M, 3, 0)
	XCALL W_DISP(WND_M, WD_CLEAR)

;Pallets...
	XCALL W_PROC(WP_PALET, 4, 1, 0)		;1=BLUE
	XCALL W_PROC(WP_PALET, 5, 2, 0)		;2=GREEN
	XCALL W_PROC(WP_PALET, 6, 3, 0)		;3=CYAN
	XCALL W_PROC(WP_PALET, 7, 4, 7)		;4=RED

	MAXARA2 = 10		
	PLEN2 = 34
	NUMROW2 = 4
	WX2 = 19
	WY2 = 4
	POP_WID2(1,5) = "F2WIN"
	POP_TITLE2 = "LEVEL-2 MEMOS"

	MAXARA3 = 10	
	PLEN3 = 34
	NUMROW3 = 4
	WX3 = 19
	WY3 = 44
	POP_WID3(1,5) = "F3WIN"
	POP_TITLE3 = "LEVEL-3 MEMOS"

;;;	MAXARAL = 20
	MAXARAL = 6		
	PLENL = 76
	NUMROWL = 6
	WXL = 8
	WYL = 1
	POP_WIDL(1,5) = "F4WIN"
	POP_TITLEL = "LINE ITEMS"

	RETURN
;---------------------------------------
CREATE_WND2,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL W_PROC(WP_CREATE, WND_2, 'SCROL',6, 78)
	XCALL W_BRDR(WND_2,WB_TITLE,'LINE ITEMS',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE, WND_2, 8, 0)
	XCALL W_DISP(WND_2, WD_CLEAR)
	WLEN = 78
	RETURN
;--------------------------------------------------------

END

;ITEM #          DESCRIPTION                       QTY       PRICE DS  EXT-PRICE
;AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ZZZZZX ZZZ,ZZX.XXX ZX ZZZ,ZZX.XX
;12345678901234567890123456789012345678901234567890123456789012345678901234567890
;         1         2         3         4         5         6         7         8
