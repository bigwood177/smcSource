SUBROUTINE SCRN3	;isam
;
;		NEW SCRN3.COP 5/9/87 DS
;	31-jan-1997 ssq:  auto duct/liner pricing.
;	(01) 9-16-98 SSQ: TDC gasket & cleats qty's based on weight,
;			alum. wgt computed to be 1/3 of galv. wgt,
;			which yields gasket & cleate qty's which are
;			too low.
;
;	8-13-01 ssq:	duct pricing table look-up for 5 & 6
;	12-19-01 ssq:	<f9> = don't fax
;	4-16-03 SSQ:	if joint changed to zero, allow acc to be
;			reversed out.
;	4-01-04 ssq:	repricing mod.
;	5-16-06 ssq: 	save pc_chart after lookin up in coptbl
;	2-19-08 ssq:	new pressure chart & logic
;	1-24-08 ssq: 	J-35 logic

	OORDNO	,D
	TAXFLG	,D
	ORGINV	,D
;;;	FULL	,D
	RE_PRICE,D	;1 = order re-priced in scrnx
	OCUSNM	,A
	ODATE	,D
	OLOC	,A
	FIL174	,A
	OHSEQ	,D	;ORDHDR.ODSEQ
	CUSTCD	,A	;FAX\

;=========================
EXTERNAL FUNCTION
	TRN3	,D
;=========================

	.INCLUDE 'WND:WINDOWS.DEF'

RECORD	FKEYS
	.INCLUDE 'DEF:FUNKEY.DEF'

RECORD	SPLFIL
		,A4,	'SPL:'
		,A1,	'S'
	SPORD	,A6
		,A4,	'.SPL'

GLOBAL IMS
RECORD INVMAS
	.INCLUDE 'DEF:RD041A.def'
RECORD DUMINV,X
	.INCLUDE 'DEF:RD041B.def'
RECORD
	FIL041	,A14		;ITMMAS FILE NAME
ENDGLOBAL

RECORD DUCFIL	; Table of all parameters necessary
	.INCLUDE 'DEF:RD174A.DEF'
;
GLOBAL DUCK
		.INCLUDE 'DEF:RD175D.DEF'
ENDGLOBAL

GLOBAL PAR	
  RECORD PARAM
	.INCLUDE 'DEF:PARAM.DEF'
ENDGLOBAL

RECORD	XDUCACC
	.INCLUDE 'DEF:RD175X.DEF'

RECORD	BAR24
	,	A6,	'TDCBAR'
	T24BQT,	A5
	,	A3,	'TN5'
	T24NQT,	A5

RECORD	LN24
	,	A3,	'DSF'
	L24DSF,	A5
	,	A3,	'DLB'
	L24DLB,	A5
	,	A3,	'LSF'
	L24LSF,	A5

RECORD	LN25
		,A*,	'<F5>=Change'

RECORD	D_ORD
		,A7,	'ORDER: '
	DORD	,A6
		,A2
	DNAME	,A25

RECORD
		,A3,	'GAL'
		,A3,	'ALU'
		,A3,	'SS '
		,A3,	'PG '
		,A3,	'G90'
		,A3,	'PVS'
		,A3,	'OTH'
RECORD,X
	QTYPE	,7A3
RECORD
		,A3,	'L-S'
		,A3,	'RAP'
		,A3,	'4PC'
		,A3,	'OTH'
		,A3,	'OVR'
RECORD,X
	QCAT	,5A3
RECORD
		,A3,	'S/D'
		,A3,	'TDC'
		,A3,	'RW4'
		,A3,	'RWS'
		,A3,	'OTS'
		,A3,	'OTT'
		,A3,	'J35'
RECORD,X
	QSTY	,7A3
RECORD
		,A4,	'SNAP'
		,A4,	'PITT'
RECORD,X
	QSEAM	,2A4
RECORD
		,A3,	'YES'
		,A3,	'NO '
RECORD,X
	QSEAL	,2A3

RECORD
		,A9,	'1" - 1.5#'
		,A9,	'.5" - 2# '
		,A9,	'1" - 3#  '
		,A9,	'None     '
		,A9,	'.5" - 3# '
		,A9,	'2" - 1.5#'
		,A9,	'1" - 2#  '
		,A9,	'2" - 3#  '
RECORD,X
	QLINER	,8A9

RECORD	SAVITM
	SAVSLP	,A15
	SAVDRV	,A15
	SAVCOR	,A15
	SAVTNB	,A15
	SAVTGA	,A15
	SAVTCL	,A15
	SAVTBA	,A15
	SAVTBN	,A15
	SAVTR1	,A15
	SAVTR2	,A15
	SAVHL	,A15
	SAVCM	,A15
	OLDITM	,A15
	NEWITM	,A15
	SAVVAL	,A3

RECORD	PP_LINE
	PP_TYPE	,A11		;DUCT PRICE or LINER PRICE
		,A5
		,A5,	'ORIG:'
	PP_ORIG	,A7
		,A3
		,A4,	'NEW:'
	PP_NEW	,A7
	

RECORD	DP_HEAD
		,A4
	DP1	,A4
		,A1,	'-'
	DP2	,A4
		,A4,	' OF '
	DP3	,A4


RECORD	U_ARA
	U_RFA	,500A6
	U_FLAG	,500D1
	U_MAX	,D3,	500
	U_I	,D5	;INDEX

RECORD	J35TMP
	J35SZ1	,A3
		,A3,	' X '
	J35SZ2	,A3
		,A1

RECORD	WVARS
	SAVPC	,D3		;SSQ 5-16-06
	D3	,D3
	A6	,A6
	A15	,A15
	FILNAM	,A14
	FFCTL	,D1
	FACTOR	,D18
	W_ID	,D4
	WND_1	,D4
	WN_NAME	,A6,	'SCRN3X'
	W1_NAME	,A6
	WND_2	,D4
	W2_NAME	,A6
	WLEN	,D2

RECORD	POP
	.INCLUDE 'DEF:POP2.DEF'		;won't conflict w dline

RECORD	COPTBL
	.INCLUDE 'DEF:RD182A.DEF'

RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2


RECORD	DEFAULTS
	D_ON	,D1	;1=ON, 2=OFF
	D_DPC	,D3	;XX.X
	D_DUTYPE	,D1	; Type of duct 1-GALV,2-ALUM,3-STAIN STEEL,4-OTHER(0)
	D_STY	,D1	; Style 1-SLIP/DRIVE,2-TDC,3-NEXUS,4-OTHER	(1)
	D_LINER	,D1	; Liner 1-					(2)
	D_SEAM	,D1	; Seam  1-SNAP/LOCK,2-PITTSBURG			(3)
	D_SEAL	,D1	; Sealnant 1-YES,2-NO				(4)
	D_GAUGE	,D2	; Gauge ( 26,24,22,20,18 )			(5)
	D_THICK	,D3	; Dec. Thickness .024-24g .032-22g .040-20g .050-18g
	D_CAT	,D1	; Catagory 1-LSHAP,2-WRAPAROUND,3-4 PC,4-OTHER
	D_LOCAT	,A15	; Location ( comment )
	D_PUNCH	,A15	; Punch pattern, or note
	D_ACC	,D1
	D_DREIN	,D1
	D_DTIER	,D1
	D_DACCC	,D1	;CORNER MATIC CORNERS INSTALLED
RECORD
	DENTRY,	A30
RECORD,X
	DFV	,A1	;0=> TURN OFF DEFAULT
	DREST	,A29	;REST OF INPUT

RECORD	CHKEY
	CH_CODE		,A2
	CH_CHART	,D3
	CH_LEN		,D1
	CH_DIM		,D3

RECORD	PBUF
	PLINE	,A80

RECORD	VARS
	FLNG_PRC	,D8	;flange price for J35 item
	tbl_punch	,d1	;1 = punch pattern found in pc (pc .ne. 999)
	re_punch	,d1	;1 = user changed ga, get new punch pattern

	dim1	,d3	;larger of sz1 & sz2
	dim2	,d3	;smaller of sz1 & sz2
	wrkga	,d2	;working var for gauge
	maxsiz	,d3	;max dim in new pc chart

	I	,D6
	TL	,D6	;%INSTR param
	newrfa	,a6
	REVRS	,D1	;1= read reverse
	DN1	,D4	;start duct record current window
	DN2	,D4	;end duct record current window
	NUM_DUCT,D4
	J	,D6
	F5_ON	,D1
	DP_CNG	,D1
	LN_CNG	,D1
	NEWPRC	,D8
	TBLPRC	,D8

	ORG_JOINT	,D5	;ORIGINAL JOINT			;4-16-03
	WRK_JOINT	,D5	;VALUE TO USE IN CALCULATIONS	;4-16-03
	REVRS_ACC	,D1	;1=YES, 2=NO
	RE_COMPUTE	,D1	;need to test computed item #'s ?
	FIRST_CALC	,D1	;1=initial entry, don't need re_compute test
	RE_CALC_REI	,D1	;1=RE-CALC REINFORCEMENT
	F_KEY	,D3
	SZ1	,D3
	SZ2	,D3
	SAV_DON	,D1
	TCHAR	,D3
	DCHAR	,D3
	SAVRFA	,A6
	SELECT	,D1
	SAVLOC	,A15
	SAVGAG	,D2		;last ga input
	tblgag	,d2		;smacna ga from pressure chart
	SAVCAT	,D1
	NUMI	,D2
	FIRST	,D1
	M5	,A5,	'ZZZZX'
	CC_CAT	,D1
	BADSLP	,D1
	BADDRV	,D1
	BADCOR	,D1
	BADCMC	,D1
	BADTNB	,D1
	BADTGA	,D1
	BADTCL	,D1
	BADTBA	,D1
	BADTBN	,D1
	BADTR1	,D1
	BADTR2	,D1
	BADHL	,D1
	A1	,A1
	A4	,A4
	D1	,D1
	D4	,D4
	T1CNT	,D4	;NUMBER OF TIE RODS 1
	T2CNT	,D4	;NUMBER OF TIE RODS 2
	HLCNT	,D4	;NUMBER OF HOLES
	XON	,D1
	LN	,D4	;LENGTH (%TRIM)
	DIMEN	,D4
	PC_FOUND,D1	;PRESSURE CHART FOUND ?
	NXTSEQ	,D3	;LINE SEQ #
	ORG_CORN,	D5
	X_WGHT	,D8
	TGAGE	,A21
	LPRC_ENT	,D1
	GPRC_ENT	,D1
	TSTAT	,D2
	CHN182	,D2
	ENTRY	,A20
	ALPHA	,A30
	DEC	,D10
	CNGCTL	,D1
	INXCTL	,D1
	LOKCTL	,D1
	WHATNO	,D2
	DECMAL	,D18
	SUB	,D1
	READ	,D1
	WRITE	,D1,1
	STORE	,D1,2
	DELETE	,D1,3
	BSMID	,D5
	BSEND	,D5
	SRCCTL	,D1
	DEC1	,D18
	DEC2	,D18
	DEC3	,D18
	DEC4	,D18
	KEY	,A15
	CNGACC	,D1
	CNGSLP	,D1
	CNGTDC	,D1
	CNGSTY	,D1
	OLDACC	,D1
	DSUB	,D5
	DEFLT	,D1,0
	BLANKS	,A15
	FILENM	,A14
	V	,D1,1
	SWITCH	,D1
	BAROK	,D1,0		;;;4/27/93
;
PROC
	NXTSEQ = OHSEQ
	CLEAR F5_ON		; SSQ 12-9-04

	CLEAR DEFAULTS
	CLEAR BLANKS
	D_LOCAT='0'		; Location ( comment )
	D_PUNCH='0'		; Punch pattern, or note
	CLEAR XON, T1CNT, T2CNT, HLCNT, SAVLOC

	FIRST=1

	CALL INIT_WINDOW
	CALL COUNT_DUCT			;num_duct will be # of duct records

	IF (RE_PRICE) CALL RE_PRICE	;ssq 04/01/04
	GOTO D_POP			;SSQ 12-9-04
F5_POP,				;READ REVERSE
	F5_ON = 1
	IF (PI .GT. 0)		;something has been selected
		BEGIN
		FIND (5,DUCACC,RFA:PARRFA(PI),KEYNUM:1 )
		call get_rfa
		dn2 = u_i - 1
		CALL GET_MORE_DUCT
		GOTO D_POP2
		END
;;;	CALL GET_LAST_DUCT	;GET LAST RECORDS IN DUCACC SSQ 12-9-04
;;;	GOTO D_POP2
D_POP,				;DISPLAY EXISTING DUCTWORK
	CALL GET_DUCT
	DN1 = 1
	DN2 = NUM_DUCT
	IF (DN2 .GT. MAXARA) DN2 = MAXARA
D_POP2,
	IF(NUMARA .EQ. 0)GOTO BEGIN
	XCALL TTSTS(TSTAT)
	IF(TSTAT)READS(15,ENTRY)
	DDLIN='    QTY TYP STY CAT LNR SEAM SEAL GAGE   SIZE1   SIZE2 LEN'

	DP1 = DN1,	'ZZZX' [LEFT]
	DP2 = DN2,	'ZZZX' [LEFT]
	DP3 = NUM_DUCT,	'ZZZX' [LEFT]

;;;	POP_TITLE = '<Home>=Prt F7=re-prc' + DP_HEAD
	POP_TITLE = '<F1>=Help' + DP_HEAD
;                    12345678901234567890
	XCALL POPD(POP)		;ALLOWS PRINT
	USING P_ACTION SELECT
;;;	(0),	GOTO ENDOFF
	(-2),	BEGIN			;^<END>
		CALL GET_LAST_DUCT
		GOTO D_POP2
		END
	(-1),	GOTO D_POP		;^<HOME>
	(0),	BEGIN
		IF (.NOT. F5_ON) GOTO ENDOFF	;never made selection from pop
		CLEAR F5_ON
		GOTO BEGIN
		END
	;;;	IF (F5_ON)		;SSQ 12-9-04
	;;;	THEN	GOTO BEGIN
	;;;	ELSE	GOTO ENDOFF
	(1),	BEGIN		;SELECT
		SELECT=2
		SAV_DON=D_ON		;SAVE CURRENT VALUE
		D_ON=2			;TURN OFF DEFAULTS
		SAVRFA=PARRFA(PI)
		CALL SET_RFA		;MARK AS CHANGED
		GOTO CHANGE		;CHANGE
		END
	(2),	GOTO BEGIN		;ADD
	(3),	BEGIN		;DELETE
		SELECT=3
		GOTO CHANGE		;DELETE
		END
	(4),	BEGIN			;<CR>
		CALL GET_MORE_DUCT
		GOTO D_POP2
		END
	(5),	BEGIN
		CALL POP_PRINT
		GOTO D_POP2
		END
	(6),	BEGIN
		CALL RE_PRICE
		GOTO D_POP
		END
	(7),	BEGIN			;<Page Up>
		DN1 = DN1 - MAXARA
		IF (DN1 .LE. 0) DN1 = 1
		U_I = DN1
		FIND (5,DUCACC,RFA:U_RFA(U_I),KEYNUM:1 )
		call get_rfa
		dn2 = dn1 - 1
		CALL GET_MORE_DUCT
		GOTO D_POP2
		END
	(),	GOTO D_POP
	ENDUSING

CHANGE,
	SAVRFA=PARRFA(PI)
	READ(5,DUCACC,RFA:SAVRFA) [ERR=NO_DUCT]
	XDUCACC=DUCACC		;SAVE THE ORIGINAL RECORD
	ORG_JOINT = JOINT	;4-16-03 SSQ
	SZ1=%TRN3(SIZE1)
	SZ2=%TRN3(SIZE2)

	CALL D_TOP		;DISPLAY TOP PROMPTS
	CALL DIS_DATA
	CALL DIS_REST

	L24LSF=SQFLIN,	'ZZZZX' [LEFT]
	L24DLB=POUNDS,	'ZZZZX' [LEFT]
	L24DSF=SQFEET,'ZZZZX'[LEFT]
	XCALL W_DISP(WND_1,WD_POS,24,56,LN24)	
	CALL DSPPRC
	XCALL W_UPDT

	D_ON=SAV_DON			;RESTORE DEFAULT

;-
;	3-18-08 ssq: need to establish TBLGAG...
	using dpc select
;;;	(999),	tblgag = gauge
	(999),	begin
		savpc = dpc		;added 4-10-08
		tblgag = gauge
		end
	(),	begin
		clear tblkey
		tblcod = 'P2'
		px_chart = dpc
		px_len = size3
		px_dim = sz1
		call get_table
		tblgag = p2_gauge
		end
	endusing
;-
;-----------------------------------------------------
;ssq 2-17-03
	OPEN (8,I,FIL174)
	LOKCTL = 1
	XCALL IO (8,DUCFIL,GAUGE,READ,LOKCTL)
	CLOSE 8	
;-----------------------------------------------------
	IF(SELECT.EQ.2)	GOTO ANYCNG

	XCALL W_DISP(W_ID,WD_POS,23,1,'DELETE, ARE YOU SURE?')
	CTL='23,24,01,01,YN'
	CALL INPUT
	IF(INXCTL.EQ.2)	GOTO D_POP
	XCALL ISIO(5,XDUCACC,XKEY175,DELETE,LOKCTL)
	XCALL OLMSG(W_ID,23,'DUCT RECORD DELETED!',1)
	call count_duct			;refresh array...
	GOTO D_POP

NO_DUCT,
	XCALL OLMSG(W_ID,23,'DUCT RECORD NOT FOUND',1)
	GOTO D_POP
BEGIN,
	CLEAR F5_ON		; SSQ 12-9-04
	SELECT=1		;ADD MODE
	CALL D_TOP		;DISPLAY TOP PROMPTS

	CLEAR DUCACC, OLDACC
	CLEAR XON, T1CNT, T2CNT, HLCNT, REVRS_ACC
	CLEAR CNGCTL, CNGSTY, CNGSLP, CNGTDC
	RE_COMPUTE = 0		;SSQ 3-31-03
	FIRST_CALC = 1		;SSQ 3-31-03
	DUCTOR = OORDNO
	DUCTT  = OLOC
DON,
	IF (CUSTCD .EQ. 'NQ')
	THEN	XCALL W_DISP(W_ID,WD_POS,1,70," Don't Fax")
	ELSE	XCALL W_DISP(W_ID,WD_POS,1,40,D_ORD)
	CALL DIS_DEFAULTS
	CTL = '01,19,01,00,#E'
	CALL INPUT
;;;	IF(F_KEY.EQ.F_05)GOTO D_POP	;<F5>=POP
	IF(F_KEY.EQ.F_05)GOTO F5_POP	;<F5>=POP
	IF(F_KEY .EQ. F_09) 
		BEGIN
		CUSTCD = 'NQ'	;DON'T FAX
		GOTO DON
		END
		
	GOTO(BEGIN),INXCTL
	IF(INXCTL.EQ.2.AND.NUMARA.EQ.0)GOTO ENDOFF
	GOTO(D_POP),INXCTL-1

	D1=ENTRY(1,1)
	USING D1 SELECT
	(0),	BEGIN
		IF(D_ON.EQ.0)D_ON=1	;DEFAULT IS DEFAULTS ON
		IF(D_ON.EQ.1)CALL DIS_DEFAULTS
		IF(D_ON.EQ.2)
			BEGIN
			CLEAR DEFAULTS
			D_LOCAT='0'		; Location ( comment )
			D_PUNCH='0'		; Punch pattern, or note
			FIRST=1
			END
		END		
	(1),	BEGIN			;TURN DEFAULTS ON
		D_ON=1
		CALL DIS_DEFAULTS
		END
	(2),	BEGIN			;TURN DEFAULTS OFF
		D_ON=2
		FIRST=1
		CLEAR DEFAULTS
		END
	(),	GOTO DON
	ENDUSING
DPC,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; disable for now 12-29-00
	IF(D_DPC.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
	;;;	CTL = '02,19,04,00,#E'
	;;;	CALL INPUT
		CTL = '02,19,04,00,#Z'
		XCALL WINne (W_ID,ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,F_KEY)
		GOTO (BEGIN, D_POP), INXCTL
		DENTRY=ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_DPC	;CLEAR THE DEFAULT
			DPC=DREST(1,3)
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			DPC=999
			IF(FIRST)D_DPC=DPC		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			DPC=DENTRY(1,3)
			D_DPC=DPC	;SAVE THE DEFAULT
			END
		(),	BEGIN
			DPC=DENTRY(1,3)
			IF(FIRST)D_DPC=DPC	;1ST TIME THRU
			END
		ENDUSING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;	CTL = '02,19,04,00,#E'
	;;;	DPC=999
		ENTRY(1,5)=DPC,	'ZX.X-' [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,ENTRY(1,5))
		XCALL W_UPDT
		END		

	CLEAR CHKEY
;;;	CH_CODE = 'PC'
	CH_CODE = 'PX'		;ssq 5-27-08
	CH_CHART = DPC
	TBL_KEY=CHKEY
	CALL GET_TABLE		;PRESSURE CHART TABLE
	IF(PC_CHART .NE. DPC) 
		BEGIN
		CLEAR D_DPC
		GOTO DPC
		END
	SAVPC = PC_CHART	;SSQ 5-16-06

TYPE,
	IF(D_DUTYPE.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '03,19,02,00,#E'
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 7
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DTYPE(I))
			END

		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN, D_POP), INXCTL
		DENTRY = ENTRY

		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_DUTYPE		;CLEAR THE DEFAULT
			DUTYPE=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			DUTYPE=1
			IF(FIRST)D_DUTYPE=DUTYPE		;SAVE AS DEFAULT
			END
		('+'),	BEGIN			;"+" turns on default
			DUTYPE=DREST(1,1)
			D_DUTYPE=DUTYPE
			END
		(),	BEGIN
			DUTYPE=DENTRY(1,1)	;SOME VALUE
			IF(FIRST)D_DUTYPE=DUTYPE		;SAVE AS DEFAULT
			END
		ENDUSING

		NUMI=7
		CALL CLRMNU

		ALPHA =
		ALPHA (1,1) = DUTYPE,'X'
		ALPHA (5,19) = DTYPE(DUTYPE)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		IF(CNGCTL)
			BEGIN
			CALL GET_DUCT_PRICE
			GOTO ANYCNG
			END
		END
CAT,
	IF(CNGCTL.EQ.1)		;CAT WILL BE COMPUTED
		BEGIN
		CTL = '04,19,02,00,# '
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 5
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DCAT(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL

		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_CAT		;CLEAR THE DEFAULT
			CAT=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			
			CAT=SAVCAT		;CALCULATED VALUE
			D_CAT=CAT		;SAVE AS DEFAULT
			ENTRY(1,1)=CAT,'X'
			XCALL W_DISP(W_ID,WD_POS,ROW,COL,ENTRY)
			END
		(),	BEGIN
			CAT=DENTRY(1,1)	;SOME VALUE
			D_CAT=CAT		;SAVE AS DEFAULT
			END
		ENDUSING
		IF(CAT.LT.1 .OR. CAT.GT.5) GOTO CAT
;-
		NUMI=5
		CALL CLRMNU

		ALPHA =
		ALPHA (1,1) = CAT,'X'
		ALPHA (5,19) = DCAT(CAT)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		IF(CNGCTL)
			BEGIN
			CALL GET_DUCT_PRICE
			GOTO ANYCNG
			END
	;;;	GOTO (ANYCNG), CNGCTL
		END
STY,
	IF(D_STY.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '05,19,02,00,# '
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 7
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DSTY(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL

		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_STY		;CLEAR THE DEFAULT
			STY=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			STY=1
			IF(FIRST)D_STY=STY		;SAVE AS DEFAULT
			END
		('+'),	BEGIN				;"+" TURN ON DEFAULT
			STY=DREST(1,1)			;VALUE ENTERED
			D_STY=STY			;SAVE AS DEFAULT
			END
		(),	BEGIN
			STY=DENTRY(1,1)	;SOME VALUE
			IF(FIRST)D_STY=STY		;SAVE AS DEFAULT
			END
		ENDUSING
		IF (STY.EQ.0) STY = 1
		IF (STY.LT.1.OR.STY.GT.7) GOTO STY
		ALPHA =
		ALPHA (1,1) = STY,'X'
		ALPHA (5,19) = DSTY(STY)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)

		NUMI=7
		CALL CLRMNU

		IF (CNGCTL)
			  BEGIN
			; If the style is changed to Slip/Drive or TDC, make sure all 
			; fields for acc are cleared out, also must clear the
			; input lines on the screen, and make them re-enter the
			; accessories.

			  USING STY SELECT
			  (1,5),	CNGSLP=1; If CNGSLP = 1, then they must re-enter the
						; info for slip/drives
			  (2,6),	CNGTDC=1; If CNGTDC = 1, then they must re-enter the
						; info for TDC accessories
			  ENDUSING
			
			  IF (GAUGE.EQ.16 .AND. STY.NE.3)
				BEGIN
				XCALL OLMSG (WND_1,23,'Must Be "R4B" for 16ga',2)
				GOTO STY
				END

			  CNGSTY = 1
			  CALL CALC_CAT		; re-calc cat
			  CALL GET_DUCT_PRICE
			  RE_COMPUTE = 1			;SSQ 3/17/03 
			  GOTO ANYCNG
			  END
		END
SEAM,
;;;	IF(DUTYPE.EQ.2 .OR. DUTYPE.EQ.3)	;SS OR ALUM MUST BE PITT
	IF(DUTYPE.EQ.2.OR.DUTYPE.EQ.3.OR.GAUGE.EQ.16)	;SS OR ALUM MUST BE PITT
		BEGIN
		CTL = '06,19,02,00,# '
		SEAM=2
		ALPHA =
		ALPHA (1,1) = SEAM,'X'
		ALPHA (5,19) = DSEAM(SEAM)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		GOTO (ANYCNG), CNGCTL
		GOTO SEAL
		END

	IF(D_SEAM.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '06,19,02,00,# '
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 2
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DSEAM(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL
;-
		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_SEAM		;CLEAR THE DEFAULT
			SEAM=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			SEAM=1
			IF(FIRST)D_SEAM=SEAM		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			SEAM=DREST(1,1)
			D_SEAM=SEAM			;SET DEFAULT
			END
		(),	BEGIN
			SEAM=DENTRY(1,1)		;SOME VALUE
			IF(FIRST)D_SEAM=SEAM		;SAVE AS DEFAULT
			END
		ENDUSING
		
		IF(SEAM.LT.1 .OR. SEAM.GT.2) GOTO SEAM

		NUMI=2
		CALL CLRMNU

		ALPHA =
		ALPHA (1,1) = SEAM,'X'
		ALPHA (5,19) = DSEAM(SEAM)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		GOTO (ANYCNG), CNGCTL
		END
SEAL,
	IF(D_SEAL.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '07,19,02,00,# '
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 2
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DSEAL(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL

		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_SEAL		;CLEAR THE DEFAULT
			SEAL=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			SEAL=1
			IF(FIRST)D_SEAL=SEAL		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			SEAL=DREST(1,1)
			D_SEAL=SEAL
			END
		(),	BEGIN
			SEAL=DENTRY(1,1)	;SOME VALUE
			IF(FIRST)D_SEAL=SEAL		;SAVE AS DEFAULT
			END
		ENDUSING

		IF(SEAL.LT.1 .OR. SEAL.GT.2)GOTO SEAL

		NUMI=2
		CALL CLRMNU

		ALPHA =
		ALPHA (1,1) = SEAL,'X'
		ALPHA (5,19) = DSEAL(SEAL)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		GOTO (ANYCNG), CNGCTL
		END
JOINT,
	XCALL W_DISP(W_ID,WD_POS,8,30,WD_CLR,WDC_EOL)	;SSQ 4-15-03
	CTL = '08,19,06,00,#-'
	CALL INPUT
	GOTO (BEGIN), INXCTL
	JOINT = ENTRY
;;;	IF (JOINT.EQ.0) GOTO JOINT
	IF (JOINT.EQ.0) 
		BEGIN
		IF(ACC.EQ.1 .AND. LICRE.EQ.1 .AND. ORG_JOINT.NE.0)
		THEN	BEGIN
			CALL REVRS_ACC
			IF (REVRS_ACC .NE. 1) GOTO JOINT
			END
		ELSE	GOTO JOINT
		END

	RE_COMPUTE = 1			;SSQ 3/17/03 
	GOTO (RECALC), CNGCTL

SIZE1,	; width
	CTL = '09,19,07,00,# '
	CALL INPUT
	GOTO (BEGIN), INXCTL
	XCALL DEC3(ENTRY,SIZE1)		;CONVERT TO .XXX
	SZ1=%TRN3(SIZE1)
;;;	SIZE1 = ENTRY
	IF (SIZE1.LE.0.OR.SIZE1.GT.999000) GOTO SIZE1
	ENTRY(1,7)=SIZE1,'ZZX.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,19,ENTRY(1,7))
	XCALL W_DISP(W_ID,WD_POS,ROW,26,' X ')

SIZE2,	; depth
	CTL = '09,29,07,00,# '
	CALL INPUT
	GOTO (SIZE1), INXCTL
	XCALL DEC3(ENTRY,SIZE2)
	SZ2=%TRN3(SIZE2)
;;;	SIZE2 = ENTRY
	IF (SIZE2.LE.0.OR.SIZE2.GT.999000) GOTO SIZE2
	ENTRY(1,7)=SIZE2,'ZZX.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,29,ENTRY(1,7))
	XCALL W_DISP(W_ID,WD_POS,ROW,36,' X ')

	if (sty.ne.1 .and. sz2.gt.sz1)		;2-20-08
		begin
		xcall beep
		goto size2
		end

SIZE3,	; length
	CTL = '09,39,02,00,# '
	USING DUTYPE SELECT
;;;	(2,3),	SIZE3=4		;SS OR ALUM MUST BE 4'
	(6),	SIZE3=5		;PVS MUST BE 5'
	(),	BEGIN	
		CALL INPUT
		GOTO (SIZE1), INXCTL
		SIZE3 = ENTRY
		IF (SIZE3.LE.0) GOTO SIZE3
		IF (SIZE3.LT.4.OR.SIZE3.GT.6) GOTO SIZE3	;4,5 OR 6 feet only
		END
	ENDUSING

	IF ((DUTYPE.EQ.2.OR.DUTYPE.EQ.3) .AND. SIZE3.GT.5) GOTO SIZE3 ;10-29-07
	ENTRY(1,1)=SIZE3,'X'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,ENTRY(1,1))
	
	CALL CALC_CAT			;COMPUTE CAT
	if (.not. pc_found) goto size1	;ssq 3/18/08
	RE_COMPUTE = 1			;SSQ 3/17/03 

GAUGE,		;GAUGE WILL COME FROM PRESSURE CHART
	ENTRY(1,4)=tblGAG,	'(XX)'
	USING DUTYPE SELECT
	(2,3),	BEGIN		;ALUM, SS
		CTL = '10,19,03,00,# '
		XCALL W_DISP(W_ID,WD_POS,ROW,59,DTHICK(DUTYPE-1))
		CALL INPUT
		GOTO (BEGIN), INXCTL
		THICK = ENTRY
	;;;	IF (THICK.EQ.0) THICK = 024

		IF (DUTYPE.EQ.2) CASE THICK OF
		  BEGINCASE
		  024:	GAUGE = 24	;ALUMINUM
		  032:	GAUGE = 22	;ALUMINUM
		  040:	GAUGE = 20	;ALUMINUM
		  050:	GAUGE = 18	;ALUMINUM
		  ENDCASE ELSE GOTO GAUGE

		IF (DUTYPE.EQ.3) CASE THICK OF
		  BEGINCASE
		  024:	GAUGE = 24	;STAINLESS
		  030:	GAUGE = 22	;STAINLESS
		  036:	GAUGE = 20	;STAINLESS
		  ENDCASE ELSE GOTO GAUGE

		ALPHA =
		ALPHA (1,4) = THICK,'.XXX'
		ALPHA (8,19) = 'Thickness'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		XCALL W_DISP(W_ID,WD_POS,ROW,59,WD_CLR,WDC_EOL)
		END
	(),	BEGIN
		CTL = '10,19,02,00,# '
		ENTRY(1,4)=tblGAG,	'(XX)'
		XCALL W_DISP(W_ID,WD_POS,ROW,COL+6,ENTRY(1,4))
		CALL INPUT
		GOTO (BEGIN), INXCTL
		GAUGE = ENTRY
		IF (GAUGE.EQ.0)
			BEGIN
			GAUGE=tblGAG
			ENTRY(1,2)=GAUGE
			XCALL W_DISP(W_ID,WD_POS,ROW,COL,ENTRY)
			END
		IF(SIZE3.EQ.6 .AND. GAUGE.EQ.26)
			BEGIN
			XCALL BEEP
			GOTO GAUGE
			END
	;;;	IF(GAUGE.GT.SAVGAG)	;2-20-08
		IF(GAUGE.GT.tblGAG .and. dpc.ne.999)	;2-20-08
			BEGIN
			XCALL BEEP
			GOTO GAUGE
			END
;-
		USING GAUGE SELECT
	;;;	(16,18,20,22,24,26),	NOP
		(16,18,20,22,24),	NOP
		(26),	IF(DUTYPE.EQ.4)		;PAINTGRIP	SSQ 11/23/04
			BEGIN
			XCALL BEEP
			GOTO GAUGE
			END
				
		(),	BEGIN
			XCALL BEEP
			GOTO GAUGE
			END
		ENDUSING

	;;;	IF(GAUGE .EQ. 18) ;18 ga must be PITT
		IF(GAUGE .LE. 18) ;18 ga must be PITT	;SSQ 6-15-04
			BEGIN
			SEAM=2
			ALPHA =
			ALPHA (1,1) = SEAM,'X'
			ALPHA (5,19) = DSEAM(SEAM)
			XCALL W_DISP(W_ID,WD_POS,06,19,ALPHA)
			XCALL W_UPDT
			END
;-
		IF(GAUGE .EQ. 16)
			BEGIN
			IF (STY.NE.3)
				BEGIN
				XCALL OLMSG (WND_1,23,'Must Be "R4B" for 16ga',2)
				STY=3	;R4B
				ALPHA =
				ALPHA (1,1) = STY,'X'
				ALPHA (5,19) = DSTY(STY)
				XCALL W_DISP(W_ID,WD_POS,05,19,ALPHA)

			SEAM=2
			ALPHA =
			ALPHA (1,1) = SEAM,'X'
			ALPHA (5,19) = DSEAM(SEAM)
			XCALL W_DISP(W_ID,WD_POS,06,19,ALPHA)
			XCALL W_UPDT
				END	
			IF (DUTYPE.NE.1)
				BEGIN
				XCALL OLMSG (WND_1,23,'Must Be Galv for 16ga',2)
				DUTYPE = 1
				ALPHA =
				ALPHA (1,1) = DUTYPE,'X'
				ALPHA (5,19) = DTYPE(DUTYPE)
				XCALL W_DISP(W_ID,WD_POS,03,19,ALPHA)
				END
			END
;-
		END
	ENDUSING

	IF (DPC.NE.999 .AND. GAUGE .NE. SAVGAG)
		BEGIN
		re_punch = 1
		wrkga = GAUGE
		CALL GET_PCHART		
		if (.not. pc_found) goto gauge
		re_compute = 1		;will need to recount tierods & holes
		END

	savgag = gauge			;3-18-08 last ga input...
RECALC,
		; Get the parameter information for that gauge
	OPEN (8,I,FIL174)
	LOKCTL = 1
	XCALL IO (8,DUCFIL,GAUGE,READ,LOKCTL)
	CLOSE 8	

		; Calculate the square feet
	DEC1 =
	DEC2 =
	DEC3 =
	DEC4 =
	SQFEET =
	DEC4 = SIZE3 * 12
		; Get the length in inches

	DEC1 = ( ( SZ1 * DEC4 ) * 2 )
		; DEC1 = square feet of 2 slip sides in inches

	DEC2 = ( ( SZ2 * DEC4 ) * 2 )
		; DEC2 = Square feet of 2 drive sides in inches

	DEC3 = ( DEC1 + DEC2 ) * JOINT
		; Total square feet, is slip sides, plus drive sides
		; times the number of joints

;;;
;	8/19/94 - modify rounding so SQFEET always rounds UP
;;;

 	SQFEET = ( ( DEC3 * 10 ) / 144 )
 		; Convert to square feet

	IF (SQFEET(6,6).EQ.0) THEN SQFEET = SQFEET / 10
	ELSE BEGIN
	  IF (SQFEET.GT.0) SQFEET = SQFEET(1,5) + 1
	  IF (SQFEET.LT.0) SQFEET = (SQFEET(1,5) * -1) - 1
	END
;;;
	ALPHA =
	L24DSF=SQFEET,'ZZZZX'[LEFT]

		;  Calculate the pounds of sheet metal, seam allowance, 
		;  and waste factor.
	DEC1 = 
	DEC2 =
	DEC3 =
	POUNDS =

	DEC1 = ( DUCLBS * SQFEET )
		;  Calculate the total actual number of pounds

	DEC3 = ( DUCSEA * ( SIZE3 * JOINT ) )
	IF ((SZ1+SZ2).GE.120) DEC3 = ( ( DUCSEA * 2 )*( SIZE3 * JOINT ) )
		; Calculate the seam allowance, by the foot, from total length
		; If size1+size2 .ge.120 then add seam allow twice

	DEC2 = ( DUCWAS * (DEC1+DEC3) ) #5
		; Calculate the total waste pounds, based on above acutal #
		; Round back 5 digts cuz of decimal places.
		; Changed to figure waste last cuz waste was not figured on
		; seam allowance and it should be

	POUNDS = ( DEC1 + DEC3 + DEC2 ) #3
		; The total pounds, is the actual number of pounds
		; plus the seam allowance
		; plus the waste
;(01)
	X_WGHT = POUNDS		;use "unadjusted weight for cleat & gasket calc.
;(01)
	IF (DUTYPE.EQ.2) POUNDS = ( ( DEC1 + DEC3 + DEC2 ) / 3 ) #3
		; Aluminum pounds is 1/3 galvanized

	L24DLB=POUNDS,	'ZZZZX' [LEFT]

	IF (CNGCTL) 
		BEGIN
		CALL GET_DUCT_PRICE
		CALL CALLIN			; Recalc liner if changes
;;;		CALL CALC_ACC
		END

	GOTO (ANYCNG), CNGCTL

LINER,
	IF(D_LINER.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '11,19,02,00,# '
		WLEN=19
		CALL CREATE_WND2
		for i from 1 thru 8
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DLINER(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL

		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			CLEAR D_LINER		;CLEAR THE DEFAULT
			LINER=DREST(1,1)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			LINER=1
			IF(FIRST)D_LINER=LINER		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			LINER=DREST(1,1)
			D_LINER=LINER			;SET DEFAULT
			END
		(),	BEGIN
			LINER=DENTRY(1,1)	;SOME VALUE
			IF(FIRST)D_LINER=LINER		;SAVE AS DEFAULT
			END
		ENDUSING
;-
		IF(LINER.LT.1 .OR. LINER.GT.8)GOTO LINER

		NUMI=8
		CALL CLRMNU 

		ALPHA =
		ALPHA (1,1) = LINER,'X'
		ALPHA (5,19) = DLINER(LINER)
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA)
		CALL CALLIN	

		GOTO (ANYCNG),CNGCTL
		END
	CALL CALLIN		; Calculate the number of square feet of liner
	IF (DRANGL)		; SSQ 11-2-04
		BEGIN
		DREIN = 1	;always reinforcment if drangl
		RE_COMPUTE = 1			;SSQ 3/17/03 
		XCALL W_DISP(W_ID,WD_POS,12,19,DRE(DREIN))
		GOTO D_R1	;skip reinforcement question
		END
;----------------------------------------------------------
;;; ssq 4-12-05: if there is a punch pattern in the table,
;	the defaul shoul be that ther IS reinforcement.

;;	IF(DPUNCH.NE.A6 .AND. PC_CHART.NE.999) 
;;;	IF((DPUNCH.NE.A6.AND.DPUNCH.NE.'0') .AND. PC_CHART.NE.999) 
	IF((DPUNCH.NE.A6.AND.DPUNCH.NE.'0') .AND. SAVPC.NE.999) ;SSQ 5-16-06
		BEGIN
		DREIN = 1	
		DREIN2 = 1	;tie rods
		RE_COMPUTE = 1
		XCALL W_DISP(W_ID,WD_POS,12,19,DRE(DREIN))
		GOTO D_R1	;skip reinforcement question
		END
;----------------------------------------------------------
DREIN,
	IF(D_DREIN.EQ.0 .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '12,19,02,00,# '
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL)
		WLEN=23
		CALL CREATE_WND2
		for i from 1 thru 2
			BEGIN
			IF(I.EQ.2)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DRE(I))
			END
		CALL INPUT
		CALL CLEAR_WND2
		GOTO (BEGIN), INXCTL
		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			D_DREIN = 0		;CLEAR THE DEFAULT
			DREIN=DREST(1,2)	;VALUE ENTERED
			END
		(),	BEGIN
			DREIN=DENTRY(1,2)	;SOME VALUE
			IF(DREIN.EQ.0)
				BEGIN
				IF (DRANGL)	;SSQ 10-28-04
				THEN DREIN = 1
				ELSE DREIN = 2
		;;;		XCALL W_DISP(W_ID,WD_POS,ROW,COL,'2')
;----------------------------------------------------------
;;; ssq 4-12-05: if there is a punch pattern in the table,
;	the defaul shoul be that ther IS reinforcement.

		;;;	IF(DPUNCH.NE.A6 .AND. PC_CHART.NE.999) DREIN = 1
;;;	IF((DPUNCH.NE.A6.AND.DPUNCH.NE.'0') .AND. PC_CHART.NE.999) DREIN = 1
	IF((DPUNCH.NE.A6.AND.DPUNCH.NE.'0') .AND. SAVPC.NE.999) DREIN = 1
;----------------------------------------------------------
				END
			D_DREIN=DREIN		;SAVE AS DEFAULT
			END
		ENDUSING
		IF(DREIN.LT.1 .OR. DREIN.GT.2)GOTO DREIN
		RE_COMPUTE = 1			;SSQ 3/17/03 
		XCALL W_DISP(W_ID,WD_POS,ROW,19,DRE(DREIN))
	ADREIN,
	;;;	IF(DREIN .EQ. 1)
		IF(DREIN.EQ.1 .AND. .NOT. DRANGL)	;SSQ 10-28-04
			BEGIN
		;;;	COL=24
			COL=40
			WLEN=23
			CALL CREATE_WND2
			for i from 1 thru 2
				BEGIN
				IF(I.EQ.1)
				THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
				ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
				XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
				XCALL W_DISP(WND_2,WD_POS,1+I,1,DTIER(I))
				END
			CALL INPUT
			CALL CLEAR_WND2
			GOTO (DREIN), INXCTL
			DREIN2=ENTRY(1,1)
			IF(DREIN2.EQ.0) DREIN2=1
			IF(DREIN2.LT.1.OR.DREIN2.GT.2) GOTO ADREIN
	;;;		XCALL W_DISP(W_ID,WD_POS,ROW,22,DTIER(DREIN2))
		XCALL W_DISP(W_ID,WD_POS,ROW,19,DRE(DREIN))
			XCALL W_DISP(W_ID,WD_POS,ROW,COL,DTIER(DREIN2))
			D_DTIER=DREIN2
			END
		IF(CNGCTL)
			BEGIN
			IF(DREIN.EQ.1)
			THEN	GOTO DPUNCH
			ELSE	GOTO ANYCNG
			END
		END	
D_R1,
;;;	IF (DRANGL)		; SSQ 11-2-04
	IF (DRANGL .or. tbl_punch)		; SSQ 11-2-04
		BEGIN
		IF(FIRST)D_PUNCH=DPUNCH		;SAVE AS DEFAULT
		if(dpunch .ne. '0')
		  begin
		  XCALL W_DISP(W_ID,WD_POS,13,19,DPUNCH(1,15))
		  end
		GOTO D_R2	;skip reinforcement question
		END

DPUNCH,	;;; Only if no punch pattern returned from table...
;;;	IF(DREIN.EQ.1.AND.
;;;&		(D_PUNCH.EQ.'0' .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1))
;;;	IF(OLOC.EQ.'E'.OR.
;;;	IF(D_PUNCH.EQ.'0' .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
	IF(D_PUNCH.EQ.'0'.OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1 .OR.
&	  DREIN.EQ.1)
		BEGIN
		CTL = '13,19,15,00,A '
		CALL INPUT
		GOTO (BEGIN), INXCTL
		DENTRY = ENTRY

		USING DFV SELECT
		('0'),	BEGIN
			D_PUNCH='0'		;CLEAR THE DEFAULT
			DPUNCH=DREST(1,15)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			IF(FIRST)D_PUNCH=DPUNCH		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			DPUNCH=DREST(1,15)
			D_PUNCH=DPUNCH			;SET DEFAULT
			END
		(),	BEGIN
			DPUNCH=DENTRY(1,15)	;SOME VALUE
			IF(FIRST)D_PUNCH=DPUNCH		;SAVE AS DEFAULT
			END
		ENDUSING
		if (dpunch .ne. '0')
		  begin
		  XCALL W_DISP(W_ID,WD_POS,ROW,COL,DPUNCH(1,15))
		  end
		END
D_R2,
	GOTO (ANYCNG), CNGCTL
LOCAT,
	IF(D_LOCAT.EQ.'0' .OR. D_ON.EQ.2 .OR. CNGCTL.EQ.1)
		BEGIN
		CTL = '13,51,15,00,A '
		CALL INPUT
		DENTRY = ENTRY
		USING DFV SELECT
		('0'),	BEGIN
			D_LOCAT='0'		;CLEAR THE DEFAULT
			LOCAT=DREST(1,15)	;VALUE ENTERED
			END
		(' '),	BEGIN			;<CR> USE "OLD" DEFAULT
			IF(FIRST)D_LOCAT=LOCAT		;SAVE AS DEFAULT
			END
		('+'),	BEGIN
			LOCAT=DREST(1,15)
			D_LOCAT=LOCAT			;SET DEFAULT
			END
		(),	BEGIN
			LOCAT=DENTRY(1,15)	;SOME VALUE
			IF(FIRST)D_LOCAT=LOCAT		;SAVE AS DEFAULT
			END
		ENDUSING
		SAVLOC = LOCAT		;2-28-01 SSQ
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,LOCAT)
		GOTO (ANYCNG), CNGCTL
		END


;;=======================================================
	CALL GET_DUCT_PRICE
	CALL GET_LINER_PRICE
;;=======================================================

ACC,
;;;	IF(STY.EQ.3 .OR. STY.EQ.4)GOTO ANYCNG	
	USING STY SELECT
	(3),	GOTO ANYCNG
	(4),	GOTO ANYCNG
	(7),	BEGIN
		CALL CREATE_WND2
		for i from 1 thru 4
			BEGIN
			IF(I.EQ.1)
			THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
			ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
			XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
			XCALL W_DISP(WND_2,WD_POS,1+I,1,DACC(I))
			END
		ACC = 1		;ALL ACC FOR J-35
		CTL = '14,19,02,00,# '
		call clear_wnd2
		GOTO A_J_35
		END
	ENDUSING

	IF(D_ACC.NE.0 .AND. D_ON.EQ.1 .AND. CNGCTL.EQ.0)GOTO CHKCOR
;;;	IF(D_ACC.NE.0 .AND. D_ON.EQ.1 .AND. CNGCTL.EQ.0)GOTO ANYCNG

	IF (CNGCTL) OLDACC = ACC
	CTL = '14,19,02,00,# '
	WLEN=23
	CALL CREATE_WND2
	for i from 1 thru 4
		BEGIN
		IF(I.EQ.2)
		THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
		ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
		XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
		XCALL W_DISP(WND_2,WD_POS,1+I,1,DACC(I))
		END
	CALL INPUT
	CALL CLEAR_WND2
	GOTO (BEGIN), INXCTL

	DENTRY = ENTRY
	USING DFV SELECT
	('0'),	BEGIN
		CLEAR D_ACC		;CLEAR THE DEFAULT
		ACC=DREST(1,1)		;VALUE ENTERED
		END
	('+'),	BEGIN
		ACC=DREST(1,1)
		D_ACC=ACC		;SET DEFAULT
		END
	(),	BEGIN
		ACC=DENTRY(1,1)		;SOME VALUE
		IF(ACC.EQ.0)
			BEGIN
			ACC=2
			XCALL W_DISP(W_ID,WD_POS,ROW,COL,'2')
			END
		IF(FIRST)D_ACC=ACC		;SAVE AS DEFAULT
		END
		ENDUSING

	IF(ACC.LT.1 .OR. ACC.GT.4)GOTO ACC
A_J_35,
;;;	XCALL W_DISP(W_ID,WD_POS,ROW,COL+2,DACC(ACC))
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,DACC(ACC))

CHKCOR,
	IF(ACC.EQ.2 .OR. (STY.NE.2.AND.STY.NE.6))GOTO ACC_DONE

; if the "install corners" question has been answered (daccc.ne.0), then
; don't ask each time thru...
	IF(CNGCTL.EQ.0 .AND. DACCC.NE.0)GOTO ACC_DONE

	DACCC=2		;NO CORNERS INSTALLED
; if dcat is 3. 4-piece, or 4. other, all corners must
; be TCR corners...
	IF((ACC.EQ.2.OR.ACC.EQ.3) .OR. (STY.NE.2.AND.STY.NE.6))GOTO ACC_DONE

A_ACC,	
	CTL = '14,24,01,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	WLEN=23
	CALL CREATE_WND2
	for i from 1 thru 2
		BEGIN
		IF(I.EQ.1)
		THEN	XCALL W_DISP(WND_2,WD_ATTR,ATTR_SET+ATTR_RVRS)
		ELSE	XCALL W_DISP(WND_2,WD_ATTR,ATTR_CLR+ATTR_RVRS)
		XCALL W_DISP(WND_2,WD_POS,I+1,1,WD_CLR,WDC_EOL)
		XCALL W_DISP(WND_2,WD_POS,1+I,1,DACC2(I))
		END
	CALL INPUT
	CALL CLEAR_WND2
	GOTO (ACC), INXCTL
	DACCC=ENTRY(1,1)
	IF(DACCC.EQ.0) DACCC=1
	IF(DACCC.LT.1.OR.DACCC.GT.2) GOTO A_ACC
	XCALL W_DISP(W_ID,WD_POS,ROW,22,DACC2(DACCC))
	D_DACCC=DACCC
ACC_DONE,
	GOTO ANYCNG

SLIPS,
	IF((STY.NE.1.AND.STY.NE.5) .OR. (ACC.NE.1.AND.ACC.NE.3))GOTO BADCNG
	CTL = '15,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		ENTRY=SLIPS,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END
		
	SLIPS = ENTRY
	IF (SLIPS.EQ.0) SLIPS = WRK_JOINT * 2
	IF (SLIPS.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = SLIPS,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO SLIPS
	IF (SLIPS.EQ.0) GOTO ENDSLP

GETSLP,
		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,SLPITM)
	IF (SLPITM.EQ.BLANKS) GOTO ENTSLP
	KEY = SLPITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  ;;;XCALL MESAG ('SLIPS: Invalid item number',2)
	  XCALL OLMSG (WND_1,23,'SLIPS: Invalid item number',2)
	  GOTO ENTSLP
	END
;;;	XCALL W_DISP(W_ID,WD_POS,ROW,40,DESCR)
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTSLP
;;;	XCALL W_DISP(W_ID,WD_POS,ROW,40,DESCR)
	SLPPRC = PRICE
	SLPDES = DESCR
	GOTO ENDSLP

ENTSLP,
		; Enter the slip sizes ( item numbers here )
	CTL = '15,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (SLIPS), INXCTL
	SLPITM = ENTRY
	GOTO GETSLP
ENDSLP,
	IF(BADSLP)RETURN
	GOTO ANYCNG

DRIVES,
;;;	IF(STY.NE.1 .OR. (ACC.NE.1.AND.ACC.NE.3))GOTO BADCNG
	IF((STY.NE.1.AND.STY.NE.5) .OR. (ACC.NE.1.AND.ACC.NE.3))GOTO BADCNG
	CTL = '16,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY .EQ. BLANKS)
		BEGIN
		DRIVES = WRK_JOINT * 2
		ENTRY=DRIVES,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	DRIVES = ENTRY

	IF (DRIVES.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = DRIVES,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	IF (INXCTL.NE.1) GOTO DRIVES
	IF (DRIVES.EQ.0) GOTO ENDDRV

GETDRV,
		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,DRVITM)
	IF (DRVITM.EQ.BLANKS) GOTO ENTDRV
	KEY = DRVITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  ;;;XCALL MESAG ('DRIVES: Invalid item number',2)
	  XCALL OLMSG(WND_1,23,'DRIVES: Invalid item number',2)
	  GOTO ENTDRV
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTDRV
	DRVPRC = PRICE
	DRVDES = DESCR
	GOTO ENDDRV

ENTDRV,		; Enter the drive sizes ( item numbers here )
	CTL = '16,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (DRIVES), INXCTL
	DRVITM = ENTRY
	GOTO GETDRV
ENDDRV,
	IF(BADDRV)RETURN
	GOTO ANYCNG

TCORN,
;;;	IF((STY.NE.2.AND.STY.NE.6) .OR. (ACC.NE.1.AND.ACC.NE.4))GOTO BADCNG

	USING STY SELECT
	(2,6,7),	NOP
	(),		GOTO BADCNG
	ENDUSING

	IF(ACC.NE.1.AND.ACC.NE.4) GOTO BADCNG

	TCORN	= 		;---------------------
;;;	CORITM	= 		;Corners
	CORPRC	=		;
	CORDES	=		;---------------------
	ENTRY =
	CTL = '15,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		ENTRY=TCORN,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END
	TCORN = ENTRY
	IF (ENTRY.EQ.'     ') 
		BEGIN
		TCORN = WRK_JOINT * 8		;;;4/27/93
		IF (BAROK) TCORN = 0		;;;4/27/93
		END
	IF (TCORN.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TCORN,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TCORN
	IF (TCORN.EQ.0) GOTO ENDCOR

GETCOR,
		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,CORITM)
	IF (CORITM.EQ.BLANKS) GOTO ENTCOR
	KEY = CORITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  XCALL MESAG ('TDC CORNERS: Invalid item number',2)
	  GOTO ENTCOR
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTCOR	;;; 7/24/93
	CORPRC = PRICE
	CORDES = DESCR
	GOTO ENDCOR

ENTCOR,
		; Enter corner item number here
	CTL = '15,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TCORN), INXCTL
	CORITM = ENTRY
	GOTO GETCOR
ENDCOR,
	IF(BADCOR)RETURN
	GOTO ANYCNG

TNBQTY,
;;;	IF((STY.NE.2.AND.STY.NE.6) .OR. (ACC.NE.1.AND.ACC.NE.4))GOTO BADCNG
	USING STY SELECT
	(2,6,7),	NOP
	(),		GOTO BADCNG
	ENDUSING

	IF(ACC.NE.1.AND.ACC.NE.4) GOTO BADCNG
	TNBQTY	=		;---------------------
	TNBITM	=		;TDC nuts & bolts
	TNBPRC	=		;
	TNBDES	=		;---------------------
	ENTRY =
	CTL = '16,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		ENTRY=TNBQTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	TNBQTY = ENTRY
	IF (ENTRY.EQ.'     ') IF (TCORN) TNBQTY = ORG_CORN / 2
	IF (TNBQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TNBQTY,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TNBQTY
	IF (TNBQTY.EQ.0) GOTO ENDTNB

GETTNB,
		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TNBITM)
	IF (TNBITM.EQ.BLANKS) GOTO ENTTNB
	KEY = TNBITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  XCALL MESAG ('TDC NUTS & BOLTS: Invalid item number',2)
	  GOTO ENTTNB
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTTNB
	TNBPRC = PRICE
	TNBDES = DESCR
	GOTO ENDTNB

ENTTNB,
		; Enter TNB nuts/bolts item number here
	CTL = '16,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TNBQTY), INXCTL
	TNBITM = ENTRY
	GOTO GETTNB
ENDTNB,
	IF(BADTNB)RETURN
	GOTO ANYCNG

TGAQTY,
;;;	IF((STY.NE.2.AND.STY.NE.6) .OR. (ACC.NE.1.AND.ACC.NE.4))GOTO BADCNG
	USING STY SELECT
	(2,6,7),	NOP
	(),		GOTO BADCNG
	ENDUSING

	IF(ACC.NE.1.AND.ACC.NE.4) GOTO BADCNG

	TGAQTY	=		;---------------------
	TGAITM	=		;Gasket
	TGAPRC	=		;
	TGADES	=		;---------------------
	ENTRY =
	CTL = '17,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		ENTRY=TGAQTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	TGAQTY = ENTRY
	IF (ENTRY.EQ.'     ') TGAQTY = POUNDS / ((DUCLBS * SIZE3) #3)
	IF (ENTRY.EQ.'     ') TGAQTY = X_WGHT / ((DUCLBS * SIZE3) #3)
	IF (TGAQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TGAQTY,'ZZZZX-'
		ALPHA (7,9) = 'Ft '
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,17,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TGAQTY
	IF (TGAQTY.EQ.0) GOTO ENDTGA

GETTGA,		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TGAITM)
	IF (TGAITM.EQ.BLANKS) GOTO ENTTGA
	KEY = TGAITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  XCALL MESAG ('TDC GASKET: Invalid item number',2)
	  GOTO ENTTGA
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTTGA
	TGAPRC = PRICE
	TGADES = DESCR
	GOTO ENDTGA

ENTTGA,
		; Enter TDC gasket item number here
	CTL = '17,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TGAQTY), INXCTL
	TGAITM = ENTRY
	GOTO GETTGA
ENDTGA,
	IF(BADTGA)RETURN
	GOTO ANYCNG

TCLQTY,
;;;	IF((STY.NE.2.AND.STY.NE.6) .OR. (ACC.NE.1.AND.ACC.NE.4))GOTO BADCNG
	USING STY SELECT
	(2,6,7),	NOP
	(),		GOTO BADCNG
	ENDUSING

	IF(ACC.NE.1.AND.ACC.NE.4) GOTO BADCNG

	TCLQTY	=		;---------------------
	TCLITM	=		;Cleats
	TCLPRC	=		;
	TCLDES	=		;---------------------
	ENTRY =
	CTL = '18,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		TCLQTY = ( ( TGAQTY*100 ) / DUCCLE )#1
		ENTRY=TCLQTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END		
	TCLQTY = ENTRY

	IF (TCLQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TCLQTY,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TCLQTY
	IF (TCLQTY.EQ.0) GOTO ENDTCL

GETTCL,		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TCLITM)
	IF (TCLITM.EQ.BLANKS) GOTO ENTTCL
	KEY = TCLITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  XCALL MESAG ('TDC CLEATS: Invalid item number',2)
	  GOTO ENTTCL
	END
	BADTCL=0
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTTCL
	TCLPRC = PRICE
	TCLDES = DESCR
	GOTO ENDTCL

ENTTCL,
		; Enter item number here
	CTL = '18,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TCLQTY), INXCTL
	TCLITM = ENTRY
	GOTO GETTCL
ENDTCL,
	IF(BADTCL)RETURN
	GOTO ANYCNG

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TDC BAR REMOVED 11-1-00 SSQ
;;;TBAQTY,
;;;TBNQTY,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;---------------------------------------------
;new fields...
TR1QTY,
	IF(DREIN.EQ.2 .OR. DREIN2.EQ.2)GOTO BADCNG
	TR1QTY	=		;---------------------
;;;	TR1ITM	=		;Tie rods 1
	TR1PRC	=		;
	TR1DES	=		;---------------------
	ENTRY =
	
	CTL = '19,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		TR1QTY = T1CNT
		ENTRY=TR1QTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	TR1QTY = ENTRY
	IF (TR1QTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TR1QTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TR1QTY
	IF (TR1QTY.EQ.0) GOTO ENDTR1

GETTR1,
	IF (DRANGL) TR1ITM = DPUNCH		;SSQ 10-28-04
		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TR1ITM)
	IF (TR1ITM.EQ.BLANKS) GOTO ENTTR1
	KEY = TR1ITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  xcall w_disp(w_id,wd_pos,23,1,'Invalid item number')
	  XCALL MESAG ('TIERODS: Invalid item number',2)
	  GOTO ENTTR1
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTTR1
	TR1PRC = PRICE
	TR1DES = DESCR
	IF (DRANGL)
		BEGIN
		TR1DES(1,8) = 
		TR1DES(1,3) = SZ1, 'ZZX' [LEFT]
		D3 = %TRIM(TR1DES(1,3))
		INCR D3
		TR1DES(D3,D3) = '/'
		INCR D3
		TR1DES(D3,D3+1) = SZ2, 'ZX' [LEFT]
		END

	GOTO ENDTR1

ENTTR1,
		; Enter item number here
	CTL = '19,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TR1QTY), INXCTL
	TR1ITM = ENTRY
	GOTO GETTR1
ENDTR1,
	IF(BADTR1)RETURN
	GOTO ANYCNG

TR2QTY,
	IF (DRANGL) GOTO BADCNG		;SSQ 10-28-04
	IF(DREIN.EQ.2 .OR. DREIN2.EQ.2)GOTO BADCNG
	TR2QTY	=		;---------------------
;;;	TR2ITM	=		;Tie Rods 2
	TR2PRC	=		;
	TR2DES	=		;---------------------
	ENTRY =
	CTL = '20,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		TR2QTY=T2CNT
		TR2QTY=T2CNT
		ENTRY=TR2QTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	TR2QTY = ENTRY
	IF (TR2QTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TR2QTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO TR2QTY
	IF (TR2QTY.EQ.0) GOTO ENDTR2

GETTR2,		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TR2ITM)
	IF (TR2ITM.EQ.BLANKS) GOTO ENTTR2
	KEY = TR2ITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  xcall w_disp(w_id,wd_pos,23,1,'Invalid item number')
	  XCALL MESAG ('TIERODS: Invalid item number',2)
	  GOTO ENTTR2
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTTR2
	TR2PRC = PRICE
	TR2DES = DESCR
	GOTO ENDTR2

ENTTR2,
		; Enter item number here
	CTL = '20,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (TR2QTY), INXCTL
	TR2ITM = ENTRY
	GOTO GETTR2
ENDTR2,
	IF(BADTR2)RETURN
	GOTO ANYCNG

HLQTY,
	IF (DRANGL) GOTO BADCNG		;SSQ 10-28-04
	IF(DREIN.EQ.2)GOTO BADCNG
	HLQTY	=		;---------------------
;;;	HLITM	=		;Reinforcement Holes
	HLPRC	=		;
	HLDES	=		;---------------------
	ENTRY =
	CTL = '21,19,05,00,#-'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (BEGIN), INXCTL
	IF(ENTRY.EQ.BLANKS)
		BEGIN
		HLQTY=HLCNT
		ENTRY=HLQTY,	M5 [LEFT]
		XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL,ENTRY)
		END

	HLQTY = ENTRY

	IF (HLQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = HLQTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Qty OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO HLQTY
	IF (HLQTY.EQ.0) GOTO ENDHL

GETHL,		; Get the item from inventory
	XCALL W_DISP(W_ID,WD_POS,ROW,31,HLITM)
	IF (HLITM.EQ.BLANKS) GOTO ENTHL
	KEY = HLITM
	CALL ITMMAS
	IF (SRCCTL)
	BEGIN
	  XCALL MESAG ('HOLES PUNCHED: Invalid item number',2)
	  GOTO ENTHL
	END
	XCALL W_DISP(W_ID,WD_POS,ROW,48,' Item OK <Y> ? ')
	CTL (4,14) = '65,01,00,YY'
	CALL INPUT
	XCALL W_DISP(W_ID,WD_POS,ROW,48,WD_CLR,WDC_EOL)
	IF (INXCTL.NE.1) GOTO ENTHL
	HLPRC = PRICE
	HLDES = DESCR
	GOTO ENDHL

ENTHL,
		; Enter item number here
	CTL = '21,31,15,01,A '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	CALL INPUT
	GOTO (HLQTY), INXCTL
	HLITM = ENTRY
	GOTO GETHL
ENDHL,
	IF(BADHL)RETURN
	GOTO ANYCNG

;---------------------------------------------
REVRS_ACC,
	CTL = '08,30,01,01,YN'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,'REVERSE ACCESSORIES?')
	COL = 53
	CALL INPUT
	REVRS_ACC = INXCTL
	RETURN
;---------------------------------------------

BADCNG,
	CNGCTL = 3
ANYCNG,
	FIRST=
	UNLOCK 1
	UNLOCK 2

; Recompute reinforcement qtys
	IF(DREIN.EQ.1)	CALL PUNCH_PATTERN	;COUNT HOLES AND TIE RODS
	
; Redisplay acc info if any...
	IF(RE_COMPUTE) CALL CALC_ACC	;SSQ 3-31-03
;;;	CALL CALC_ACC		;NEW

; Take care of any bad iventory item #'s...
	IF(BADSLP)
		BEGIN
		CALL ENTSLP
		CLEAR BADSLP
		END
	IF(BADDRV)
		BEGIN
		CALL ENTDRV
		CLEAR BADDRV
		END
	IF(BADCOR)
		BEGIN
		CALL ENTCOR
		CLEAR BADCOR
		END
	IF(BADTNB)
		BEGIN
		CALL ENTTNB
		CLEAR BADTNB
		END
	IF(BADTGA)
		BEGIN
		CALL ENTTGA
		CLEAR BADTGA
		END
	IF(BADTR1)
		BEGIN
		CALL ENTTR1
		CLEAR BADTR1
		END
	IF(BADTR2)
		BEGIN
		CALL ENTTR2
		CLEAR BADTR2
		END
	IF(BADHL)
		BEGIN
		CALL ENTHL
		CLEAR BADHL
		END

	CNGCTL=5			;ALLOW ZERO WHATNO
	XCALL WANCN (WND_1,23,CNGCTL,WHATNO)
	GOTO (PROCES),CNGCTL+1

	IF(WHATNO.EQ.0)GOTO DON		;SET/RESET DEFAULTS

	GOTO(DPC,XTYPE,CAT,STY,SEAM,SEAL,JOINT,SIZE1,GAUGE,LINER),WHATNO
	GOTO(DREIN,DPUNCH,LOCAT,ACC,SLIPS,DRIVES,TCORN,TNBQTY),WHATNO-10
	GOTO(TGAQTY,TCLQTY,BADCNG,BADCNG,TR1QTY,TR2QTY,HLQTY),WHATNO-18
;;;	GOTO(GPRICE,LINPRC), WHATNO-25
	IF(WHATNO.EQ.26)
		BEGIN
		CALL GPRICE
		GOTO ANYCNG
		END

	IF(WHATNO.EQ.27)
		BEGIN
		CALL LINPRC
		GOTO ANYCNG
		END

	GOTO BADCNG
XTYPE,
	XCALL W_DISP(WND_1,WD_POS,23,1,'Delete Entry (Y/N)?')
	CTL='23,21,01,00,YN'
	CALL INPUT
	GOTO(BEGIN,ANYCNG),INXCTL
	GOTO ANYCNG
PROCES,

	USING SELECT SELECT
	(1),	BEGIN		;ADD
		dcngd = 1	;3-2-10, in case new duct add to existing ord.
		LOKCTL = 1
		INCR NXTSEQ
		DSEQ=NXTSEQ
		XCALL ISIO (5,DUCACC,KEY175,STORE,LOKCTL)
		IF (LOKCTL.NE.0) GOTO FULL
		call count_duct			;refresh array...
		END
	(2),	BEGIN
		LOKCTL=1
		dcngd = 0
		if (ducacc .ne. xducacc) dcngd = 1	;changed
		IF(XKEY175 .NE. KEY175)
		THEN	BEGIN		;KEY FIELDS CHANGED
			XCALL ISIO(5,XDUCACC,XKEY175,DELETE,LOKCTL)
			XCALL ISIO (5,DUCACC,KEY175,STORE,LOKCTL)
			xcall getrfa(5,newrfa)		;
			savrfa = newrfa
			if (pi.gt.0) parrfa(pi) = savrfa
			if (u_i.gt.0) u_rfa(u_i) = savrfa
			END
		ELSE	XCALL ISIO (5,DUCACC,KEY175,WRITE,LOKCTL)
		END
	ENDUSING

	IF (F5_ON) GOTO F5_POP
	GO TO BEGIN

FULL,
	XCALL MESAG( 'RECORD NOT ADDED. "DUCACC" FILE MUST BE EXPANDED',1)
;;;	FULL = 1
	RETURN

CLRMNU,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	FOR I FROM 1 THRU NUMI	XCALL W_DISP(W_ID,WD_POS,I+1,65,WD_CLR,WDC_EOL)
	IF(CAT.NE.0)
		BEGIN
		ALPHA =
		ALPHA (1,1) = CAT,'X'
		ALPHA (5,19) = DCAT(CAT)
		XCALL W_DISP(W_ID,WD_POS,4,19,ALPHA)
		END

	IF(SEAM.NE.0)
		BEGIN
		ALPHA =
		ALPHA (1,1) = SEAM,'X'
		ALPHA (5,19) = DSEAM(SEAM)
		XCALL W_DISP(W_ID,WD_POS,6,19,ALPHA)
		END
DSPPRC,
	IF(GPRICE.GT.0)
		BEGIN
		XCALL W_DISP(W_ID,WD_POS,10,63,'26. Price')
		ALPHA (1,7) = GPRICE,'ZZZ.XXX'
		XCALL W_DISP(W_ID,WD_POS,10,73,ALPHA(1,7))
		END

	IF(LINPRC.GT.0)
		BEGIN
		XCALL W_DISP(W_ID,WD_POS,11,63,'27. Price')
		ALPHA (1,7) = LINPRC,'ZZZ.XXX'
		XCALL W_DISP(W_ID,WD_POS,11,73,ALPHA(1,7))
		END
	RETURN
;------------------------------------------------------------

INPUT,
;;;	XCALL INPUT (ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,1)
;;;	XCALL WINPT (W_ID,ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL)
	XCALL WINPT (W_ID,ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL,F_KEY)
	RETURN

ACCEPT,
	XCALL FLAGS(00010000,1)
	XCALL W_DISP(W_ID,WD_ACCEPT,TCHAR)
	IF(TCHAR.EQ.10) GOTO ACCEPT
	IF(TCHAR.EQ.13) ACCEPT(15,DCHAR)
	XCALL FLAGS(00010000,0)
	RETURN
;------------------------------------------------

CALLIN,		; Calculate the number of square feet of liner for this item
;; re-read parameter file (ssq 10/03/01)...
		; Get the parameter information for that gauge
	OPEN (8,I,FIL174)
	LOKCTL = 1
	XCALL IO (8,DUCFIL,GAUGE,READ,LOKCTL)
	CLOSE 8	

	DEC1 = 
	DEC2 =
	DEC3 =
	SQFLIN =

	DEC1 = ( DLINE * SQFEET ) #2
		; DLINE is a overage % of square feet ( SEE DUCMNT.COP )

	IF (DEC1.GT.0) DEC1 = ( DEC1 + 500 ) #3
	IF (DEC1.LT.0) DEC1 = ( DEC1 - 500 ) #3

	SQFLIN = DEC1 + SQFEET
		; Calculate the waste, and add square feet of duct

	IF (LINER.EQ.4) SQFLIN =
	L24LSF=SQFLIN,	'ZZZZX' [LEFT]
	XCALL W_DISP(WND_1,WD_POS,24,56,LN24)	
	CALL GET_LINER_PRICE

	RETURN
;------------------------------------------------

ITMMAS,
;;;	LOKCTL = 1
;;;	XCALL IO (1,INVMAS,1,READ,LOKCTL)
;;;	BSEND = ORG041
;;;	XCALL SERCH (2,ITMIDX,KEY,1,15,BSEND,BSMID,SRCCTL,1,16,20,0,0,0,0)
;;;	IF(IRC041.LE.0) SRCCTL=1
;;;	IF (SRCCTL.EQ.1) RETURN

	LOKCTL = 1
	XCALL ISIO (1, INVMAS, KEY, READ, LOKCTL)	;ISAM
;;;	XCALL IO (1,INVMAS,IRC041,READ,LOKCTL)

; ssq 7-14-05: check for qty based pricing...
	TBL_KEY = 'I1'
	I1_KEY = KEY
	CALL GET_TABLE
	IF (LOKCTL .EQ. 0) PRICE = I1_PRICE(1)	;1st price
; ssq 7-14-05: check for qty based pricing...
		
	RETURN

CLRACC,
	for i from 15 thru 21	XCALL W_DISP(W_ID,WD_POS,I,19,WD_CLR,WDC_EOL)

;------------------------------------
;;;ssq 3-12-03 save item numbers ...
	SAVSLP = SLPITM
	SAVDRV = DRVITM
	SAVCOR = CORITM
	SAVTNB = TNBITM
	SAVTGA = TGAITM
	SAVTCL = TCLITM
	SAVTBA = TBAITM
	SAVTBN = TBNITM
	SAVTR1 = TR1ITM
	SAVTR2 = TR2ITM
	SAVHL  = HLITM
	SAVCM  = CMITM
;------------------------------------

	SLIPS	=		;---------------------
	SLPITM	=		;Slips
	SLPPRC	=		;
	SLPDES	=		;---------------------
	DRIVES	=		;---------------------
	DRVITM	=		;Drives
	DRVPRC	=		;
	DRVDES	=		;---------------------
	TCORN	= 		;---------------------
	CORITM	= 		;Corners
	CORPRC	=		;
	CORDES	=		;---------------------
	TNBQTY	=		;---------------------
	TNBITM	=		;TDC nuts & bolts
	TNBPRC	=		;
	TNBDES	=		;---------------------
	TGAQTY	=		;---------------------
	TGAITM	=		;Gasket
	TGAPRC	=		;
	TGADES	=		;---------------------
	TCLQTY	=		;---------------------
	TCLITM	=		;Cleats
	TCLPRC	=		;
	TCLDES	=		;---------------------
	TBAQTY	=		;---------------------
	TBAITM	=		;TDC bar
	TBAPRC	=		;
	TBADES	=		;---------------------
	TBNQTY	=		;---------------------
	TBNITM	=		;TDC bar nuts & bolts
	TBNPRC	=		;
	TBNDES	=		;---------------------
;-----------------------------------------------------
	TR1QTY	=		;---------------------
	TR1ITM	=		;Tie rods 1
	TR1PRC	=		;
	TR1DES	=		;---------------------
	TR2QTY	=		;---------------------
	TR2ITM	=		;Tie rods 2
	TR2PRC	=		;
	TR2DES	=		;---------------------
	HLQTY	=		;---------------------
	HLITM	=		;Holes
	HLPRC	=		;
	HLDES	=		;---------------------
	
	CMQTY	=
	CMITM	=
	CMPRC	=
	CMDES	=
	RETURN
;------------------------------------------------------
ENDOFF,
	OHSEQ = NXTSEQ 
	IF(WND_1)XCALL W_PROC(WP_DELETE,WND_1)
	XRETURN
;==========================================================
;==========================================================

GET_TABLE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CHN182 = 17	;OPENED IN ORDADD
	XCALL ISIO (CHN182,COPTBL,TBL_KEY,READ,LOKCTL)
	RETURN
;--------------------------------------------------------------

GET_DUCT_PRICE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; LOOK UP DUCT PRICE IN COPTBL
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CTL = '10,73,06,00,#N'
	XCALL W_DISP(W_ID,WD_POS,ROW,63,'26. Price')

	CALL GDT_TAB

	IF (LOKCTL.NE.0) CLEAR DP_PRICE
	GPRICE = DP_PRICE
	ALPHA (1,7) = GPRICE,'ZZZ.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,ALPHA(1,7))
	GPRC_ENT = 0

	IF(GPRICE.NE.0)RETURN
	XCALL W_DISP(W_ID,WD_POS,23,1,'ACCEPT ZERO DUCT PRICE?')
	XCALL WINPT(W_ID,23,26,01,01,'YN',ENTRY,INXCTL)
	XCALL W_DISP(W_ID,WD_CLR,WDC_LIN)
	IF(INXCTL.EQ.1)RETURN
	CALL GPRICE
	RETURN
;--------------------------------------------------------------

GDT_TAB,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR TBL_KEY
	TBLCOD = 'DP'	
	DP_GAUGE = GAUGE
	DP_TYPE = DUTYPE
	DP_CAT = CAT
	DP_STYLE = STY
	
	CALL GET_TABLE
	RETURN
;--------------------------------------------------------------
LIN_TAB,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR TBL_KEY
	TBLCOD = 'LP'
	LP_KEY = LINER

	CALL GET_TABLE
	RETURN
;--------------------------------------------------------------

GPRICE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CTL = '10,73,06,01,#N'
	CALL INPUT
	GOTO (BEGIN), INXCTL
	GPRICE = ENTRY
	ALPHA (1,7) = GPRICE,'ZZZ.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,ALPHA(1,7))
	RETURN
;--------------------------------------------------------------

GET_LINER_PRICE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			;;; LOOK UP LINER PRICE IN TABLE
			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CTL = '11,73,06,00,#N'
	XCALL W_DISP(W_ID,WD_POS,ROW,63,'27. Price')
	CLEAR TBL_KEY
	TBLCOD = 'LP'
	LP_KEY = LINER
	CALL GET_TABLE
	IF (LOKCTL.NE.0) CLEAR DP_PRICE
	LINPRC = DP_PRICE
	ALPHA (1,7) = LINPRC,'ZZZ.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,ALPHA(1,7))

	IF(LINER.EQ.4)RETURN		;4=NONE
	LPRC_ENT = 0
	IF(LINPRC.NE.0)RETURN
	XCALL W_DISP(W_ID,WD_POS,23,1,'ACCEPT ZERO LINER PRICE?')
	XCALL WINPT(W_ID,23,27,01,01,'YN',ENTRY,INXCTL)
	XCALL W_DISP(W_ID,WD_CLR,WDC_LIN)
	IF(INXCTL.EQ.1)RETURN
	CALL LINPRC
	RETURN
;--------------------------------------------------------------

LINPRC,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CTL = '11,73,06,01,#N'
	CALL INPUT
	GOTO (BEGIN), INXCTL
	LINPRC = ENTRY
	ALPHA (1,7) = LINPRC,'ZZZ.XXX'
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,ALPHA(1,7))

	RETURN
;--------------------------------------------------------------

;;=======================================================
DIS_REST,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ALPHA =
if(cat.lt.1 .or. cat.gt.5)cat=1
	ALPHA (1,1) = CAT,'X'
	ALPHA (5,19) = DCAT(CAT)
	XCALL W_DISP(W_ID,WD_POS,4,19,ALPHA)

	ENTRY(1,5)=JOINT,'ZZZZX' [LEFT]
	XCALL W_DISP(W_ID,WD_POS,8,19,ENTRY(1,5))

	ENTRY(1,7)=SIZE1,'ZZX.XXX' [LEFT]
	XCALL W_DISP(W_ID,WD_POS,9,19,ENTRY(1,7))
	XCALL W_DISP(W_ID,WD_POS,9,27,'X')
	ENTRY(1,7)=SIZE2,'ZZX.XXX' [LEFT]
	XCALL W_DISP(W_ID,WD_POS,9,29,ENTRY(1,7))
	XCALL W_DISP(W_ID,WD_POS,9,37,'X')
	ENTRY(1,2)=SIZE3,'ZX' [LEFT]
	XCALL W_DISP(W_ID,WD_POS,9,40,ENTRY(1,2))

	ENTRY(1,2)=GAUGE,'XX'
	XCALL W_DISP(W_ID,WD_POS,10,19,ENTRY(1,2))

	XCALL W_DISP(W_ID,WD_POS,13,51,LOCAT)
	if (dpunch .ne. '0')
	  begin
	  XCALL W_DISP(W_ID,WD_POS,13,19,DPUNCH(1,15))
	  end
	RETURN
;--------------------------------------------------------------


DIS_DEFAULTS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DPC = D_DPC	
	DUTYPE= D_DUTYPE	; Type of duct 1-GALV,2-ALUM,3-STAIN STEEL,4-OTHER(0)
	STY = D_STY		; Style 1-SLIP/DRIVE,2-TDC,3-NEXUS,4-OTHER	(1)
	LINER = D_LINER		; Liner 1-					(2)
	SEAM = D_SEAM		; Seam  1-SNAP/LOCK,2-PITTSBURG			(3)
	SEAL = D_SEAL		; Sealnant 1-YES,2-NO				(4)
	GAUGE = D_GAUGE		; Gauge ( 26,24,22,20,18 )			(5)
	THICK = D_THICK		; Dec. Thickness .024-24g .032-22g .040-20g .050-18g
	CAT = D_CAT		; Catagory 1-LSHAP,2-WRAPAROUND,3-4 PC,4-OTHER
;;;2-28-01	LOCAT = D_LOCAT		; Location ( comment )
;;;2-28-01	IF(LOCAT.EQ.'0')LOCAT=
	LOCAT=SAVLOC			;2-28-01
	DPUNCH = D_PUNCH		; Punch pattern, or note
	IF(DPUNCH.EQ.'0')DPUNCH=
	ACC = D_ACC	
	DREIN = D_DREIN	
	DREIN2 = D_DTIER	;TIERODS
	DACCC=D_DACCC

	XCALL W_DISP(W_ID,WD_POS,1,19,'1')
DIS_DATA,
	IF(DPC.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,2,1,' ')
		A4=DPC,'ZX.X' [LEFT]
		XCALL W_DISP(W_ID,WD_POS,2,19,A4)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,2,1,'*')

	IF(DUTYPE.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,3,1,' ')
		ALPHA =
		ALPHA (1,1) = DUTYPE,'X'
		ALPHA (5,19) = DTYPE(DUTYPE)
		XCALL W_DISP(W_ID,WD_POS,3,19,ALPHA)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,3,1,'*')

	IF(STY.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,5,1,' ')
		ALPHA =
		ALPHA (1,1) = STY,'X'
		ALPHA (5,19) = DSTY(STY)
		XCALL W_DISP(W_ID,WD_POS,5,19,ALPHA)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,5,1,'*')

	IF(SEAM.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,6,1,' ')
		ALPHA =
		ALPHA (1,1) = SEAM,'X'
		ALPHA (5,19) = DSEAM(SEAM)
		XCALL W_DISP(W_ID,WD_POS,6,19,ALPHA)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,6,1,'*')

	IF(SEAL.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,7,1,' ')
		ALPHA =
		ALPHA (1,1) = SEAL,'X'
		ALPHA (5,19) = DSEAL(SEAL)
		XCALL W_DISP(W_ID,WD_POS,7,19,ALPHA)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,7,1,'*')

	IF(LINER.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,11,1,' ')
		ALPHA =
		ALPHA (1,1) = LINER,'X'
		ALPHA (5,19) = DLINER(LINER)
		XCALL W_DISP(W_ID,WD_POS,11,19,ALPHA)
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,11,1,'*')

;;;	IF(D_LOCAT.EQ.'0')
;;;	THEN	XCALL W_DISP(W_ID,WD_POS,13,39,'*')
;;;	ELSE	XCALL W_DISP(W_ID,WD_POS,13,51,LOCAT)

	IF(D_LOCAT.EQ.'0')	XCALL W_DISP(W_ID,WD_POS,13,39,'*')
	XCALL W_DISP(W_ID,WD_POS,13,51,LOCAT)

	IF(DREIN.EQ.1)
		BEGIN
		IF(D_PUNCH.EQ.'0')
		THEN	XCALL W_DISP(W_ID,WD_POS,13,1,'*')
		ELSE	XCALL W_DISP(W_ID,WD_POS,13,19,DPUNCH(1,15))
		END

	IF(DREIN.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,12,1,' ')
;;;		ALPHA =
;;;		ALPHA (1,1) = DREIN,'X'
;;;		ALPHA (5,30) = DRE(DREIN)
;;;		XCALL W_DISP(W_ID,WD_POS,12,19,ALPHA)
		XCALL W_DISP(W_ID,WD_POS,12,19,dre(drein))
		IF(DREIN2.GT.0)	XCALL W_DISP(W_ID,WD_POS,12,40,DTIER(DREIN2))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,12,1,'*')

	IF(ACC.GT.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,14,1,' ')
;;;		ALPHA =
;;;		ALPHA (1,1) = ACC,'X'
;;;		ALPHA (5,30) = DACC(ACC)
;;;		XCALL W_DISP(W_ID,WD_POS,14,19,ALPHA)
		XCALL W_DISP(W_ID,WD_POS,14,19,dacc(acc))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,14,1,'*')

	RETURN
;--------------------------------------------------------------

CLR_REI,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; CLEAR REINFORCEMENT DATA
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;	CLEAR DREIN2
	CLEAR TR1QTY, TR1ITM, TR1PRC, TR1DES
	CLEAR TR2QTY, TR2ITM, TR2PRC, TR2DES
	CLEAR HLQTY, HLITM, HLPRC, HLDES
	IF(DREIN.EQ.2) RETURN
;;;	IF(DREIN2.EQ.1 .AND. RE_CALC_REI.EQ.1)
	IF(DREIN2.EQ.1)
		BEGIN
		CALL CAL_TR1QTY
		CALL CAL_TR2QTY
		END
	CALL CAL_HLQTY
	CALL CAL_RANGLE		;SSQ 10-28-04
	XCALL W_UPDT

	RETURN
;--------------------------------------------------------------

CALC_CAT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; DETERMINE CATEGORY
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	IF(SZ1.GT.120.OR.SZ2.GT.120)
		BEGIN
	 	CAT=5	;OVERSIZE
		GOTO END_CC
		END
	IF(SZ1+SZ2.GT.120)			CAT=3	;4-PIECE
	IF(SZ1+SZ2.LE.120)			CAT=1	;L-SHAPED
	IF(SZ1+SZ2.LE.30 .AND. (STY.EQ.2.OR.STY.EQ.6))	CAT=2	;WRAPAROUND ssq 9/5/02
;;;	IF(SZ1+SZ2.LE.32 .AND. (STY.EQ.2.OR.STY.EQ.6))	CAT=2	;WRAPAROUND
;;;	IF(SZ1+SZ2.LE.23 .AND. (STY.EQ.1.OR.STY.EQ.5))	CAT=2	;WRAPAROUND
	IF(SZ1+SZ2.LE.23 .AND. 
&		(STY.EQ.1.OR.STY.EQ.3.OR.STY.EQ.4.OR.STY.EQ.5))	CAT=2	;WRAPAROUND

	SAVCAT=CAT		;CALCULATED VALUE
END_CC,
	ALPHA =
	ALPHA (1,1) = CAT,'X'
	ALPHA (5,19) = DCAT(CAT)
	XCALL W_DISP(W_ID,WD_POS,4,19,ALPHA)

	CC_CAT=1
	CALL GET_PCHART
	CC_CAT=0
	RETURN
;--------------------------------------------------------------

GET_PCHART,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; LOOK UP PRESSURE CHART IN COP TABLE
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	IF (DPC .EQ. 999) GOTO OLD_PC

; 2-19-08: new logic inserted...
	clear pc_found, tbl_punch	;assume not found

	clear dpunch
	if (re_punch) goto re_punch	;user changed gauge...

	clear wrkga
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; P2 table determins the gauge for the pc/len/dim

	clear tblkey
	tblcod = 'P2'
	px_chart = dpc
	px_len = size3
	px_dim = sz1
	read (chn182, coptbl, tbl_key) [err=chk_d1]	
chk_d1,
	if (px_chart.gt.dpc .or. px_len.gt.size3 .or. p2_gauge.le.0)
		begin
		XCALL OLMSG(WND_1,23,'These dimensions are off the chart',2)
		return
		end

	wrkga = p2_gauge
	tblgag = wrkga
;;;	maxsiz = p2_dim					;max dim for sz1
;;; may execute this code again if user changes ga - so first table read
;;; just gets maxdim...

re_punch,	; entry point if user changes gauge (wrkga set there) ...
	clear re_punch	;

	clear tblkey
	tblcod = 'PX'
	px_chart = dpc
	px_len = size3
	px_gauge = wrkga
	px_dim = sz1				
	read (chn182, coptbl, tbl_key) [err=set_d1]	;this gets maxdim...
set_d1,
	maxsiz = px_dim

	px_gauge = wrkga
	px_dim = maxsiz				; 2nd dimension...
	read (chn182, coptbl, tbl_key) [err=bad_key]	;SB exact match...
	
	if (px_punch .ne. 'na')	dpunch = px_punch

chk_d2,			; read table using siz2
	clear tblkey
	tblcod = 'PX'
	px_chart = dpc
	px_len = size3
	px_gauge = wrkga
	px_dim = sz2				; 2nd dimension...
	read (chn182, coptbl, tbl_key) [err=set_d2]	;this sb right dim...
set_d2,
	maxsiz = px_dim

	px_gauge = wrkga
	px_dim = maxsiz				; 2nd dimension...
	read (chn182, coptbl, tbl_key) [err=no_dim2]	;may not be exact match...
	
	if (px_punch .ne. 'na')
		begin
		ln = %trim (dpunch)
		ln = ln + 2
		dpunch(ln,ln) = 'X'
		ln = ln + 2
		dpunch(ln,30) = px_punch
		end
no_dim2,
	gauge = wrkga
;;;	tblgag = wrkga		;only set above 3-18-08

	ENTRY(1,2)=GAUGE,'XX'
	XCALL W_DISP(W_ID,WD_POS,10,19,ENTRY(1,2))
	if (dpunch .ne. '0')
	  begin
	  XCALL W_DISP(W_ID,WD_POS,13,19,DPUNCH(1,15))
	  end
	XCALL W_UPDT

	pc_found = 1
	tbl_punch = 1
bad_key,
;;; special case for pc=999; don't let table override default...
	IF(SAVPC .EQ. 999)DPUNCH = D_PUNCH	;SSQ 5-16-06

	return
;----------------------------------------------------------

;;; -old get_pchart logic- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
OLD_PC,
; 2-19-08: entire block of old logic...

	PC_FOUND = 0		;ASSUME NOT FOUND

;;; until valid chart info>>>	CLEAR DPUNCH
	CLEAR DPUNCH	;ssq 10-28-04

	CH_CODE = 'PC'
	CH_CHART = DPC
	CH_LEN = SIZE3		;LENGTH

	CH_DIM = SZ1
	TBL_KEY=CHKEY
	CALL GET_TABLE				;FIND PUNCH PATTERN SIZE1
;;; until valid chart info>>>	IF(PC_CHART .EQ. DPC) DPUNCH=PC_PUNCH	;PUNCH PATTERN
;;;	IF(PC_CHART .EQ. DPC) DPUNCH=PC_PUNCH	;ssq 10-28-04
;;;	IF(PC_CHART.EQ.DPC .AND. PC_PUNCH.NE.BLANKS) DPUNCH=PC_PUNCH	;SSQ 3-29-05
	IF(SAVPC.EQ.DPC .AND. PC_PUNCH.NE.BLANKS) DPUNCH=PC_PUNCH	;SSQ 5-16-06

;;; special case for pc=999; don't let table override default...
;;;	IF(PC_CHART .EQ. 999)DPUNCH = D_PUNCH	;SSQ 3-29-05
	IF(SAVPC .EQ. 999)DPUNCH = D_PUNCH	;SSQ 5-16-06

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; for rangle, don't look up 2nd dimension - nothing
;;; will be found, and a blank pc_punch will be returned.

	USING DPUNCH SELECT
	('WRI','WRJ','WRK'),	BEGIN
				DRANGL = 1
				GOTO SKIP_2ND
				END
	(),			DRANGL = 0
	ENDUSING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CH_DIM=SZ2
	TBL_KEY=CHKEY
	CALL GET_TABLE				;FIND PUNCH PATTERN SIZE2
;;;	IF(PC_CHART .EQ. DPC) ;enabled ssq 10-28-04
;;;	IF(PC_CHART.EQ.DPC .AND. PC_PUNCH.NE.A6) ;enabled ssq 10-28-04
	IF(SAVPC.EQ.DPC .AND. PC_PUNCH.NE.A6) ;enabled ssq 5-16-06
		BEGIN
		LN = %TRIM(DPUNCH)
		INCR LN
		DPUNCH(LN,LN)='X'		;SEPARATE SIZE1 X SIZE2
		INCR LN
		DPUNCH(LN,25)=PC_PUNCH		;PUNCH PATTERN SIZE2
		END

SKIP_2ND,
	DIMEN=SZ1
	IF(SZ2 .GT. DIMEN) DIMEN=SZ2

	CH_DIM = DIMEN
	TBL_KEY=CHKEY
	CALL GET_TABLE				;GAUGE IS FUNCTION OF  LONGEST
						;DIMENSION

;;;	IF(PC_CHART .NE. DPC) RETURN
	IF(SAVPC .NE. DPC) RETURN		;SSQ 5-16-06
	IF (PC_GAUGE.EQ.26 .AND. DUTYPE.EQ.5) PC_GAUGE = 24	;SSQ 8-22-01

	if (gauge .ne. 16)		;ssq 6-17-04
		begin
		GAUGE = PC_GAUGE
	;;;	SAVGAG= PC_GAUGE
		tblGAG= PC_GAUGE
		end

	ENTRY(1,2)=GAUGE,'XX'
;;;	IF(CC_CAT.NE.1)
;;;		BEGIN
		XCALL W_DISP(W_ID,WD_POS,10,19,ENTRY(1,2))
		if (dpunch .ne. '0')
		  begin
		  XCALL W_DISP(W_ID,WD_POS,13,19,DPUNCH(1,15))
		  end
		XCALL W_UPDT
;;;		END


	PC_FOUND = 1

	RETURN

;;; -old get_pchart logic- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;--------------------------------------------------------------

PUNCH_PATTERN,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; COUNT HOLES AND TIE RODS
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	IF (REVRS_ACC .EQ. 1)				;4-16-03 SSQ
	THEN	WRK_JOINT = -ORG_JOINT
	ELSE	WRK_JOINT = JOINT

	CLEAR XON, T1CNT, T2CNT, HLCNT
	IF(DREIN.EQ.2)RETURN			;NO RE-INFORCEMENT

	GOTO(ASKTR),LICRE		;L/I already created for this ductwork	

;------------------------------------------------------
;;; ssq 4-12-05 ssq: don't count rangle as part of
;	punch pattern.  ie in "WRJ" don't count the "J"

	TL = %INSTR(1, DPUNCH, 'WR')
	IF (TL .GT. 0) 
	THEN	TL = TL + 2	;pos of char in question...
	ELSE 	TL = 0
	
;------------------------------------------------------

CNTTRD,
	LN=%TRIM(DPUNCH)
	FOR I FROM 1 THRU LN
		BEGIN
		IF (I .EQ. TL)
		THEN	CLEAR A1	;4-12-05, don't count rangle
		ELSE	A1=DPUNCH(I,I)

		if (tbl_punch.eq.1 .and. A1 .eq. 'J') clear A1	;per sm

		upcase a1		;02-21-08 new tables
		IF(A1.EQ.'X')XON=1
		USING XON SELECT
		(0),	IF(A1.EQ.'C' .OR. A1.EQ.'J') INCR T2CNT
		(1),	IF(A1.EQ.'C' .OR. A1.EQ.'J') INCR T1CNT
		ENDUSING
		END
	T1CNT = T1CNT * WRK_JOINT
	T2CNT = T2CNT * WRK_JOINT
	HLCNT = T1CNT + T2CNT
	RETURN
ASKTR,
	XCALL W_DISP(W_ID,WD_POS,23,1,WD_CLR,WDC_LIN,
&		'RECOUNT TIERODS AND HOLES?')
	
	XCALL WINPT(W_ID,23,28,1,0,'YN',ENTRY,INXCTL)
	GOTO (CNTTRD),INXCTL
	RETURN
;--------------------------------------------------------------

CALC_ACC,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; CALCULATE AND DISPLAY ACC & REIN INFO
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL D_BOTTOM

	IF(STY.NE.5.AND.STY.NE.6)CALL CLRACC		;INIT VALUES EXCEPT IF "OTHER"

	IF (REVRS_ACC .EQ. 1)				;4-16-03 SSQ
	THEN	WRK_JOINT = -ORG_JOINT
	ELSE	WRK_JOINT = JOINT

	BAROK = 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; removed 3/18/05 ssq...

;;;	IF (ACC.NE.2.AND.(STY.EQ.2.OR.STY.EQ.6).AND.(GAUGE.LE.18.OR.SZ1.GE.72.OR.SZ2.GE.72))
;;;		BEGIN
;;;		XCALL W_DISP(W_ID,WD_POS,23,1,WD_CLR,WDC_EOL,'BAR <N> ? ')
;;;		XCALL WINPT(W_ID,23,11,1,0,'YN',ENTRY,INXCTL)
;;;		IF (INXCTL.EQ.1) BAROK = INXCTL
;;;		END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	USING STY SELECT		;DEPENDING ON STLYE...
	(1,5),	IF(ACC.EQ.1 .OR. ACC.EQ.3)	;SLIPS & DRIVES
			BEGIN
			CALL CAL_SLIPS
			CALL CAL_DRIVES
			END

	(2,6),	IF(ACC.EQ.1 .OR. ACC.EQ.4)	;TDC
			BEGIN
			CALL CAL_TCORN
			IF(DACCC.EQ.1)CALL CAL_CMC
			CALL CAL_TNBQTY
			CALL CAL_TGAQTY
			CALL CAL_TCLQTY
			CALL CAL_TBNQTY
			CALL CAL_TBAQTY
			CALL CAL_TBNQTY
			END
	(7),		BEGIN			;J-35
			CALL CAL_DFRC		;need DFRC corners...
			CALL CAL_TNBQTY
			CALL CAL_TGAQTY
			CALL CAL_TCLQTY
			END
	ENDUSING

	IF(DREIN.EQ.1)		;REINFORCEMENT
		BEGIN
	;;;	IF(DREIN2.EQ.1 .AND. RE_CALC_REI.EQ.1)
		IF(DREIN2.EQ.1)
			BEGIN
			CALL CAL_TR1QTY
			CALL CAL_TR2QTY
			END
		CALL CAL_HLQTY
		CALL CAL_RANGLE		;SSQ 10-28-04
		END
	XCALL W_UPDT

	RE_COMPUTE = 			;don't need to run again unless
					;joints or size changes
	RETURN
;-----------------------------------------------------------------

;-------------------------------------------
CAL_SLIPS,
	SAVVAL = 'SLP'
	SLIPS	=		;---------------------
	SLPITM	=		;Slips
	SLPPRC	=		;
	SLPDES	=		;---------------------
	CTL = '15,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	SLIPS = WRK_JOINT * 2
	IF (SLIPS.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = SLIPS,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,'None')

	SLPITM =

	CASE SZ1 OF
	BEGINCASE

	0-12:	; If the slip size is between 0 - 12 inches, it requires
		; a flat s 24 gauge slip, cut to length of SZ1
		BEGIN
		  SLPITM(1,3) = '724'
		  SLPITM(4,6) = SZ1,'ZXX'[LEFT]
		END

	13-19:	; If the slip size is between 13 - 19 inches, it requires
		; a flat s 24 gauge slip, cut to length of SIZE1
		BEGIN
		  SLPITM(1,3) = '724'
		  SLPITM(4,6) = SZ1,'ZXX' [LEFT]
		END

	20-30:	; If the slip size is between 20 - 30 inches, it requires
		; a 1" standing 24 gauge slip, cut to length of SIZE1
		BEGIN
		  SLPITM(1,3) = '824'
		  SLPITM(4,6) = SZ1,'ZXX' [LEFT]
		END

	31-42:	; If the slip size is between 31 - 42 inches, it requires
		; a 1" standing 22 gauge slip, cut to length of SIZE1
		BEGIN
		  SLPITM(1,3) = '822'
		  SLPITM(4,6) = SZ1,'ZXX' [LEFT]
		END

	43-49:	; If the slip size is between 43 - 49 inches, it requires
		; a 1.5" standing 22 gauge slip, cut to length of SIZE1
		BEGIN
		  SLPITM(1,4) = '1022'
		  SLPITM(5,7) = SZ1,'ZXX' [LEFT]
		END

	50-120:	; If the slip size is over 50 inches, it requires
		; a standing 22 gauge slip, with reinforcing bar ( re-bar )
		BEGIN
		  SLPITM(1,5) = '1022B'
		  SLPITM(6,8) = SZ1,'ZXX'[LEFT]
		END
	ENDCASE

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,SLPITM)
	KEY = SLPITM
	CALL ITMMAS	; Get the item from inventory
	IF (SRCCTL)
	THEN	BADSLP=1
	ELSE	BEGIN
		BADSLP=0
		SLPPRC = PRICE
		SLPDES = DESCR
		END
	RETURN
;-----------------------------------------------------

CAL_DRIVES,
	SAVVAL = 'DRV'
	DRIVES	=		;---------------------
	DRVITM	=		;Drives
	DRVPRC	=		;
	DRVDES	=		;---------------------
	CTL = '16,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	DRIVES = WRK_JOINT * 2
	IF (DRIVES.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = DRIVES,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	DRVITM =

	CASE SZ2 OF
	BEGINCASE

	0-3:	; If the drive size is between 0 - 9 inches, it requires
		; a flat 24 gauge drive, the size of the 2nd dimension
		BEGIN
		  DRVITM(1,1) = '6'
		  DRVITM(2,3) = '04'	;;>, 'XX'
		  DRVITM(4,5) = '24'		;24 GAUGE
		  DRVITM(6,6) = '1'		;USE CUT TO LENGTH
		END				;PER DW 1/20/87

	0-9:	; If the drive size is between 0 - 9 inches, it requires
		; a flat 24 gauge drive, the size of the 2nd dimension
		BEGIN
		  DRVITM(1,1) = '6'
		  DRVITM(2,3) = SZ2, 'XX'
		  DRVITM(4,5) = '24'		;24 GAUGE
		  DRVITM(6,6) = '1'		;USE CUT TO LENGTH
		END				;PER DW 1/20/87

	10-19:	; If the drive size is between 10 - 19 inches, it requires
		; a flat 24 gauge drive, the size of the 2nd dimension
		BEGIN
		  DRVITM(1,1) = '6'
		  DRVITM(2,3) = SZ2,'XX'
		  DRVITM(4,5) = '24'		;24 GAUGE
		  DRVITM(6,6) = '1'		;USE CUT TO LENGTH 
		END				;PER DW 1/20/87

	20-30:	; If the drive  size is between 20 - 29 inches, it requires
		; a standing 24 gauge drive, the size of the 2nd dimension
		BEGIN
		  DRVITM(1,3) = '124'
		  DRVITM(4,5) = SZ2,'XX'
		  DRVITM(6,6) = '1'		;USE CUT TO LENGTH 
		END				;PER DW 1/20/87

	31-99:	; If the drive size is over 30 inches, it requires
		; a 22 gauge drive, the size of the 2nd dimension
		BEGIN
		  DRVITM(1,3) = '122'
		  DRVITM(4,5) = SZ2,'XX'
		  DRVITM(6,6) = '1'		;USE CUT TO LENGTH
		END				;PER DW 1/20/87

	ENDCASE

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,DRVITM)
	KEY = DRVITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADDRV=1
	ELSE	BEGIN
		BADDRV=0
		DRVPRC = PRICE
		DRVDES = DESCR
		END
	RETURN
;-----------------------------------------------------

CAL_TCORN,
	SAVVAL = 'COR'
	TCORN	= 		;---------------------
	CORITM	= 		;Corners
	CORPRC	=		;
	CORDES	=		;---------------------
	ENTRY =
	CTL = '15,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	IF (BAROK) 
	THEN	TCORN = 0		
	ELSE	TCORN = WRK_JOINT * 8		

	ORG_CORN=TCORN
	IF (TCORN.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TCORN,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	USING DUTYPE SELECT
	(1),	CORITM = 'TCR'	;GALV
	(2),	CORITM = 'TCRA'	;ALUM
	(3),	CORITM = 'TCRS'	;SS
	(4),	CORITM = 'TCR'	;Paintgrip
	(5),	CORITM = 'TCR'	;G-90
	(6),	CORITM = 'TCR'	;PVS
	(7),	CORITM = 'TCR'	;Other
	ENDUSING

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,CORITM)
	KEY = CORITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADCOR=1
	ELSE	BEGIN
		BADCOR=0
		CORPRC = PRICE
		CORDES = DESCR
		END
	RETURN
;------------------------------------------------
;12-30-09: corners are not created here, but need the corner
; qty to compute number of nuts & Bolts...

CAL_DFRC,			;J-35 Corners
	SAVVAL = 'COR'
	TCORN	= 		;---------------------
	CORITM	= 		;Corners
	CORPRC	=		;
	CORDES	=		;---------------------
	ENTRY =
	CTL = '15,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	IF (BAROK) 
	THEN	TCORN = 0		
	ELSE	TCORN = 4
;;;	ELSE	TCORN = WRK_JOINT * 8

	ORG_CORN=TCORN

;;;	goto skp_dfrc	;12-30-09: these are relieved from inventory
			;by PSTINV, but ordlin records are not created...

	IF (TCORN.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TCORN,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
;;;		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	USING DUTYPE SELECT
	(1),	CORITM = 'DFRC'		;GALV
	(2),	CORITM = 'DFRCA'	;ALUM
	(3),	CORITM = 'DFRCS'	;SS
	(4),	CORITM = 'DFRC'	;Paintgrip
	(5),	CORITM = 'DFRC'	;G-90
	(6),	CORITM = 'DFRC'	;PVS
	(7),	CORITM = 'DFRC'	;Other
	ENDUSING

	CALL CHKITM

;;;	XCALL W_DISP(W_ID,WD_POS,ROW,31,CORITM)
	KEY = CORITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADCOR=1
	ELSE	BEGIN
		BADCOR=0
		CORPRC = PRICE
		CORDES = DESCR
		END

skp_dfrc,
; store J35 info in "slip" fields
	clear coritm
	clear cordes
;
	SLIPS = WRK_JOINT * 2
	USING DUTYPE SELECT
	(2),	SLPITM = 'J35A'	;ALUM
	(3),	SLPITM = 'J35S'	;STAINLESS STEEL
	(),	SLPITM = 'J35'	;GALV
	ENDUSING

	KEY = SLPITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADCOR = 1
	ELSE	BEGIN
		;labor cost = J35.AVGCST
		FLNG_PRC = PRICE * (2*(SZ1+SZ2))
		SLPPRC = (TCORN*CORPRC) + FLNG_PRC + AVGCST
		xcall rnick(slpprc)
		J35SZ1 = SZ1,	'ZZX'
		J35SZ2 = SZ2,	'ZZX' [LEFT]
		SLPDES = J35TMP + DESCR(1,%trim(descr)) 
		ln = %trim(slpdes)
		USING DUTYPE SELECT
		(2),	SLPDES(LN-3,LN) = 'ALUM'
		(3),	SLPDES(LN-3,LN) = 'SST '
		ENDUSING
		;change the item to include dim, will be stripped out 
		;in scrn5 but used for lcfgim
		SLPITM(5,15) = SZ1, 'ZZX' [LEFT]
		LN = %TRIM(SLPITM)
		LN = LN + 1
		SLPITM(LN,LN) = '-'
		LN = LN + 1
		SLPITM(LN,15) = SZ2,	'ZZX' [LEFT]

		END

	clear corprc

	RETURN
;------------------------------------------------


CAL_CMC,	; Calc cornermatic corners...
	IF(CAT.EQ.3 .OR. CAT.EQ.5)RETURN	;4-PC, OVERSIZE => NO CMC
	CMQTY=
	SAVVAL = 'CM'
	CMQTY=ORG_CORN/2
	TCORN=ORG_CORN-CMQTY
	USING DUTYPE SELECT
	(1),	CMITM = 'CMGD'	;GALV
	(2),	CMITM = 'CMAD'	;ALUM
	(3),	CMITM = 'CMSD'	;SS
	(4),	CMITM = 'CMGD'	;Paintgrip
;;;	(5),	CMITM = 'DMGD'	;G-90	;changed to CMGD 5/15/02 per SteveM
	(5),	CMITM = 'CMGD'	;G-90
	(6),	CMITM = 'CMGD'	;PVS
	(7),	CMITM = 'CMGD'	;Other
	ENDUSING

	KEY = CMITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADCMC=1
	ELSE	BEGIN
		CMPRC = PRICE
		CMDES = DESCR
		END

	RETURN
;------------------------------------------------

CAL_TNBQTY,
	SAVVAL = 'TNB'
	TNBQTY	=		;---------------------
	TNBITM	=		;TDC nuts & bolts
	TNBPRC	=		;
	TNBDES	=		;---------------------
	CTL = '16,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	TNBQTY = ORG_CORN / 2
	IF (TNBQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TNBQTY,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	USING DUTYPE SELECT
	(1),	TNBITM = 'TN'	;GALV
	(2),	TNBITM = 'TNA'	;ALUM
	(3),	TNBITM = 'TNS'	;SS
	(4),	TNBITM = 'TN'	;Paintgrip
	(5),	TNBITM = 'TN'	;G-90
	(6),	TNBITM = 'TN'	;PVS
	(7),	TNBITM = 'TN'	;Other
	ENDUSING

	CALL CHKITM
	
	XCALL W_DISP(W_ID,WD_POS,ROW,31,TNBITM)
	KEY = TNBITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTBN=1
	ELSE	BEGIN
		BADTBN=0
		TNBPRC = PRICE
		TNBDES = DESCR
		END
	RETURN
;------------------------------------------------------

CAL_TGAQTY,
	SAVVAL = 'TGA'
	TGAQTY	=		;---------------------
	TGAITM	=		;Gasket
	TGAPRC	=		;
	TGADES	=		;---------------------
	CTL = '17,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

;;;	TGAQTY = X_WGHT / ((DUCLBS * SIZE3) #3)
	FACTOR=(DUCLBS*SIZE3)#3
	IF(FACTOR.GT.0)
	THEN	TGAQTY = X_WGHT/FACTOR
	ELSE	TGAQTY = 0
	IF (TGAQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TGAQTY,'ZZZZX-'
		ALPHA (7,9) = 'Ft '
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,17,WD_CLR,WDC_EOL,'None')

	TGAITM = 'TG'		;SSQ 7-18-97

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,TGAITM)
	KEY = TGAITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTGA=1
	ELSE	BEGIN
		BADTGA=0
		TGAPRC = PRICE
		TGADES = DESCR
		END
	RETURN
;-----------------------------------------------------

CAL_TCLQTY,
	SAVVAL = 'TCL'
	TCLQTY	=		;---------------------
	TCLITM	=		;Cleats
	TCLPRC	=		;
	TCLDES	=		;---------------------
	CTL = '18,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	TCLQTY = ( ( TGAQTY*100 ) / DUCCLE )#1
	IF (TCLQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TCLQTY,'ZZZZX-'
		ALPHA (7,9) = 'Qty'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	USING DUTYPE SELECT
	(1),	TCLITM = 'TC'	;GALV
	(2),	TCLITM = 'TCA'	;ALUM
	(3),	TCLITM = 'TCS'	;SS
	(4),	TCLITM = 'TC'	;Paintgrip
	(5),	TCLITM = 'TC'	;G-90
	(6),	TCLITM = 'TC'	;PVS
	(7),	TCLITM = 'TC'	;Other
	ENDUSING

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,TCLITM)
	KEY = TCLITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTCL=1
	ELSE	BEGIN
		BADTCL=0
		TCLPRC = PRICE
		TCLDES = DESCR
		END

	RETURN
;-----------------------------------------------------
CAL_TBAQTY,
	SAVVAL = 'TBA'
	TBAQTY	=		;---------------------
	TBAITM	=		;TDC bar
	TBAPRC	=		;
	TBADES	=		;---------------------
	CTL = '19,19,05,00,# '
;;;	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)
	IF (SZ1.GE.72.OR.SZ2.GE.72.OR.GAUGE.LE.18)
&		TBAQTY = (((SZ1 + SZ2) * 4 ) * WRK_JOINT)
	IF (BAROK.NE.1) TBAQTY = 0		

	TBAITM = 'TDCBAR'

	KEY = TBAITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTBA=1
	ELSE	BEGIN
		BADTBA=0
		TBAPRC = PRICE
		TBADES = DESCR
		END
	T24BQT=TBAQTY,'ZZZZX' [LEFT]
	RETURN
;-----------------------------------------------------

CAL_TBNQTY,
	SAVVAL = 'TBN'
	TBNQTY	=		;---------------------
	TBNITM	=		;TDC bar nuts & bolts
	TBNPRC	=		;
	TBNDES	=		;---------------------
	CTL = '20,19,05,00,# '
;;;	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

	IF (TBAQTY) TBNQTY = ( WRK_JOINT * 8 ) / 2

	TBNITM = 'TN5'		;SSQ 7-18-97

	KEY = TBNITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTBN=1
	ELSE	BEGIN
		BADTBN=0
		TBNPRC = PRICE
		TBNDES = DESCR
		END
	T24NQT=TBNQTY,'ZZZZX' [LEFT]
	IF(TBAQTY.GT.0 .OR. TBNQTY.GT.0)
	THEN	XCALL W_DISP(W_ID,WD_POS,24,1,BAR24)
	ELSE	XCALL W_DISP(W_ID,WD_POS,24,1,'                        ')
	RETURN
;---------------------------------------------

CAL_RANGLE,
	IF (.NOT. DRANGL) RETURN
;;;	IF (ACC .NE. 1) RETURN

	SAVVAL = DPUNCH
	TR1QTY	=		;---------------------
	TR1ITM	= 		;Tie rods 1
	TR1PRC	=		;
	TR1DES	=		;---------------------
	
	CTL = '19,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

	TR1QTY = WRK_JOINT
	IF (TR1QTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TR1QTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

;--------------------------

	TR1ITM	= DPUNCH	
	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,TR1ITM)
	XCALL W_UPDT
	KEY = TR1ITM
	CALL ITMMAS
	IF (SRCCTL)
		BEGIN
		BADTR1=1
		RETURN
		END

	BADTR1=0
	TR1PRC = PRICE
	TR1DES = DESCR
	TR1DES(1,8) = 
	TR1DES(1,3) = SZ1, 'ZZX' [LEFT]
	D3 = %TRIM(TR1DES(1,3))
	INCR D3
	TR1DES(D3,D3) = '/'
	INCR D3
	TR1DES(D3,D3+1) = SZ2, 'ZX' [LEFT]

	RETURN
;---------------------------------------------

CAL_TR1QTY,
	IF(T1CNT.EQ.0)RETURN
	SAVVAL = 'TR1'
	TR1QTY	=		;---------------------
	TR1ITM	=		;Tie rods 1
	TR1PRC	=		;
	TR1DES	=		;---------------------
	CTL = '19,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

	TR1QTY = T1CNT
	IF (TR1QTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TR1QTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

;--------------------------
;ssq 2-11-03 cd5 -> cd7
	IF(SZ1.LE.48)
	THEN	TR1ITM = 'CD5'
	ELSE	TR1ITM = 'CD7'

;;;	TR1ITM = 'CD5'		;SSQ 7-18-97
;--------------------------
	TR1ITM(4,6)=SZ1,'ZZX' [LEFT]

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,TR1ITM)
	XCALL W_UPDT
	KEY = TR1ITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTR1=1
	ELSE	BEGIN
		BADTR1=0
		TR1PRC = PRICE
		TR1DES = DESCR
		END
	RETURN
;----------------------------------------------------

CAL_TR2QTY,
	IF(T2CNT.EQ.0)RETURN
	SAVVAL = 'TR2'
	TR2QTY	=		;---------------------
	TR2ITM	=		;Tie Rods 2
	TR2PRC	=		;
	TR2DES	=		;---------------------
	CTL = '20,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

	TR2QTY=T2CNT
	IF (TR2QTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = TR2QTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

;--------------------------
;ssq 2-11-03 cd5 -> cd7
	IF(SZ2.LE.48)
	THEN	TR2ITM = 'CD5'
	ELSE	TR2ITM = 'CD7'

;;;	TR2ITM = 'CD5'		;SSQ 7-18-97
;--------------------------
	TR2ITM(4,6)=SZ2,'ZZX' [LEFT]

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,TR2ITM)

	KEY = TR2ITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADTR2=1
	ELSE	BEGIN
		BADTR2=0
		TR2PRC = PRICE
		TR2DES = DESCR
		END
	RETURN
;-----------------------------------------------------

CAL_HLQTY,
	IF (DRANGL) RETURN	;SSQ 10-28-04
	SAVVAL = 'HL'
	HLQTY	=		;---------------------
	HLITM	=		;Reinforcement Holes
	HLPRC	=		;
	HLDES	=		;---------------------
	CTL = '21,19,05,00,# '
	XCALL W_DISP(W_ID,WD_POS,ROW,COL,WD_CLR,WDC_EOL)

	HLQTY=HLCNT
	IF (HLQTY.NE.0)
	THEN	BEGIN
		ALPHA =
		ALPHA (1,6) = HLQTY,'ZZZZX-'
		XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,ALPHA(1,9))
		END
	ELSE	XCALL W_DISP(W_ID,WD_POS,ROW,19,WD_CLR,WDC_EOL,'None')

	HLITM = 'HP'		

	CALL CHKITM

	XCALL W_DISP(W_ID,WD_POS,ROW,31,HLITM)

	KEY = HLITM
	CALL ITMMAS
	IF (SRCCTL)
	THEN	BADHL=1
	ELSE	BEGIN
		BADHL=0
		HLPRC = PRICE
		HLDES = DESCR
		END

	RETURN
;--------------------------------------------------------------

CHKITM,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;; did user override computed item number?
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	USING SAVVAL SELECT
	('SLP'),	BEGIN
			OLDITM = SAVSLP
			NEWITM = SLPITM
			END
	('DRV'),	BEGIN
			OLDITM = SAVDRV
			NEWITM = DRVITM
			END
	('COR'),	BEGIN
			OLDITM = SAVCOR
			NEWITM = CORITM
			END
	('TNB'),	BEGIN
			OLDITM = SAVTNB
			NEWITM = TNBITM
			END
	('TGA'),	BEGIN
			OLDITM = SAVTGA
			NEWITM = TGAITM
			END
	('TCL'),	BEGIN
			OLDITM = SAVTCL
			NEWITM = TCLITM
			END
	('TBA'),	BEGIN
			OLDITM = SAVTBA
			NEWITM = TBAITM
			END
	('TBN'),	BEGIN
			OLDITM = SAVTBN
			NEWITM = TBNITM
			END
	('TR1'),	BEGIN
			OLDITM = SAVTR1
			NEWITM = TR1ITM
			END
	('TR2'),	BEGIN
			OLDITM = SAVTR2
			NEWITM = TR2ITM
			END
	('HL'),	BEGIN
			OLDITM = SAVHL
			NEWITM = HLITM
			END
	('CM'),	BEGIN
			OLDITM = SAVCM
			NEWITM = CMITM
			END
	ENDUSING

;;;	IF (FIRST_CALC .EQ. 1) GOTO SKIP_CALC	;DON'T TEST 1ST TIME THRU...
;;;	IF (RE_COMPUTE .EQ. 0) 
;;;	THEN	NEWITM = OLDITM
;;;	ELSE	IF (NEWITM.NE.OLDITM .AND. OLDITM.NE.'  ')
		IF (NEWITM.NE.OLDITM .AND. OLDITM.NE.'  ')
		  BEGIN
		  XCALL W_DISP(W_ID,WD_POS,ROW,31,OLDITM)
		  XCALL W_DISP(W_ID,WD_POS,ROW,50,'<TAB>=COMPUTE')
		  XCALL WINPT (W_ID,ROW,65,01,00,'AX',ENTRY,INXCTL,F_KEY)
		  IF (INXCTL.NE.3) NEWITM = OLDITM		
		  END
SKIP_CALC,
	USING SAVVAL SELECT
	('SLP'),	SLPITM = NEWITM
	('DRV'),	DRVITM = NEWITM
	('COR'),	CORITM = NEWITM
	('TNB'),	TNBITM = NEWITM
	('TGA'),	TGAITM = NEWITM
	('TCL'),	TCLITM = NEWITM
	('TBA'),	TBAITM = NEWITM
	('TBN'),	TBNITM = NEWITM
	('TR1'),	TR1ITM = NEWITM
	('TR2'),	TR2ITM = NEWITM
	('HL'),		HLITM = NEWITM
	('CM'),		CMITM = NEWITM
	ENDUSING

	RETURN
;--------------------------------------------------------

D_TOP,		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; DISPLAY TOP HALF OF SCREEN
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL W_DISP(WND_1,WD_CLEAR)
	XCALL W_DISP(W_ID,WD_POS,1,40,D_ORD)
	XCALL W_DISP(W_ID,WD_POS,01,01,'   0. Default         (1=On, 2=Off)')
	XCALL W_DISP(W_ID,WD_POS,02,01,'   1. Prsr Class   ')
	XCALL W_DISP(W_ID,WD_POS,03,01,'   2. Type         ')
	XCALL W_DISP(W_ID,WD_POS,04,01,'   3. Cat          ')
	XCALL W_DISP(W_ID,WD_POS,05,01,'   4. Style        ')
	XCALL W_DISP(W_ID,WD_POS,06,01,'   5. Seam         ')
	XCALL W_DISP(W_ID,WD_POS,07,01,'   6. Sealant      ')
	XCALL W_DISP(W_ID,WD_POS,08,01,'   7. Qty/Joints   ')
	XCALL W_DISP(W_ID,WD_POS,09,01,'   8. Size                X         X    ')
	XCALL W_DISP(W_ID,WD_POS,10,01,'   9. Gauge           ')
	XCALL W_DISP(W_ID,WD_POS,11,01,'  10. Liner        ')
	XCALL W_DISP(W_ID,WD_POS,12,01,'  11. Reinforce     ')
	XCALL W_DISP(W_ID,WD_POS,13,01,'  12. Punch    ')
	XCALL W_DISP(W_ID,WD_POS,13,40,'13. Tag   ')
	XCALL W_DISP(W_ID,WD_POS,14,01,'  14. Access           ')

	XCALL W_DISP(WND_1,WD_POS,25,56,LN25)	;ssq 6-2-05
	XCALL W_UPDT
	RETURN
;------------------------------------------------

D_BOTTOM,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; DISPLAY PROMPTS FROM ACC ON
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL W_DISP(W_ID,WD_POS,15,1,WD_CLR,WDC_EOW)
	XCALL W_DISP(WND_1,WD_POS,24,56,LN24)	
	XCALL W_DISP(WND_1,WD_POS,25,56,LN25)	;ssq 6-2-05
	
	IF(DREIN.EQ.1 .and. DRANGL.EQ.0)
	THEN	BEGIN
		XCALL W_DISP(W_ID,WD_POS,19,01,'  23. Tierods(1)  ')
		XCALL W_DISP(W_ID,WD_POS,20,01,'  24. Tierods(2)  ')
		XCALL W_DISP(W_ID,WD_POS,21,01,'  25. Holes       ')
		END
	ELSE	BEGIN
	;;;	XCALL W_DISP(W_ID,WD_POS,19,01,'  23. Rangle      ')
		IF(DRANGL) XCALL W_DISP(W_ID,WD_POS,19,01,'  23. Rangle      ')
		END
	XCALL W_UPDT

	IF(ACC.EQ.2) RETURN			;NO ACC
	
	USING STY SELECT
	(1,5),	BEGIN
		XCALL W_DISP(W_ID,WD_POS,15,01,'  15. Slips       ')
		XCALL W_DISP(W_ID,WD_POS,16,01,'  16. Drives      ')
		END
	(2,6,7),BEGIN
		IF(STY.EQ.7)
		THEN	nop	;XCALL W_DISP(W_ID,WD_POS,15,01,'  17. DFRC Corners ')
		ELSE	XCALL W_DISP(W_ID,WD_POS,15,01,'  17. TDC Corners ')
		XCALL W_DISP(W_ID,WD_POS,16,01,'  18. TDC N/B     ')
		XCALL W_DISP(W_ID,WD_POS,17,01,'  19. TDC Gasket  ')
		XCALL W_DISP(W_ID,WD_POS,18,01,'  20. TDC Cleats  ')
		END
	ENDUSING

	XCALL W_DISP(WND_1,WD_POS,25,56,LN25)	;ssq 6-2-05
	XCALL W_UPDT
	RETURN
;------------------------------------------------
RE_PRICE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; check current duct price .vs.
		;;; price in table...
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	XCALL W_DISP(WND_1,WD_CLEAR)

	DDLIN = '  QTY TYP STY CAT LNR SEAM SEAL GAGE   SIZE1   SIZE2 LEN'
	XCALL W_DISP(WND_1,WD_POS,11,1,DDLIN)
	XCALL W_DISP(WND_1,WD_POS,14,10,
&		'<TAB>=INPUT NEW PRICE, Y=REPLACE, N=KEEP OLD PRICE')

	XCALL W_UPDT

	FIND(5,DUCACC,OORDNO,KEYNUM:1) [ERR=RP_LOOP]	;SEQ ORDER
RP_LOOP,
	READS(5,DUCACC,RP_EOF)
	IF(DUCTOR.NE.OORDNO)GOTO RP_EOF

	CLEAR DP_CNG, LN_CNG
	CALL GDT_TAB
	IF (LOKCTL.NE.0) CLEAR DP_PRICE
	IF (DP_PRICE .NE. GPRICE) CALL DP_CHANGE

	CALL LIN_TAB
	IF (DP_PRICE .NE. LINPRC) CALL LN_CHANGE
	IF (DP_CNG .OR. LN_CNG)	write(5,ducacc,key175)

	GOTO RP_LOOP
RP_EOF,	
	XCALL W_DISP(WND_1,WD_CLEAR)
	RETURN

DP_CHANGE,	
	DP_CNG = 1
	CALL SET_DDLIN
	XCALL W_DISP(WND_1,WD_POS,12,1,DDLIN)

	PP_TYPE = 'DUCT PRICE'
	PP_ORIG = GPRICE,	'ZZZ.XXX'
	PP_NEW = DP_PRICE,	'ZZZ.XXX'
	XCALL W_DISP(WND_1,WD_POS,13,1,PP_LINE)
	TBLPRC = DP_PRICE
	NEWPRC = GPRICE
	CALL RP_ACCP
	GPRICE = NEWPRC	
;;;	XCALL ISIO (5,DUCACC,KEY175,WRITE,LOKCTL)
	RETURN

LN_CHANGE,
	LN_CNG = 1
	CALL SET_DDLIN
	XCALL W_DISP(WND_1,WD_POS,12,1,DDLIN)

	PP_TYPE = 'LINER PRICE'
	PP_ORIG = LINPRC,	'ZZZ.XXX'
	PP_NEW = DP_PRICE,	'ZZZ.XXX'
	XCALL W_DISP(WND_1,WD_POS,13,1,PP_LINE)
	TBLPRC = DP_PRICE
	NEWPRC = LINPRC
	CALL RP_ACCP
	LINPRC = NEWPRC	
;;;	XCALL ISIO (5,DUCACC,KEY175,WRITE,LOKCTL)
	RETURN



RP_ACCP,
	CALL ACCEPT
	USING TCHAR SELECT
	(9, 127),	GOTO UP_INP		;<TAB>, <DEL>
	(89),		NEWPRC = TBLPRC			;Y=replace old with new
	(78),		RETURN			;restore original price
	ENDUSING
	RETURN

UP_INP,
	XCALL WINPT(WND_1,13,36,06,01,'# ',ENTRY,INXCTL)
	NEWPRC = ENTRY(1,6)
	ENTRY(1,7) = NEWPRC, 'ZZZ.XXX' [LEFT]
	XCALL W_DISP(WND_1,WD_POS,13,36,ENTRY(1,7))
	XCALL W_UPDT
	RETURN	
;------------------------------------------------
COUNT_DUCT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; COUNT DUCT RECORDS
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR NUM_DUCT
	FIND(5,DUCACC,OORDNO,KEYNUM:1) [ERR=CD_LOOP]	;SEQ ORDER
CD_LOOP,
	READS(5,DUCACC,CD_EOF,GETRFA:SAVRFA) [ERR=CD_EOF]
	IF (DUCTOR .NE. OORDNO) GOTO CD_EOF
	INCR NUM_DUCT
	if (num_duct .ge. u_max) goto cd_eof
	U_RFA(NUM_DUCT) = SAVRFA
	U_FLAG(NUM_DUCT) =
	GOTO CD_LOOP
CD_EOF,
	RETURN
;-----------------------------------------------------

SET_RFA,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; MARK AS SELECTED
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL GET_RFA
	U_FLAG(U_I) = 1

	RETURN
;-----------------------------------------------------

GET_RFA,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; FIND RECORD MATCHING CURRENT RFA
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	FOR U_I FROM 1 THRU U_MAX
		BEGIN
		IF (U_RFA(U_I) .EQ. SAVRFA) RETURN
		END

	RETURN
;-----------------------------------------------------


GET_DUCT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; FIND EXISTING DUCTWORK
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR I
	FIND(5,DUCACC,OORDNO,KEYNUM:1) [ERR=GD_LOOP]	;SEQ ORDER
GET_MORE_DUCT,
	FOR I FROM 1 THRU MAXARA
		BEGIN
		CLEAR PARRY(I)
		CLEAR PFLAGS(I)
		CLEAR PARRFA(I)
		END		
	CLEAR PI
	DN1 = DN2 + 1
	CLEAR I
GD_LOOP,
	READS(5,DUCACC,GD_EOF,GETRFA:SAVRFA) [ERR=GD_EOF]

	IF(DUCTOR.NE.OORDNO)GOTO GD_EOF
	INCR I
	INCR DN2
;;;	IF(I.GT.MAXARA)GOTO GD_EOF

	CALL SET_DDLIN

	PARRY(I)=DDLIN
	PARRFA(I)=SAVRFA
	CALL GET_RFA
	PFLAGS(I) = U_FLAG(U_I)
	IF(I.LT.MAXARA)GOTO GD_LOOP
GD_EOF,
	NUMARA=I
	CLEAR REVRS
	RETURN
;--------------------------------------
GET_LAST_DUCT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; ARRAY WILL CONTAIN LAST RECORDS
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR I
	FIND(5,DUCACC,OORDNO,KEYNUM:1) [ERR=GD_LOOP]	;SEQ ORDER
GLD_LOOP,
	READS(5,DUCACC,GLD_EOF,GETRFA:SAVRFA) [ERR=GLD_EOF]
	IF(DUCTOR.NE.OORDNO)GOTO GLD_EOF
	INCR I

	CALL SET_DDLIN
	IF (I .LE. MAXARA)
		BEGIN
		PARRY(I)=DDLIN
		PARRFA(I)=SAVRFA
		GOTO GLD_LOOP
		END
;;;	IF(I.LT.MAXARA)GOTO GLD_LOOP
	FOR J FROM 1 THRU MAXARA-1
		BEGIN
		PARRY(J) = PARRY(J+1)
		PARRFA(J) = PARRFA(J+1)
		END

	I = MAXARA
	PARRY(I)=DDLIN
	PARRFA(I)=SAVRFA
	GOTO GLD_LOOP
GLD_EOF,
	NUMARA=I
	DN2 = NUM_DUCT
	DN1 = NUM_DUCT - NUMARA + 1
	RETURN
;--------------------------------------
POP_PRINT,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; PRINT DUCTWORK IN POP-UP FORMAT
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL PRDUC(OORDNO,OCUSNM)
	RETURN

;--------------------------------------

SET_DDLIN,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; SET UP DDLIN FOR "GET_DUCT & "POP_PRINT"
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR DDLIN
	DDLIN(1,5)=JOINT,'ZZZZX'
	IF(DUTYPE.GE.1 .AND. DUTYPE.LE.7)
	THEN	DDLIN(7,9)=QTYPE(DUTYPE)
	ELSE	DDLIN(7,9)='***'

	IF(STY.GE.1 .AND. STY.LE.7)
	THEN	DDLIN(11,13)=QSTY(STY)
	ELSE	DDLIN(11,13)='***'

	IF(CAT.GE.1 .AND. CAT.LE.5)
	THEN	DDLIN(15,17)=QCAT(CAT)
	ELSE	DDLIN(15,17)='***'

	IF(LINER.GE.1 .AND. LINER.LE.8)
	THEN	DDLIN(19,21)='LNR'
	ELSE	DDLIN(19,21)='NO'
	IF(LINER.EQ.4)DDLIN(19,21)='NON'

	IF(SEAM.GE.1 .AND. SEAM.LE.2)
	THEN	DDLIN(23,26)=QSEAM(SEAM)
	ELSE	DDLIN(23,26)='****'

	IF(SEAL.GE.1 .AND. SEAL.LE.2)
	THEN	DDLIN(29,31)=QSEAL(SEAL)
	ELSE	DDLIN(29,31)='***'

	DDLIN(34,35)=GAUGE,	'ZX'
	DDLIN(38,44)=SIZE1,	'ZZX.XXX'
	DDLIN(46,52)=SIZE2,	'ZZX.XXX'
	DDLIN(55,56)=SIZE3,	'ZX'

	RETURN
;--------------------------------------

INIT_WINDOW,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; SET UP SCREEN 1 WINDOW
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	W2_NAME = 'DMENU'

	XCALL W_PROC(WP_FIND,WND_1,WN_NAME)
	IF (.NOT. WND_1)
		BEGIN
		XCALL W_PROC(WP_CREATE,WND_1,WN_NAME,0,0)
		END
	XCALL W_BRDR(WND_1,WB_TITLE,'Ductwork',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE,WND_1,1,1)	
	XCALL W_DISP(WND_1,WD_CLEAR)

	W_ID = WND_1

	DORD=OORDNO,	'ZZZZZX' [LEFT]
	DNAME=OCUSNM
	XCALL W_DISP(W_ID,WD_POS,1,40,D_ORD)


;Pop info...
	CLEAR POP		; all popd variables ssq 2-15-05
;;;	MAXARA = 20
	PLEN = 60
	NUMROW = 10
	MAXARA = 10	;to match numrow ssq 2-15-05
	WX = 10
	WY = 5
	POP_WID(1,5) = "DUCTS"
	POP_TITLE = "<Home>=Prt F7=re-prc"
;                    12345678901234567890
	RETURN
;--------------------------------------------------------

CREATE_WND2,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL W_PROC(WP_CREATE, WND_2, 'DMENU',10, WLEN)
	XCALL W_BRDR(WND_2,WB_TITLE,'Valid Options',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE, WND_2, ROW, 60)
	XCALL W_DISP(WND_2, WD_CLEAR)
	RETURN
;--------------------------------------------------------

CLEAR_WND2,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF(WND_2)XCALL W_PROC(WP_DELETE,WND_2)
	RETURN
;--------------------------------------------------------

END
;STY   QTY   SIZE1   SIZE2 LEN LINER     GAGE TYP CAT SEAM SEAL
;AAA ZZZZX ZZX.XXX ZZX.XXX  ZX AAAAAAAAA  ZX  AAA AAA AAAA  AAA
;1234567890123456789012345678901234567890123456789012345678901234567890
;         1         2         3         4         5         6         7

;  QTY TYP STY CAT LNR SEAM SEAL GAGE   SIZE1   SIZE2 LEN
;ZZZZX AAA AAA AAA AAA AAAA  AAA  ZX  ZZX.XXX ZZX.XXX  ZX
;1234567890123456789012345678901234567890123456789012345678901234567890
;         1         2         3         4         5         6         7
