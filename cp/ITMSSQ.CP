; itmssq.cp
;	2-12-09: this version displays the actual price instead of the
;	i_cfg price...
;
;  IMFMNT / CP		isam
;
;
;		ITEM MASTER FILE MAINTENANCE
;
;
	.include 'wnd:windows.def'

RECORD ITMMAS		;
		.INCLUDE 'DEF:RD041A.def'
RECORD	ITMKEY
		.INCLUDE 'DEF:RD041K.DEF'

RECORD DUMINV		;
		.INCLUDE 'DEF:RD041B.def'
RECORD	ITMIDX		;
		.INCLUDE 'DEF:RD042A.DEF'
RECORD	COPTBL
		.INCLUDE 'DEF:RD182A.DEF'

RECORD	POP
	.INCLUDE 'DEF:POP1.DEF'

RECORD	FKEYS
	.INCLUDE 'DEF:FUNKEY.DEF'

RECORD CTL
	ROW	,D2
		,A1
	COL	,D2
		,A1
	MAX	,D2
		,A1
	MIN	,D2
		,A1
	TYPE	,A2

RECORD	CHANNEL
	CHN041	,D2
	CHN182	,D2
	CHNTMP	,D2

RECORD	DMPRIC
	.INCLUDE 'DEF:DMPRIC.DEF'

RECORD	TPRICE
	ARRAY,	80D5

RECORD	VDAMPR
	DAMP		,D2	;DAMPER DIMENSIONS
	DAMPER_PRICE	,3D8
	SAVE_DP		,3D8
	FL	,D2	;
	MAXFLEN	,D2
	BAD_DIGIT	,D1
	PARTNO	,A15
	PFF	,A15

RECORD	WVARS
	W_ID	,D4
	WND_1	,D4
	WND_2	,D4
	WN_TNMBR	,D4
	WN_NAME		,A6,	'IMFMNT'
	W2_NAME		,A6

RECORD	KEY_DSP
	KD1	,A3
		,A1
	KD2	,A3
		,A1
	KD3	,A5

RECORD	VARS
	P_PRICE	,D8		;FROM CFG_P
	D_PRICE	,D8		;DISPLAY PRICE	
	BF		,D1
	DS		,D4
	DI		,D4
	I		,D6
	IS_DAMPER	,D1
	D_ITEM		,A15
	A12		,A12
	IN_TABLE	,D1	;SSQ 9-10-03
	KEY_FOUND	,D1
	MM_CODE	,D5
	MM_DES1	,A12		;SHORT DESC F1
	MM_DES2	,A12		;SHORT DESC F2
	MM_DES3	,A12		;SHORT DESC F3
	F_KEY	,D3
	MODE	,A14
	DECMAL	,D18
	KEY	,A15
	KITMNO	,A15
	YESNO	,2A1,	'Y','N'
	JUSTIF	,D1

	PGM	,D2
	OPNOK	,D1
	OPTION	,D1
	ENTRY	,A31
	INXCTL  ,D1
	CNGCTL	,D1
	MSGCTL	,D1
	WHATNO	,D2
	SELECT	,D1
	ADDCNT	,D5
	KEY1	,A20
	BSEND	,D5
	BSMID	,D5
	FULL	,D1
	PSEND	,D5
	PSMID	,D5
	PSRCTL	,D1
	CSMID	,D5
	MAXPRD	,D5
	MAXREC	,D5
	OPENED	,D1
	SRCCTL	,D1
	DEFALT	,A2
	LOCTNS	,D2
	LOCCTR	,D2
	DELCTR	,D3
	SWITCH	,D1,	1
	SAVREC	,D5
	TIPSIS	,D1
	V	,D1
	READ	,D1,	0			;IO READ FLAG FOR I-O
	WRITE	,D1,	1			;IO WRITE
	STORE	,D1,	2
	DELETE	,D1,	3
	LOKCTL	,D1				;RECORD-LOCKED INDICATOR
;
PROC 
	XCALL TERID (V)
	CALL OPENS
	IF (.NOT. OPNOK) GOTO ENDOFF

	CALL INIT_WINDOW
MENU,
	XCALL W_DISP (W_ID, WD_CLEAR)
	XCALL W_DISP (W_ID, WD_POS, 3,9,'PLEASE SELECT APPLICATION')
	XCALL W_DISP (W_ID, WD_POS, 5,15,'1. INVENTORY MAINTENANCE')
	XCALL W_DISP (W_ID, WD_POS, 6,15,'2. PRINT')
MINPUT,
	XCALL WINPT (W_ID, 3,36,1,1,'#E',ENTRY,INXCTL)
	GOTO (MINPUT,ENDOFF), INXCTL
	PGM = ENTRY(1,1)
	GOTO (DISPLA,LIST),PGM
	GOTO MINPUT

DISPLA,
	ITMMAS =
	CNGCTL =
	IN_TABLE = $FALSE
DISPL2,
	XCALL W_DISP (W_ID, WD_CLEAR)
	XCALL W_DISP (W_ID, WD_POS, 4,2,'1. ITEM #')
	XCALL W_DISP (W_ID, WD_POS, 6,2,'2. DESCR')
	XCALL W_DISP (W_ID, WD_POS, 8,2,'3. PROD CAT')
	XCALL W_DISP (W_ID, WD_POS,10,2,'4. ON-HAND')

	XCALL W_DISP (W_ID, WD_POS,12,2,'5. ALLOCATD')
	XCALL W_DISP (W_ID, WD_POS,14,2,'6. ON-ORDER')
	XCALL W_DISP (W_ID, WD_POS,16,2,'7. ORD UPTO')
	XCALL W_DISP (W_ID, WD_POS,18,2,'8. REO LVL')
	XCALL W_DISP (W_ID, WD_POS,20,2,'9. AVG COST')
	XCALL W_DISP (W_ID, WD_POS,22,1,'10. PRICE')

	XCALL W_DISP (W_ID, WD_POS, 8,26,'11. DEPT/LOC')
	XCALL W_DISP (W_ID, WD_POS,10,26,'12. STOCKED')
	XCALL W_DISP (W_ID, WD_POS,12,26,'13. PER BNDLE')
	XCALL W_DISP (W_ID, WD_POS,14,26,'14. PER CASE')

	XCALL W_DISP (W_ID, WD_POS, 4,48,'15. WEIGHT')
	XCALL W_DISP (W_ID, WD_POS, 5,48,'16. UNIT MEASURE')
	XCALL W_DISP (W_ID, WD_POS, 7,48,'17. QTY SOLD MTD')
	XCALL W_DISP (W_ID, WD_POS, 8,48,'18. QTY SOLD YTD')
	XCALL W_DISP (W_ID, WD_POS, 9,48,'19. SALES $ MTD')
	XCALL W_DISP (W_ID, WD_POS,10,48,'20. SALES $ YTD')
	XCALL W_DISP (W_ID, WD_POS,11,48,'21. COST MTD')
	XCALL W_DISP (W_ID, WD_POS,12,48,'22. COST YTD')

	XCALL W_DISP (W_ID, WD_POS,13,48,'23. BACKORDERABLE ?')
	XCALL W_DISP (W_ID, WD_POS,14,48,'24. TAXABLE ?')
	XCALL W_DISP (W_ID, WD_POS,15,48,'25. MAT CODE')
	XCALL W_DISP (W_ID, WD_POS,16,48,'26. PIC CODE')
	XCALL W_DISP (W_ID, WD_POS,17,48,'27. CFG       (Y/N)')
	XCALL W_DISP (W_ID, WD_POS,18,48,'28. NO NOTES (Y/N)')
	XCALL W_DISP (W_ID, WD_POS,19,48,'29. QTY PER BOX')
	XCALL W_DISP (W_ID, WD_POS,20,48,'30. BOX SIZE')
	XCALL W_DISP (W_ID, WD_POS,21,48,'31. GAUGE')
	XCALL W_DISP (W_ID, WD_POS,22,48,'32. MFG DEPT')
	XCALL W_DISP (W_ID, WD_POS,23,48,'33. PRICE CODE')
ITMNUM,
	CALL POP_KEY

	GO TO (DISPLA,MENU,SCROLL), INXCTL

NEWOK,
	XCALL W_DISP (W_ID, WD_POS, 4,15,KITMNO)
	CLEAR KEY_DSP
	KD1 = IF1
	KD2 = IF2
	KD3 = IF3
	XCALL W_DISP (W_ID, WD_POS, 4,32,KEY_DSP)
	
	call get_memo_keys

	ITEMNO = KITMNO
	GOTO (DSCRIP),SELECT
	CALL FNDREC
	GO TO ANYCNG

DSCRIP,
	CTL = '06,15,30,01,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	DESCR = ENTRY (1,30)
	GO TO (ANYCNG), CNGCTL
PRODCT,
	CTL = '08,15,02,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	PRDCAT = ENTRY (1,2)
	IPRCAT = PRDCAT
	GO TO (ANYCNG), CNGCTL
QONHND,
	CTL = '10,15,08,00,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYONH(1) = ENTRY (1,8)
	GO TO (ANYCNG), CNGCTL
QALLOC,
;;;	IF (SELECT.NE.1.AND.STOCK.EQ.'S') GOTO BADCNG	;removed 1/18/95
	CTL = '12,15,08,00,# '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYCOM (1) = ENTRY
	GO TO (ANYCNG), CNGCTL
QONODR,
	CTL = '14,15,08,00,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYONO(1) = ENTRY (1,8)
	GO TO (ANYCNG), CNGCTL
ORDRUP,
	CTL = '16,15,08,00,# '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	ORDUPT(1) = ENTRY(1,8)
	GO TO (ANYCNG), CNGCTL
REORDR,
	CTL = '18,15,08,00,#N'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	REOLVL(1) = ENTRY (1,8)
	GO TO (ANYCNG), CNGCTL
UCOST,
	CTL = '20,15,09,01,# '
	CALL INPUT
	GO TO (DISPLA),INXCTL
	AVGCST = ENTRY(1,9)
	ENTRY(1,11) = AVGCST,	'ZZZ,ZZX.XXX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 20,15, ENTRY(1,11) )
	GO TO (ANYCNG), CNGCTL
PRCE1,
	IF (IN_TABLE .EQ. $TRUE)
		BEGIN
		XCALL WNMSG (W_ID, 24,'(See Table)',1)
		GOTO (USCODE,ANYCNG),CNGCTL+1
		END
		
	CTL = '22,15,08,00,# '
	CALL INPUT
	PRICE = ENTRY
	ENTRY(1,10) = PRICE,	'ZZ,ZZX.XXX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 22,15, ENTRY(1,11) )
	GO TO (DISPLA), INXCTL
	GO TO (ANYCNG), CNGCTL

;-------------------------------------
USCODE,
	CTL = '08,40,02,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	USRDEF = ENTRY(1,2)
	GO TO (ANYCNG), CNGCTL
STOCK,
	XCALL W_DISP (W_ID, WD_POS, 24,1,'Stock Flag: (S) STOCKED or (N) NON-STOCK')
	CTL = '10,40,01,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	IF (ENTRY.EQ.' ')
	BEGIN
	  ENTRY = 'N'
	  XCALL W_DISP (W_ID, WD_POS, ROW,COL,ENTRY(1,1))
	END
	STOCK = ENTRY
	IF (STOCK.NE.'S'.AND.STOCK.NE.'N') GOTO STOCK
	XCALL W_DISP (W_ID, WD_POS, 24,1,'\')
	GO TO (ANYCNG), CNGCTL
FTBNDL,
	CTL = '12,40,03,00,# '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	FTBNDL = ENTRY(1,3)
	GOTO (ANYCNG),CNGCTL
FTCASE,
	CTL = '14,40,04,00,# '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	FTCASE = ENTRY(1,4)
	GOTO (ANYCNG),CNGCTL
;-------------------------------------

WAYT,
	CTL = '04,68,06,00,$ '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	WEIGHT = ENTRY (1,6)
	GO TO (ANYCNG), CNGCTL
UMEAS,
	CTL = '05,68,02,00,A '
	CALL INPUT
	GO TO (DISPLA), INXCTL
	IF (ENTRY.NE.'  ') GO TO UMEAS1
	ENTRY = 'EA'
	XCALL W_DISP (W_ID, WD_POS, 5,68,ENTRY)
UMEAS1,
	SUOFM = ENTRY (1,2)
	GO TO (ANYCNG), CNGCTL
QMTD,
	CTL = '07,68,08,00,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYMTD = ENTRY
	GO TO (ANYCNG), CNGCTL
QYTD,
	CTL = '08,68,09,00,#-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	QTYYTD = ENTRY
	GO TO (ANYCNG), CNGCTL
SMTD,
	CTL = '09,66,10,00,$-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	SLSMTD = ENTRY
	GO TO (ANYCNG), CNGCTL
SYTD,
	CTL = '10,66,10,00,$-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	SLSYTD = ENTRY
	GO TO (ANYCNG), CNGCTL
CMTD,
	CTL = '11,66,10,00,$-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	CSTMTD = ENTRY
	GO TO (ANYCNG), CNGCTL
CYTD,
	CTL = '12,66,10,00,$-'
	CALL INPUT
	GO TO (DISPLA), INXCTL
	CSTYTD = ENTRY
	GO TO (ANYCNG), CNGCTL
RCODE,
	CTL = '13,68,01,00,YY'
	CALL INPUT
	BOCODE = INXCTL - 1
	INXCTL =
	GO TO (ANYCNG), CNGCTL
TFLAG,
	CTL = '14,68,01,00,YY'
	CALL INPUT
	TXFLAG = ENTRY (1,1)
	INXCTL =
	GO TO (ANYCNG),CNGCTL
IMAT2,
	CTL = '15,68,03,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IMAT2 = ENTRY(1,3)
	IF (IMAT2 .NE. '   ')
		BEGIN
		clear coptbl
		TBL_KEY(1,2) = 'I3'
		I3_MAT = IMAT2
		XCALL ISIO (CHN182,COPTBL,TBL_KEY,READ,LOKCTL)
		IF (LOKCTL .NE. 0)
			BEGIN
			XCALL WNMSG (W_ID, 24,'Invalid Material Code',1)
			GOTO IMAT2
			END
		END
	GOTO (ANYCNG),CNGCTL
IPIC,
	CTL = '16,68,06,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IPIC = ENTRY(1,6)
	GOTO (ANYCNG),CNGCTL
ICFG,
	CTL = '17,68,01,00,YN'
	CALL INPUT
	ICFG = INXCTL
	INXCTL = 
	GOTO (ANYCNG),CNGCTL
INN,
	CTL = '18,68,01,00,YN'
	CALL INPUT
	INN = INXCTL
	INXCTL = 
	GOTO (ANYCNG),CNGCTL
IBXQTY,
	CTL = '19,68,04,00,# '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IBXQTY = ENTRY(1,4)
	GOTO (ANYCNG),CNGCTL
IBXSIZ,
	CTL = '20,68,08,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IBXSIZ = ENTRY(1,8)
	GOTO (ANYCNG),CNGCTL
IGA,
	CTL = '21,68,02,00,# '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IGA = ENTRY(1,2)

; 9-23-08 remove validity check per bill n...
;;;	USING IGA SELECT
;;;	(0,16,18,20,22,24,26),	NOP
;;;	(),	GOTO IGA
;;;	ENDUSING

	GOTO (ANYCNG),CNGCTL
IMDPT,
	CTL = '22,68,02,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	IMDPT = ENTRY(1,2)
	GOTO ANYCNG

PRCOD,
	CTL = '23,68,03,00,A '
	CALL INPUT
	GOTO (DISPLA),INXCTL
	PRCOD = ENTRY(1,3)

	CLEAR TBL_KEY
	TBL_KEY(1,2) = 'R3'
	R3_COD = PRCOD
	XCALL ISIO (CHN182,COPTBL,TBL_KEY,READ,LOKCTL)
	IF (LOKCTL .NE. 0)
		BEGIN
		XCALL WNMSG (W_ID, 24,'Invalid Price Code',1)
		GOTO PRCOD
		END
	GOTO ANYCNG

CNGBR,
	IF (SELECT.EQ.2.AND.WHATNO.EQ.1) GO TO BADCNG
	GO TO (ITMNUM,DSCRIP,PRODCT,QONHND,QALLOC,QONODR,ORDRUP,REORDR,
&		UCOST,PRCE1,USCODE,STOCK,FTBNDL,FTCASE,WAYT,UMEAS,QMTD,
&		QYTD,SMTD,SYTD,CMTD,CYTD,RCODE,TFLAG,imat2, IPIC,ICFG,
&		INN,IBXQTY,IBXSIZ,IGA,IMDPT,PRCOD), WHATNO

	GO TO BADCNG

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FNDREC,

	TBL_KEY(1,2) = 'I1'
	I1_KEY = KITMNO
	XCALL ISIO (CHN182,COPTBL,TBL_KEY,READ,LOKCTL)
	IF (LOKCTL .EQ. 0)
	THEN	IN_TABLE = $TRUE
	ELSE	IN_TABLE = $FALSE

	XCALL W_DISP (W_ID, WD_POS, 24,1,WD_CLR, WDC_LIN)
	CTL =

	CLEAR KEY_DSP
	KD1 = IF1
	KD2 = IF2
	KD3 = IF3
	XCALL W_DISP (W_ID, WD_POS, 4,15,ITEMNO)
	XCALL W_DISP (W_ID, WD_POS, 4,32,KEY_DSP)

	XCALL W_DISP (W_ID, WD_POS, 6,15,DESCR)
	IF (MM_DES3.NE.A12) 	XCALL W_DISP (W_ID, WD_POS, 6,46, MM_DES3)
	IF (MM_DES2.NE.A12) 	XCALL W_DISP (W_ID, WD_POS, 6,59, MM_DES2)
	XCALL W_DISP (W_ID, WD_POS, 8,15,PRDCAT)

	ENTRY(1,11) = QTYONH,	'ZZ,ZZZ,ZZX-' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 10,15,ENTRY(1,11))

	ENTRY(1,11) = QTYCOM,	'ZZ,ZZZ,ZZX-' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 12,15, ENTRY(1,11))

	ENTRY(1,11) = QTYONO,	'ZZ,ZZZ,ZZX-' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 14,15, ENTRY(1,11) )

	ENTRY(1,11) = ORDUPT,	'ZZ,ZZZ,ZZX-' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 16,15, ENTRY(1,11) )

	ENTRY(1,11) = REOLVL,	'ZZ,ZZZ,ZZX-' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 18,15, ENTRY(1,11) )

	ENTRY(1,11) = AVGCST,	'ZZ,ZZX.XXX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 20,15, ENTRY(1,11) )
;;;	entry(1,11) = lstcst,	'ZZZX.XXXX' [LEFT]
;;;	xcall w_disp (w_id, wd_pos, 21,15,entry(1,11) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; still in test...

	D_PRICE = PRICE
;;;	using icfg select
;;;	(1),	begin		;configured item
;;;		xcall cfg_p (itemno, if1, if2, if3, p_price, bf)
;;;		if (bf .eq. 0) d_price = p_price
;;;		end
;;;	(),	begin		;regular item
;;;		if (if1.ne.'000' .or. if2.ne.'000' .or. if3.ne.'00000')
;;;			begin
;;;			xcall cfg_p (itemno, if1, if2, if3, p_price, bf)
;;;			if (bf .eq. 0) d_price = p_price
;;;			end
;;;		end
;;;	endusing
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	IF (IN_TABLE .EQ. $TRUE)
	then	BEGIN
		d_PRICE = 0	;per SteveM 3-18-05
		XCALL W_DISP (W_ID, WD_POS, 22,15,'(See Table)')
		END		
	else	begin
		ENTRY(1,11) = d_PRICE,	'ZZ,ZZX.XXX' [LEFT]
		XCALL W_DISP (W_ID, WD_POS, 22,15,ENTRY(1,11) )
		end
;---------------------------------------
	XCALL W_DISP (W_ID, WD_POS, 8,40,USRDEF)
	XCALL W_DISP (W_ID, WD_POS,10,40,STOCK)

	ENTRY(1,3) =  FTBNDL, 'ZZZ' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 12,40, ENTRY(1,3) )

	ENTRY(1,4) = FTCASE,	'ZZZZ' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 14,40, ENTRY(1,4) )

;---------------------------------------
	ENTRY(1,7) = WEIGHT,	'ZZZX.XX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 4,68, ENTRY(1,7) )

	XCALL W_DISP (W_ID, WD_POS, 5,68,SUOFM)

	ENTRY(1,10) = QTYMTD,	'ZZ,ZZZ,ZZX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 7,68, ENTRY(1,10) )

	ENTRY(1,10) = QTYYTD,	'ZZ,ZZZ,ZZX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 8,68, ENTRY(1,10) )

	ENTRY(1,12) = SLSMTD,	'ZZ,ZZZ,ZZZ.XX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 9,68, ENTRY(1,12) )

	ENTRY(1,12) = SLSYTD,	'ZZ,ZZZ,ZZZ.XX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS,10,68, ENTRY(1,12) )

	ENTRY(1,12) = CSTMTD,	'ZZ,ZZZ,ZZZ.XX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS,11,68, ENTRY(1,12) )

	ENTRY(1,12) = CSTYTD,	'ZZ,ZZZ,ZZX.XX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS,12,68, ENTRY(1,12) )

	if (bocode.lt.0 .or. bocode.gt.1) bocode = 1
	XCALL W_DISP (W_ID, WD_POS, 13,68,YESNO(BOCODE+1))
	XCALL W_DISP (W_ID, WD_POS, 14,68,TXFLAG)

	XCALL W_DISP (W_ID, WD_POS, 15,68, IMAT2)

	XCALL W_DISP (W_ID, WD_POS, 16,68, IPIC)

	USING ICFG SELECT
	(1,2),	XCALL W_DISP (W_ID, WD_POS, 17,68,YESNO(ICFG))
	ENDUSING

	USING INN SELECT
	(1,2),	XCALL W_DISP (W_ID, WD_POS, 18,68,YESNO(INN))
	ENDUSING

;;;	USING IPF SELECT
;;;	(1,2),	XCALL W_DISP (W_ID, WD_POS, 19,68,YESNO(IPF))
;;;	ENDUSING

	ENTRY(1,4) = IBXQTY,	'ZZZX' [LEFT]
	XCALL W_DISP (W_ID, WD_POS, 19,68,ENTRY(1,4) )

	XCALL W_DISP (W_ID, WD_POS, 20,68,IBXSIZ)

	ENTRY(1,2) = IGA,	'ZZ'
	XCALL W_DISP (W_ID, WD_POS, 21,68,ENTRY(1,2) )

	XCALL W_DISP (W_ID, WD_POS, 22,68,IMDPT)
	XCALL W_DISP (W_ID, WD_POS, 23,68,PRCOD)
	RETURN
;-------------------------------------------------------------

;==============================================================
;==================== INTERNAL ROUTINES =======================

POP_KEY,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; Find by item # & f_keys
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR MM_DES1, MM_DES2, MM_DES3
	XCALL W_PROC(WP_PLACE, WND_2, 4, 4)
P_DISPLA,
	CLEAR CNGCTL
	XCALL W_DISP(WND_2, WD_CLEAR)
	XCALL W_DISP(WND_2, WD_POS, 1,1, '1. ITEM #')
	XCALL W_DISP(WND_2, WD_POS, 2,1, '2. F1_KEY')
	XCALL W_DISP(WND_2, WD_POS, 3,1, '3. F2_KEY')
	XCALL W_DISP(WND_2, WD_POS, 4,1, '4. F3_KEY')
P_ITEM,
	XCALL WINPT (WND_2,1,13, 15, 00, 'AX', ENTRY, INXCTL)
	GOTO (P_DISPLA, P_ENDOFF, SCROLL),INXCTL
	K_ITEM = ENTRY(1,15)
	GOTO (P_ANY),CNGCTL
P_F1,
	XCALL WINPT (WND_2,2,13, 3, 00, '# ', ENTRY, INXCTL)
	GOTO (P_DISPLA),INXCTL
	MM_CODE = ENTRY(1,3)
	K_F1 = MM_CODE,	'XXX'
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		XCALL W_DISP (WND_2, WD_POS, 2,20, MM_SHORT)
		MM_DES1 = MM_SHORT
		END
	ELSE	CLEAR MM_DES1
	GOTO (P_ANY),CNGCTL
P_F2,
	XCALL WINPT (WND_2,3,13, 3, 00, '# ', ENTRY, INXCTL)
	GOTO (P_DISPLA),INXCTL
	MM_CODE = ENTRY(1,3)
	K_F2 = MM_CODE,	'XXX'
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		XCALL W_DISP (WND_2, WD_POS, 3,20, MM_SHORT)
		MM_DES2 = MM_SHORT
		END
	ELSE	CLEAR MM_DES2

	GOTO (P_ANY),CNGCTL
P_F3,
	XCALL WINPT (WND_2,4,13, 5, 00, '# ', ENTRY, INXCTL)
	GOTO (P_DISPLA),INXCTL
	MM_CODE = ENTRY(1,5)
	K_F3 = MM_CODE,	'XXXXX'
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		XCALL W_DISP (WND_2, WD_POS, 4,20, MM_SHORT)
		MM_DES3 = MM_SHORT
		END
	ELSE	CLEAR MM_DES3

	GOTO (P_ANY),CNGCTL
P_ANY,	
	XCALL WANCN (WND_2, 6, CNGCTL, WHATNO)
	GOTO (P_PROCES, P_CNGBR),CNGCTL+1
P_CNGBR,
	GOTO (P_ITEM, P_F1, P_F2, P_F3),WHATNO
	GOTO P_ANY


P_PROCES,
	XCALL W_DISP (W_ID, WD_POS, 4,15, KITMNO)
	KITMNO = K_ITEM
	CLEAR K_MAT
	XCALL W_PROC (WP_REMOVE, WND_2)
	GOTO EXIT_KEY

P_ENDOFF,
	LOKCTL = 1			;ABORT
	XCALL W_PROC (WP_REMOVE, WND_2)
	RETURN
;------------------------------------------------------------

MEMO_KEY,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR TBL_KEY
	TBLCOD = 'MM'
	MM_KEY = MM_CODE
	READ (CHN182,COPTBL,TBL_KEY)[ERR=NOT_KEY]
	KEY_FOUND = 1		
	RETURN
NOT_KEY,
;;;	XCALL WNMSG (WND_2, 6, 'MEMO NOT FOUND',1)
	KEY_FOUND = 0
	RETURN
;-------------------------------------------------------------


ITEM_KEY,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; Find by item number
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR ITMKEY
	K_F1 = '000'
	K_F2 = '000'
	K_F3 = '00000'

	IF (JUSTIF) XCALL FRMAT (ENTRY(1,15),15)
	XCALL W_DISP (W_ID, WD_POS, 4,15,ENTRY(1,15))
	KITMNO = ENTRY (1,15)
	K_ITEM = KITMNO

	CLEAR TBL_KEY
	TBLCOD = 'IK'
	IK_ITEM = KITMNO

	READ (CHN182,COPTBL,TBL_KEY)[ERR=NO_DEFAULT]
	K_F1 = IK_F1,	'XXX'
	K_F2 = IK_F2,	'XXX'
	K_F3 = IK_F3,	'XXXXX'

NO_DEFAULT,

	GOTO EXIT_KEY
;--------------------------------------------------------------


EXIT_KEY,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOKCTL = 0
	READ (CHN041, ITMMAS, ITMKEY, KEYNUM:1) [ERR=P_BAD_KEY]	;KRF = 2
	GOTO P_KEY_OK


P_BAD_KEY,
	CALL FIND_DAMPER		;5-24-07
	CLEAR ITMMAS
	LOKCTL = 0
	XCALL ISIO (CHN041, ITMMAS, K_ITEM, READ, LOKCTL)
	IF (LOKCTL .EQ. 0)	;existing vanilla item...
	THEN	BEGIN
		MSGCTL = 7		
		XCALL wnmsg (w_id, 24,'ITEM NOT FOUND, ADD? (Y/N)',MSGCTL)
		IF (MSGCTL .EQ. 0)
		THEN	BEGIN		;save data for new item
			CLEAR QTYONH, QTYONO, QTYCOM
			CLEAR USEMTD, QTYMTD, SLSMTD, CSTMTD
			CLEAR USEYTD, QTYYTD, SLSYTD, CSTYTD
			CLEAR IF1,IF2,IF3

			LOC(1) = DEFALT

			IF (IS_DAMPER)
				BEGIN
				K_ITEM = D_ITEM
				ITEMNO = D_ITEM
				CALL ADD_DAMPER_PRICE
				END

			IMAT = K_MAT
			IF1 = K_F1
			IF2 = K_F2
			IF3 = K_F3

			XCALL ISIO (1, ITMMAS, ITEMNO, STORE, LOKCTL)
			IF (LOKCTL .NE. 0) 
				BEGIN
				CLEAR ITMMAS	
				LOKCTL = 1	;ABORT
				END
			;!!! note next line can send you back to the top !!
			goto exit_key		;re-read item for change mode
			END
		ELSE	BEGIN
			CLEAR ITMMAS	;don't want to add - clear
			LOKCTL = 1	;Abort
			END
		END
	ELSE	BEGIN
		CLEAR ITMMAS		;vanilla item not found
		LOKCTL = 2
		END

	KITMNO = K_ITEM
;;;	LOKCTL = 2		;key not same

P_KEY_OK,
	CLEAR INXCTL, SELECT

	USING LOKCTL SELECT
	(0),	BEGIN
		SELECT = 2		;item exists, change mode
		CNGCTL = 1		;change mode
		END

	(1),	INXCTL = 1		;ABORT

	(),	BEGIN
		IF1 = K_F1
		IF2 = K_F2
		IF3 = K_F3
		IMAT = K_MAT
		SELECT = 1		;add new item
		END
	ENDUSING

	RETURN
;--------------------------------------------------------------
ADD_DAMPER_PRICE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	FOR I FROM 1 THRU 3 
		BEGIN
		PRICE = PRICE + DAMPER_PRICE(I)
		DAMPER_PRICE(I) = 
		END
	RETURN
;----------------------------------------------------------------

FIND_DAMPER,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CLEAR BAD_DIGIT, IS_DAMPER

	D_ITEM = K_ITEM		;SAVE AS ENTERED
	PARTNO = K_ITEM

	FOR I FROM 1 THRU 3
		BEGIN
		CLEAR DAMPER_PRICE(I)
		CLEAR SAVE_DP(I)
		END

	MAXFLEN = %TRIM(PARTNO)
	FOR I FROM 1 THRU 3
		BEGIN
		XCALL INSTR(1, PARTNO, "*", FL)
		IF (.NOT. FL) 		EXITLOOP
		PARTNO(FL, MAXFLEN) = PARTNO(FL+1, MAXFLEN)
		CALL D_SIZE
		IF (BAD_DIGIT)
			BEGIN
			XCALL OLMSG(WND_1,23,'damper configuration',2)
			RETURN
			END
		IS_DAMPER = 1
		END

	K_ITEM = PARTNO
	RETURN

D_SIZE,	;---------------------------------------
	CLEAR BAD_DIGIT

	ONERROR BADDIG
	DAMP = PARTNO(FL, FL+1)
	OFFERROR

;check damper price...
	CLOSE 9

;;;	FL_NAME = 'SDPRIC'		;SSQ 9-9-03
;;;	OPEN(9,I,FILPRC)		;SSQ 9-9-03
	OPEN (9,I,'SMC:SDPRIC.SMC')
	XCALL IO (9,TPRICE,1,READ,LOKCTL)
	IF(DAMP.LE.80) 
	THEN	DAMPER_PRICE(I) = ARRAY(DAMP)*10
	ELSE	CLEAR DAMPER_PRICE(I)

	CLOSE 9
	IF (DAMPER_PRICE(I) .LE. 0)
		BEGIN
		XCALL OLMSG(WND_1,23,'Zero or missing damper price',2)
		GOTO BADDIG
		END
;;;	LDAMPR = 1
	RETURN
BADDIG,
	CLEAR DAMPER_PRICE(I)
	BAD_DIGIT = 1
	RETURN
;------------------------------------------------------------
;==============================================================


INPUT,
	XCALL WINPT (W_ID, ROW,COL,MAX,MIN,TYPE,ENTRY,INXCTL, F_KEY)
	RETURN
BADCNG,
	XCALL WNMSG (W_ID, 24, 'INVALID SELECTION',1)
ANYCNG,
;;;	CNGCTL = 6
;;;	XCALL ANYCN (CNGCTL,WHATNO)
	XCALL W_DISP (W_ID, WD_POS, 24, 1, WD_CLR, WDC_LIN,
&		'FIELD # TO CHANGE           <TAB> = DELETE')

	XCALL WINPT (W_ID, 24,20,02,00,'#T',ENTRY,INXCTL)
	IF (INXCTL .EQ. 3)
		BEGIN
		XCALL W_DISP(W_ID, WD_POS, 24,1,WD_CLR, WDC_LIN,
&			'DELETE, ARE YOU SURE?')

		XCALL WINPT (W_ID, 24,24,01,01,'YN',ENTRY,INXCTL)
		GOTO (ANYCNG),INXCTL-1
		XCALL ISIO (CHN041,ITMMAS,ITMKEY,DELETE,LOKCTL)
		GOTO DISPLA
		END
	WHATNO = ENTRY(1,2)
	IF (WHATNO .EQ. 0)
	THEN	CLEAR CNGCTL
	ELSE	CNGCTL = 1

	GO TO (PROCES,PROCES,CNGBR), CNGCTL+2

SCROLL,
	IF (WND_2)
		BEGIN
		XCALL W_PROC (WP_REMOVE, WND_2)
		XCALL W_UPDT
		END

	GO TO (SCRADD,SCRCNG,SCRCNG),SELECT
SCRADD,
	XCALL WNMSG (W_ID, 24, 'SCROLLING NOT ALLOWED IN ADD MODE',1)
	GO TO ITMNUM
SCRCNG,
	XCALL IOS (CHN041, ITMMAS, READ, LOKCTL)
	IF (LOKCTL) 
		BEGIN
		INXCTL = 2
		GO TO DISPLA
		END

	XCALL W_DISP (W_ID, WD_POS, 4,15, ITEMNO)
	KITMNO = ITEMNO

	GO TO NEWOK

NOMORE,
	XCALL WNMSG (W_ID, 24, 'END OF FILE',1)
	GO TO ITMNUM


;--------------------

PROCES,
	GO TO (ADD,CHANGE,DELETE), SELECT
ADD,
	LOC(1) = DEFALT

	IMAT = K_MAT
	IF1 = K_F1
	IF2 = K_F2
	IF3 = K_F3

	XCALL ISIO (1, ITMMAS, ITEMNO, STORE, LOKCTL)
	IF (LOKCTL .NE. 0) GOTO BADITM	
	GOTO DISPLA

CHANGE,
	LOKCTL = 1
	XCALL ISIO (1, ITMMAS, ITEMNO, WRITE, LOKCTL)
;;;	WRITE (CHN041, ITMMAS, ITEMNO) [ERR=C_BAD_KEY]
	GOTO DISPLA
C_BAD_KEY,
	XCALL WNMSG (W_ID, 24, 'DID NOT UPDATE',1)
	GOTO DISPLA

DELETE,
	IF (TIPSIS.LE.2) GO TO DELET1


BADDL1,
	XCALL WNMSG (W_ID, 24, 'NO DELETION. QUANTITIES ARE NOT ZERO.',2)
	GO TO DISPLA

DELET1,
	LOCCTR =
CHKQTY,
	INCR LOCCTR
	IF (LOCCTR.GT.LOCTNS.OR.LOC(LOCCTR).EQ.'  ') GO TO OKDEL
	IF (QTYONH(LOCCTR).NE.0.OR.QTYONO(LOCCTR).NE.0
&		.OR.QTYCOM(LOCCTR).NE.0) GO TO BADDL1
	GO TO CHKQTY
OKDEL,

	LOKCTL = 1
	XCALL ISIO (1, ITMMAS, ITEMNO, DELETE, LOKCTL)
	XCALL WNMSG (W_ID, 24, 'ITEM DELETED',2)
	GOTO DISPLA

BADITM,
	XCALL WNMSG (W_ID, 24, 'ITEM # ALREADY ON FILE',1)
	GO TO DISPLA

ENDOFF,
	CALL CLOSE
	XCALL PGCHN ('CP:IMMENU',1)
LIST,
	CALL CLOSE
	XCALL PGCHN ('CP:IMFPRT',1)

GET_MEMO_KEYS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL ALPDC (IF1, MM_CODE, BF)
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		MM_DES1 = MM_SHORT
		END
	ELSE	CLEAR MM_DES1

	XCALL ALPDC (IF2, MM_CODE, BF)
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		MM_DES2 = MM_SHORT
		END
	ELSE	CLEAR MM_DES2

	XCALL ALPDC (IF3, MM_CODE, BF)
	CALL MEMO_KEY
	IF (KEY_FOUND) 
	THEN	BEGIN
		MM_DES3 = MM_SHORT
		END
	ELSE	CLEAR MM_DES3

	RETURN
;-------------------------------------------------

OPENS,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLEAR OPNOK

	SWITCH = 5

	XCALL FILES (1,'SU',41,SWITCH)		;FILE # 41 -- ITMMAS FILE
	IF (SWITCH.EQ.9) RETURN
	CHN041 = 1
	
	SWITCH = 5
	XCALL FILES (2,'SI',41,SWITCH)		;FOR VANILLA LOOK-UP
	IF (SWITCH .EQ. 9) RETURN
	CHNTMP = 2

	SWITCH = 5
	XCALL FILES (17,'SI',182,SWITCH)		;FILE # 182 -- COPTBL
	IF (SWITCH .EQ. 9) RETURN
	CHN182 = 17
	
	LOKCTL = 0
	ITEMNO = '!!!!!!!!!!!!!!!'		;HEADER
	XCALL ISIO (1,DUMINV,ITEMNO,READ,LOKCTL)
	UNLOCK 1
	JUSTIF = JSTIFY				;SAVE THE JUSTIFY FLAG
	GO TO (NOTOPN), LOKCTL

	DEFALT = DFLTLO
	LOCTNS = NUMLOC
	TIPSIS = TYPSYS
NOTOPN,
	OPNOK = 1
	RETURN
;----------------------------------------------------

CLOSE,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF (CHN041) CLOSE CHN041
	IF (CHNTMP) CLOSE CHNTMP
	IF (CHN182) CLOSE CHN182

	RETURN
;----------------------------------------------------

INIT_WINDOW,	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		;;; SET UP SCREEN 1 WINDOW
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	XCALL U_START("LIB:SMC_WND",,,,,,,100)
	XCALL TNMBR (WN_TNMBR)
	XCALL W_PROC(WP_FIND,WND_1,WN_NAME)
	IF (.NOT. WND_1)
		BEGIN
		XCALL W_PROC(WP_CREATE,WND_1,WN_NAME,24,78)
		END
	XCALL W_BRDR(WND_1,WB_TITLE,'ORDER MAINTENANCE',
&			WB_TPOS,WBT_TOP,WBT_CENTER)
	XCALL W_PROC(WP_PLACE,WND_1,1,1)	
	XCALL W_DISP(WND_1,WD_CLEAR)
	XCALL W_UPDT
	W_ID = WND_1
	xcall u_logwnd(wnd_1)


	W2_NAME = 'FKEY'
	XCALL W_PROC(WP_FIND, WND_2, W2_NAME)
	IF (.NOT. WND_2) XCALL W_PROC(WP_CREATE,WND_2,W2_NAME,6,41)
	XCALL W_BRDR(WND_2,WB_TITLE,'Item Keys',
&		WB_TPOS,WBT_TOP,WBT_CENTER)
;;;	XCALL W_PROC(WP_PLACE, WND_2, 4, 4)
;;;	XCALL W_DISP(WND_2, WD_CLEAR)

;;;	MAXARA = 20
;;;	PLEN = 33
;;;	NUMROW = 5
;;;	WX = 
;;;	WY = 
;;;	POP_WID = 'CC_TBL'
;;;	POP_TITLE = 'Credit Cards'
		
	RETURN

END
