;IOW.CP
SUBROUTINE IOW ; (CHANEL,BUFFER,RECNO,IOCTL,LOKCTL,W_ID)
;
;

CHANEL	,D	; CHANNEL TO PERFORM READ/WRITE OPERATION ON
BUFFER	,A	; BUFFER AREA TO READ/WRITE RECORDS FROM
RECNO	,D	; RELATIVE RECORD NUMBER FOR READ/WRITE OPEATION
IOCTL	,D	; I-O CONTROL VARIABLE
		;	0 = READ
		;	1 = WRITE
LOKCTL	,D	; READ/WRITE TYPE
		;  ON ENTRY:
		;	0 = DISPLAY LOCK MESSAGE, AND ALLOW ABORT
		;	1 = DISPLAY LOCK MESSAGE, DO NOT ALLOW ABORT
		;  ON EXIT:
		;	0 = SUCCESSFUL OPERATION
		;	1 = ABORT SELECTED

W_ID	,D	;WINDOW



	.DEFINE POOLSIZE	,25000
	.DEFINE WNDCHNL		,15
	.DEFINE MAXWINS		,5
	.INCLUDE 'def:WINDOWS.DEF'

RECORD
	ALPHA	,A3
	ALPH2	,A2
	ARECNO	,A5
	DELETE	,D1
	ERL	,D5
	ERR	,D3
	LOCKED	,D1
	MASK	,A5,	'ZZZZX'
	MESSAG	,A43
	MESAGE	,A43,	'RECORD TEMPORARILY IN USE - WILL YOU WAIT ?'
	MESAG2	,A14,	'PLEASE WAIT...'
	SYSTEM	,D1
	TCHAR	,D3
	DCHAR	,D3
PROC
	XCALL ENVRN (SYSTEM)
	IF (SYSTEM.GT.1) SYSTEM = 1	;MAINTAIN TSX+ = 1
	MESSAG = MESAGE
	IF (LOKCTL.EQ.1) MESSAG (29,43) = MESAG2
START,
	GO TO (WRITE), IOCTL		;DETERMINE IF READ OR WRITE OPERATION
READ,
	ON ERROR FILERR
	READ (CHANEL,BUFFER,RECNO)
	OFF ERROR

	LOKCTL =
	GO TO EXIT
WRITE,
	ON ERROR FILERR
	WRITE (CHANEL,BUFFER,RECNO)
	OFF ERROR
	LOKCTL =
	GO TO EXIT
FILERR,
	OFF ERROR
	XCALL ERROR (ERR,ERL)
	IF (ERR.EQ.40) GO TO LOCKED		;LOCKED RECORD ERROR NUMBER
ERRMSG,
	ALPHA = ERR, 'ZZX'
	ALPH2 = CHANEL, 'ZX'
	ARECNO = RECNO, MASK
	XCALL W_DISP(W_ID,WD_POS,24,1,WD_CLR,WDC_LIN)
	IF (IOCTL.EQ.0) XCALL W_DISP(W_ID,WD_POS,0,0,'READ ')
	IF (IOCTL.EQ.1) XCALL W_DISP(W_ID,WD_POS,0,0,'WRITE ')
	XCALL W_DISP(W_ID,WD_POS,24,1,'ERROR IOW ERROR HAS OCCURED')
;;;	DISPLAY (15,'ERROR ',ALPHA,'--CHANNEL ',ALPH2,' ON RECORD ',ARECNO)
	XCALL W_DISP(W_ID,WD_POS,3,1,WD_CLR,WDC_LIN)
	STOP
LOCKED,						;BLOCK IS LOCKED
	OFFERROR
	XCALL W_DISP(W_ID,WD_POS,24,1,WD_CLR,WDC_LIN,MESSAG)
	LOCKED = 1
	GO TO (WAIT1), LOKCTL
	XCALL FLAGS (00010000,1)			;TURN OFF CHAR ECHO
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'F',29,'S')	;F=TURN OFF CHAR ECHO
;;;					;S=TURN ON SINGLE CHAR ACTIVATION
;-
	XCALL W_DISP(W_ID,WD_ACCEPT,TCHAR)
;-
;;;	ACCEPT (15,TCHAR)
	IF (TCHAR.EQ.89) XCALL W_DISP(W_ID,WD_POS,0,0,'Y')
	IF (TCHAR.EQ.78) XCALL W_DISP(W_ID,WD_POS,0,0,'N')
	IF (TCHAR.EQ.089) GO TO WAIT	;'Y' = 089 IN ASCII
	IF (TCHAR.NE.078) GO TO LOCKED	;'N' = 078 IN ASCII
	CALL ACPTCR
	IF (DELETE) GO TO DELETE
	LOKCTL = 1
EXIT,
	IF (LOCKED) XCALL W_DISP(W_ID,WD_POS,24,1,WD_CLR,WDC_LIN)
	LOCKED =
	RETURN
WAIT,
	CALL ACPTCR
	IF (DELETE) GO TO DELETE
	XCALL W_DISP(W_ID,WD_POS,24,1,WD_CLR,WDC_LIN,MESAG2)
WAIT1,
	SLEEP 5
	GO TO START
ACPTCR,
	DELETE =
;-
ACCEPT,
	XCALL FLAGS(00010000,1)
	XCALL W_DISP(W_ID,WD_ACCEPT,TCHAR)
	IF(TCHAR.EQ.10) GOTO ACCEPT
	IF(TCHAR.EQ.13) ACCEPT(15,DCHAR)
	XCALL FLAGS(00010000,0)
	IF(TCHAR .EQ. 127)
		BEGIN
		DELETE = 1
		RETURN
		END
;-
;;;	ACCEPT (15,TCHAR)
;;;	IF (TCHAR.EQ.127) DELETE = 1
;;;	IF (TCHAR.EQ.127) RETURN
;;;	IF (TCHAR.NE.13) GO TO ACPTCR
;;;	IF (SYSTEM.NE.1) ACCEPT (15,TCHAR)
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'T',29,'E')
;;;					;T=TURN OFF SINGLE CHAR ACTIVATION,
;;;					;E=TURN ON CHAR ECHO
;;;	XCALL FLAGS (00010000,0)	;TURN ON CHAR ECHO

	RETURN
DELETE,
;;;	IF (SYSTEM.EQ.1) DISPLAY (15,29,'T',29,'E')
	XCALL FLAGS (00010000,0)
	GO TO LOCKED
END
