; INITAP / AP 
;
;
;:
;		PROGRAM TO INITIALIZE ALL FILES
;		IN THE ACCOUNTS PAYABLE SYSTEM.
;		DO NOT LEAVE ON USER'S DISK.
;

RECORD FILES
	AP1	,A14,'   :VENMAS.   '
	AP2	,A14,'   :VENIDX.   '
	AP3	,A14,'   :EXPACT.   '
	AP4	,A14,'   :NEWAP0.   '
	AP5	,A14,'   :APDIST.   '
	AP6	,A14,'   :APOPEN.   '
	AP7	,A14,'   :PTLPAY.   '
	AP8	,A14,'   :APINTR.   '
	AP9	,A14,'   :APCHEK.   '
	AP10	,A14,'   :RECONC.   '
RECORD ,X
	AP	,10A14
RECORD
	PHYDEV	,A3
	CPYEXT	,A3
RECORD CTLVAR
		,D10,0000100001
	MAXREC	,D5
		,D3,000
RECORD ZERO
		,2D10
RECORD CTLVR1
	NXTVCH	,D6
		,A39	;daf
	INTRIM	,D1
	INTRPO	,D1
	INTRSP	,D1
	INTRJC	,D1
	INTRGL	,D1
		,D10	,0000100001
	MAXRC1	,D5
		,D3	,000
RECORD BRACKS
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A50	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
		,A44	,']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'
RECORD COMPNY
			.INCLUDE 'DEF:CMP001.DEF'
RECORD DEVICE	
			.INCLUDE 'DEF:DEV001.DEF'
RECORD
			.INCLUDE 'DEF:RD011S.DEF'
			.INCLUDE 'DEF:RD012S.DEF'
			.INCLUDE 'DEF:RD013S.DEF'
			.INCLUDE 'DEF:RD014S.DEF'
			.INCLUDE 'DEF:RD016S.DEF'
			.INCLUDE 'DEF:RD017S.DEF'
			.INCLUDE 'DEF:RD019S.DEF'
			.INCLUDE 'DEF:RD127S.DEF'
			.INCLUDE 'DEF:RD020S.DEF'
			.INCLUDE 'DEF:RD078S.DEF'
RECORD ,X
	RECSIZ	,10D4
RECORD
	WRTREC	,A894
RECORD
	CHAR	,A1
	CPNTR	,D2
	FILCNT	,D2,00
	MAXCNT	,10D5
	BLKSIZ	,10D5
	ENTRY	,A6
	INXCTL	,D1
	MAX	,D1
	ROW	,D2
	COL	,D2
	TYPE	,A2
	CNGCTL	,D1
	WHATNO	,D2
	NEWAP	,D1
	FLNAME	,A14
	RECCNT	,D5
	SIZE	,D4
	SVINTR	,D1
	SAVJC	,D1
	SAVIM	,D1
	SAVPO	,D1
	SAVSPC	,D1
	FSTMSG	,D1
	SYSTEM	,D1
	LOKCTL	,D1
	READ	,D1,	0
	WRITE	,D1,	1
	V	,D1
	YESNO	,2A1,'N','Y'
	SWITCH	,D1
	ERROR   ,D3
PROC 
	V = -1
	XCALL TERID (V)
	XCALL ENVRN(SYSTEM)
BEGIN,
	V = 1
	FSTMSG =
	SVINTR =
	SAVJC =
	SAVPO =
	SAVIM =
	SAVSPC =
	NXTVCH = 1
	OFFERROR
	XCALL OUTPT(1,1,2,'INITIALIZE A/P FILES',V)
	XCALL OUTPT(4,20,0,'PLEASE ENTER COMPANY CODE',V)
INPTCE,
	XCALL INPUT (4,47,3,3,'AE',ENTRY,INXCTL,V)
	GO TO (BEGIN,END), INXCTL
	CPYEXT = ENTRY (1,3)
	XCALL OPENF (11,'I','UT:COMPNY.DDF',ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOCOMP
	LOKCTL = 1
	XCALL IO (11,COMPNY,1,READ,LOKCTL)
	CLOSE 11
	CPNTR =
CPLOOP,
	INCR CPNTR
	IF (CPNTR.GT.8) GO TO INVCMP
	IF (CPYEXT.NE.COMCOD(CPNTR)) GO TO CPLOOP
	CNGCTL = 2
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (REDDEV,INPTCE), CNGCTL + 1
INVCMP,
	XCALL MESAG('INVALID COMPANY CODE',1)
	GO TO INPTCE
REDDEV,
	XCALL OPENF (11,'I','UT:DEVICE.DDF',ERROR,0,SWITCH)
	IF (SWITCH) GO TO NODEV
	LOKCTL = 1

;;; 1-30-17 no more venmas
;;;	XCALL IO (11,DEVICE,11,READ,LOKCTL)
;;;	AP1(1,3) = DEVNAM(CPNTR)
;;;	IF (AP1(1,3).EQ.'   ') AP1(1,3) = ' DK'
;;;	AP1(12,14) = CPYEXT
;;;	LOKCTL = 1
;;;	XCALL IO (11,DEVICE,12,READ,LOKCTL)
;;;	AP2(1,3) = DEVNAM(CPNTR)
;;;	IF (AP2(1,3).EQ.'   ') AP2(1,3) = ' DK'
;;;	AP2(12,14) = CPYEXT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	LOKCTL = 1
	XCALL IO (11,DEVICE,13,READ,LOKCTL)
	AP3(1,3) = DEVNAM(CPNTR)
	IF (AP3(1,3).EQ.'   ') AP3(1,3) = ' DK'
	AP3(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,14,READ,LOKCTL)
	AP4(1,3) = DEVNAM(CPNTR)
	IF (AP4(1,3).EQ.'   ') AP4(1,3) = ' DK'
	AP4(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,16,READ,LOKCTL)
	AP5(1,3) = DEVNAM(CPNTR)
	IF (AP5(1,3).EQ.'   ') AP5(1,3) = ' DK'
	AP5(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,17,READ,LOKCTL)
	AP6(1,3) = DEVNAM(CPNTR)
	IF (AP6(1,3).EQ.'   ') AP6(1,3) = ' DK'
	AP6(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,19,READ,LOKCTL)
	AP7(1,3) = DEVNAM(CPNTR)
	IF (AP7(1,3).EQ.'   ') AP7(1,3) = ' DK'
	AP7(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,127,READ,LOKCTL)
	AP8(1,3) = DEVNAM(CPNTR)
	IF (AP8(1,3).EQ.'   ') AP8(1,3) = ' DK'
	AP8(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,20,READ,LOKCTL)
	AP9(1,3) = DEVNAM(CPNTR)
	IF (AP9(1,3).EQ.'   ') AP9(1,3) = ' DK'
	AP9(12,14) = CPYEXT
	LOKCTL = 1
	XCALL IO (11,DEVICE,78,READ,LOKCTL)
	AP10(1,3) = DEVNAM(CPNTR)
	IF (AP10(1,3).EQ.'   ') AP10(1,3) = ' DK'
	AP10(12,14) = CPYEXT
	CLOSE 11
BEGIN1,
	COL = 49
	MAX = 1
	TYPE = 'YN'
	XCALL OUTPT(8,20,2,'ACTIVE A/P INTERFACES:',V)
	XCALL OUTPT(10,25,0,'1. GENERAL LEDGER',V)
	XCALL OUTPT(12,25,0,'2. JOB COSTING',V)
	XCALL OUTPT(14,25,0,'3. STD PRODUCT COSTING',V)
	XCALL OUTPT(16,25,0,'4. PURCHASING',V)
	XCALL OUTPT(18,25,0,'5. INVENTORY MANAGEMENT',V)
	FLNAME = AP4
	IF (FLNAME(1,1).EQ.' ') FLNAME = AP4(2,13)
	NEWAP =
	ONERROR INTRGL
	XCALL OPENF (1,'I',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO INTRGL
	NEWAP = 1
	OFFERROR
	LOKCTL = 1
	XCALL IOS (1,WRTREC,READ,LOKCTL)	;NO EOF TRAP BECAUSE ONLY
	XCALL RSTAT(SIZE,CHAR)			;READING ONE RECORD
	CLOSE 1
	CTLVR1 (44,48) = WRTREC (SIZE-22,SIZE-18)
;;;	NXTVCH = WRTREC (SIZE-65,SIZE-60)	; SAVE NEXT VOUCHER NUMBER
	NXTVCH = WRTREC (SIZE-67,SIZE-62)	; SAVE NEXT VOUCHER NUMBER
	SVINTR = INTRGL				; SAVE ORIGINAL INTERFACE FLAGS
	SAVIM = INTRIM
	SAVJC = INTRJC
	SAVPO = INTRPO
	SAVSPC = INTRSP
	XCALL OUTPT(10,49,0,YESNO(INTRGL+1),V)
	XCALL OUTPT(12,49,0,YESNO(INTRJC+1),V)
	XCALL OUTPT(14,49,0,YESNO(INTRSP+1),V)
	XCALL OUTPT(16,49,0,YESNO(INTRPO+1),V)
	XCALL OUTPT(18,49,0,YESNO(INTRIM+1),V)
	GO TO ANYCN2
INTRGL,
	OFF ERROR
	INTRGL =
	ROW = 10
	CALL INPUT
	IF (INXCTL.EQ.1) INTRGL = 1
	GO TO (ANYCN2), CNGCTL
INTRJC,
	INTRJC =
	ROW = 12
	CALL INPUT
	IF (INXCTL.EQ.1) INTRJC = 1
	GO TO (ANYCN2), CNGCTL
INTRSP,
	INTRSP =
	ROW = 14
	CALL INPUT
	IF (INXCTL.EQ.1) INTRSP = 1
	GO TO (ANYCN2), CNGCTL
INTRPO,
	INTRPO =
	ROW = 16
	CALL INPUT
	IF (INXCTL.EQ.1) INTRPO = 1
	GO TO (ANYCN2), CNGCTL
INTRIM,
	INTRIM =
	ROW = 18
	CALL INPUT
	IF (INXCTL.EQ.1) INTRIM = 1
ANYCN2,
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (PROCS2,CNGBR2), CNGCTL + 1
CNGBR2,
	GO TO (INTRGL,INTRJC,INTRSP,INTRPO,INTRIM), WHATNO
	CNGCTL = 3
	GO TO ANYCN2
PROCS2,
	IF (NEWAP.EQ.0) GO TO BEGIN2
	CALL WRITE
	IF (SIZE.EQ.299) CALL SMALL
	IF (SIZE.EQ.894) CALL LARGE
BEGIN2,
	XCALL OUTPT(7,20,2,'PLEASE ENTER THE MAX # RECORDS',V)
	XCALL OUTPT(8,20,0,'TO ALLOW FOR EACH FILE BELOW:',V)
	XCALL OUTPT (10,20,0,'1. VENDOR MASTER',V)
	XCALL OUTPT (11,20,0,'2. VALID A/P ACCOUNTS',V)
	XCALL OUTPT (12,20,0,'3. PAYABLE VOUCHERS',V)
	XCALL OUTPT (13,20,0,'4. A/P DISTRIBUTIONS',V)
	XCALL OUTPT (14,20,0,'5. A/P OPEN ITEMS',V)
	XCALL OUTPT (15,20,0,'6. PARTIAL PAYMENTS',V)
	XCALL OUTPT (16,20,0,'7. J/C-P/O-SPC INTERFACE',V)
	XCALL OUTPT (17,20,0,'8. A/P CHECK TRX FILE',V)
	XCALL OUTPT (18,20,0,'9. RECONCILIATION FILE',V)
	XCALL OUTPT(21,20,0,'(LEAVING A FIELD BLANK WILL',V)
	XCALL OUTPT(22,21,0,'SKIP CREATING THAT FILE.)',V)
INPUT1,
;;;	COL = 46
;;;	TYPE = 'NE'
;;;	ROW = 10
;;;	MAX = 5
;;;	CALL INPUT
;;;	GO TO (BEGIN,END), INXCTL
;;;	MAXCNT (1) = ENTRY (1,5)
;;;	MAXCNT (2) = ENTRY (1,5)
;;;	GO TO (ANYCNG), CNGCTL
INPUT2,
	TYPE = 'N '
	ROW = 11
	MAX = 4
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (3) = ENTRY (1,4)
	GO TO (ANYCNG), CNGCTL
INPUT3,
	ROW = 12
	MAX = 4
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (4) = ENTRY (1,4)
	IF (MAXCNT(4).NE.0 .AND. NEWAP.EQ.1) CALL VERIFY
	IF (INXCTL.EQ.2) GO TO INPUT3
	GO TO (ANYCNG), CNGCTL
INPUT4,
	ROW = 13
	MAX = 5
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (5) = ENTRY (1,5)
	GO TO (ANYCNG), CNGCTL
INPUT5,
	ROW = 14
	MAX = 5
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (6) = ENTRY (1,5)
	GO TO (ANYCNG), CNGCTL
INPUT6,
	ROW = 15
	MAX = 4
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (7) = ENTRY (1,4)
	GO TO (ANYCNG), CNGCTL
INPUT7,
	ROW = 16
	MAX = 4
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (8) = ENTRY (1,4)
	GO TO (ANYCNG), CNGCTL
INPUT8,
	ROW = 17
	MAX = 5
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (9) = ENTRY (1,5)
	GO TO (ANYCNG), CNGCTL
INPUT9,
	ROW = 18
	MAX = 5
	CALL INPUT
	GO TO (BEGIN), INXCTL
	MAXCNT (10) = ENTRY (1,5)
	GO TO ANYCNG
CNGBR,
	COL = 46
	TYPE = 'N '
	GO TO (INPUT1,INPUT2,INPUT3,INPUT4,INPUT5,INPUT6,INPUT7,INPUT8,INPUT9),
&			 WHATNO
	GO TO ANYCNG
PROCES,
	XCALL WATE (4,2)
	RECSIZ (4) = 299
	IF (INTRJC.OR.INTRSP.OR.INTRPO) RECSIZ (4) = 894
	FILCNT =
BLOCKS,
	INCR FILCNT
	BLKSIZ(FILCNT) = ((RECSIZ(FILCNT) + 2)*(MAXCNT(FILCNT) + 2))/512 + 1
	IF (FILCNT.LT.10) GO TO BLOCKS
	ONERROR ERRMSG
	FILCNT = 2	;skip venmas, venidx
WRLOOP,
	INCR FILCNT
	IF (FILCNT.GT.10) GO TO CHKINT
	IF (MAXCNT(FILCNT).EQ.0) GO TO WRLOOP
	MAXREC = MAXCNT (FILCNT) + 1
	MAXRC1 = MAXREC
	WRTREC =
	IF (FILCNT.NE.2.AND.FILCNT.NE.4)
&		WRTREC(RECSIZ(FILCNT)-17,RECSIZ(FILCNT)) = CTLVAR
;;;	IF (FILCNT.EQ.4) WRTREC (RECSIZ(4)-65,RECSIZ(4)) = CTLVR1
	IF (FILCNT.EQ.4) WRTREC (RECSIZ(4)-67,RECSIZ(4)) = CTLVR1

	IF ((FILCNT.EQ.3.OR.FILCNT.EQ.5.OR.FILCNT.EQ.6).AND.INTRGL)
&		 WRTREC (19,19) = 1

;;;&		 WRTREC (17,17) = 1
	FLNAME = AP(FILCNT)
	XCALL OPENF (1,'O',FLNAME,BLKSIZ(FILCNT),RECSIZ(FILCNT),SWITCH)
	IF (SWITCH) GO TO NOROOM
	WRITES (1,WRTREC(1,RECSIZ(FILCNT)))
	RECCNT = 1
WRBRKS,
	INCR RECCNT
	WRITES (1,BRACKS(1,RECSIZ(FILCNT)))
	IF (RECCNT.LE.MAXREC) GO TO WRBRKS
	CLOSE 1
	WRTREC =
	GO TO WRLOOP
CHKINT,
	IF (SVINTR.EQ.INTRGL) GO TO CKINT2
	IF (MAXCNT(3).NE.0) GO TO NEXT5
	FLNAME = AP3
	IF (FLNAME(1,1).EQ.' ') FLNAME = AP3(2,14)
	ONERROR NEXT5
	XCALL OPENF (3,'U',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOFILE
	OFFERROR
	LOKCTL = 1
	XCALL IO (3,WRTREC,1,READ,LOKCTL)
	WRTREC (13,13) = INTRGL
	LOKCTL = 1
	XCALL IO (3,WRTREC(1,37),1,WRITE,LOKCTL)
	CLOSE 3
NEXT5,
	IF (MAXCNT(5).NE.0) GO TO NEXT6
	FLNAME = AP5
	IF (FLNAME(1,1).EQ.' ') FLNAME = AP5(2,14)
	ONERROR NEXT6
	XCALL OPENF (5,'U',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOFILE
	OFFERROR
	LOKCTL = 1
	XCALL IO (5,WRTREC,1,READ,LOKCTL)
	WRTREC (17,17) = INTRGL
	LOKCTL = 1
	XCALL IO (5,WRTREC(1,37),1,WRITE,LOKCTL)
	CLOSE 5
NEXT6,
	IF (MAXCNT(6).NE.0) GO TO CKINT2
	FLNAME = AP6
	IF (FLNAME(1,1).EQ.' ') FLNAME = AP6(2,14)
	ONERROR CKINT2
	XCALL OPENF (6,'U',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOFILE
	OFFERROR
	LOKCTL = 1
	XCALL IO (6,WRTREC,1,READ,LOKCTL)
	WRTREC (17,17) = INTRGL
	LOKCTL = 1
	XCALL IO (6,WRTREC(1,124),1,WRITE,LOKCTL)
	CLOSE 6
CKINT2,
	IF (NEWAP.EQ.0 .OR. MAXCNT(4).NE.0) GO TO ENDCHK
		;NO NEED TO CHECK IF NEWAP0 FILE DIDN'T EXIST BEFORE
		;OR IS BEING NEWLY INITIALIZED
	IF (SIZE.EQ.299) CALL SMALL
	IF (SIZE.EQ.894) CALL LARGE
ENDCHK,
	OFF ERROR
	GO TO BEGIN
END,
	CLOSE 15
	XCALL PGMND
	STOP
;*******************************************************************************
SMALL,
	IF (INTRJC .OR. INTRPO .OR. INTRSP) GO TO NOINTR
	RETURN
NOINTR,
	IF (FSTMSG) GO TO RESTR1
	XCALL OUTPT (3,1,2,'\',1)
	XCALL OUTPT (8,10,0,
&	 'IN ORDER TO INSTALL THE JOB COSTING, STANDARD PRODUCT COSTING,',1)
	XCALL OUTPT (10,10,0,
&	 'OR PURCHASE ORDER INTERFACES, THE PAYABLE VOUCHERS FILE, "NEWAP0",',1)
	XCALL OUTPT (12,10,0,
&	 'MUST BE RE-INITIALIZED.  BEFORE DOING SO, BE SURE TO POST ALL',1)
	XCALL OUTPT (14,10,0,'CURRENT TRANSACTIONS.',1)
	XCALL MESAG (' ',2)
	FSTMSG = 1
	RETURN
RESTR1,
	INTRJC =
	INTRSP =
	INTRPO =
	INTRIM =
	CALL WRITE
	XCALL MESAG ('ORIGINAL INTERFACE VALUES HAVE BEEN RESTORED',2)
	RETURN
;*******************************************************************************
LARGE,
	IF (INTRJC .OR. INTRSP .OR. INTRPO) RETURN
	IF (FSTMSG) GO TO RESTOR
	XCALL OUTPT (3,1,2,'\',1)
	XCALL OUTPT (8,10,0,
&	    'SINCE ALL INTERFACES (EXCEPT PERHAPS GENERAL LEDGER) HAVE BEEN',1)
	XCALL OUTPT (10,10,0,
&	    'TURNED OFF, YOU MUST RE-INITIALIZE THE "NEWAP0" FILE IN ORDER',1)
	XCALL OUTPT (12,10,0,
&	    'TO CREATE A FILE WITH SMALLER RECORDS.  IF THIS IS NOT DONE,',1)
	XCALL OUTPT (14,10,0,
&	    'THE "NEW PAYABLES ENTRY AND EDITING" APPLICATION WILL NOT WORK.',1)
	XCALL MESAG (' ',2)
	FSTMSG = 1
	RETURN
RESTOR,
	INTRJC = SAVJC
	INTRPO = SAVPO
	INTRIM = SAVIM
	INTRSP = SAVSPC
	CALL WRITE
	XCALL MESAG ('ORIGINAL INTERFACE VALUES HAVE BEEN RESTORED',2)
	RETURN
;*******************************************************************************
WRITE,
	FLNAME = AP4
	IF (FLNAME(1,1).EQ.' ') FLNAME = AP4(2,14)
	XCALL OPENF (1,'U',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOFILE
	LOKCTL = 1
	XCALL IO (1,WRTREC(1,SIZE),1,READ,LOKCTL)
	WRTREC(SIZE-22,SIZE-18) = CTLVR1(44,48)
	LOKCTL = 1
	XCALL IO (1,WRTREC(1,SIZE),1,WRITE,LOKCTL)
	CLOSE 1
	RETURN
;*******************************************************************************
VERIFY,
	XCALL OPENF (1,'U',FLNAME,ERROR,0,SWITCH)
	IF (SWITCH) GO TO NOFILE
	WRTREC =
	LOKCTL = 1
	XCALL IO (1,WRTREC(1,SIZE),2,READ,LOKCTL)
	CLOSE 1
	IF (WRTREC(1,SIZE) .NE. BRACKS) GO TO WRNING
	RETURN
WRNING,
	XCALL OUTPT (24,1,0,
&	  'UNPOSTED TRANSACTIONS EXIST IN "NEWAP0" FILE.  ARE YOU SURE ?',1)
	ROW = 24
	COL = 64
	MAX = 1
	TYPE = 'YN'
	CALL INPUT
	COL = 46
	TYPE = 'N '
	XCALL OUTPT (24,1,1,' ',1)
	RETURN
;*******************************************************************************
INPUT,
	XCALL INPUT (ROW,COL,MAX,0,TYPE,ENTRY,INXCTL,V)
	RETURN
ANYCNG,
	XCALL ANYCN (CNGCTL,WHATNO)
	GO TO (PROCES,CNGBR), CNGCTL+1
ERRMSG,
	XCALL OUTPT(23,1,0,'ERROR CREATING FILE ',V)
	XCALL OUTPT(0,0,0,AP(FILCNT),V)
	XCALL OUTPT(0,0,0,' - PROBABLY NOT ENOUGH ROOM',V)
	XCALL MESAG(' ',1)
	GO TO BEGIN
NOFILE,
	XCALL OUTPT (23,1,0,FLNAME,V)
	XCALL OUTPT (23,11,0,' FILE NOT FOUND',V)
	XCALL MESAG (' ',1)
	GO TO BEGIN
NOCOMP,
	XCALL MESAG ('UT:COMPNY.DDF FILE NOT FOUND',1)
	GO TO BEGIN
NODEV,
	XCALL MESAG ('UT:DEVICE.DDF FILE NOT FOUND',1)
	GO TO BEGIN
NOROOM,
	XCALL MESAG ('NO ROOM ON DEVICE FOR AP FILES',1)
	GO TO BEGIN
END
