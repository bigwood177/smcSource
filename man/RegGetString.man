;****************************************************************************
;
; Title:		RegGetString.dbl
;
; Author:		Steve Ives (Synergex Professional Services Group)
;
; Date:			9th June 1999
;
; Description:	This routine retrieves a REG_SZ (string) value from the
;				specified key in the Registry.  If the specified key or value
;				is not found then a failure status is returned, otherwise the
;				data from the	registry value is returned.
;
; Platforms:	32-bit Microsoft Windows platforms only.
;
; Warning:		The operation and reliability of a Windows system depends on
;				the integrity of the Registry.  Inappropriate use of this
;				routine could result in serious damage to the registry.
;				Please exercise extreme caution when using this	routine.
;
;****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;****************************************************************************

.function RegGetString, ^VAL

;Argument list

	a_reghdl	,n		;Registry handle	(Returned by RegStartSession)
	a_hive		,n		;Registry hive      (e.g. HKEY_LOCAL_MACHINE)
	a_key		,a		;Path below hive    (e.g. "Software\Somecompany\Someproduct")
	a_value		,a		;Value name			(e.g. "LastProcessDate")
	a_data		,a		;Value data			(returned)

;End of argument list
record	vars
	ln	,d4

.define REGISTRY_INTERNAL
.include "def:registry.def"

.align
stack record
	status		,i8		;Return status
	kh			,i8		;Handle to currently open key
    type		,i8		;Type of value found in registry
    size		,i8		;Size of value found in registry
    pos			,i8		;Position of first null in return value
	null		,i8		;A null character
	key			,a255	;a_key in a null-terminated string
	value		,a255	;a_value in a null-terminated string
	data		,a255	;Value data from registry
    
.proc

	status = REG_SUCCESS
	clear null			;ssq 12-30-04
	size = ^size(value)		;ssq 12-30-04

	xcall fill(%char(0),key)
	key(1:%trim(a_key)) = a_key
	
    ;Open requested key
	if (%dll_call(a_reghdl,,"RegOpenKeyA",a_hive,^addr(key),^addr(kh))) then
		status = REG_ERR_OPNKEY
	else
	begin
		xcall fill(%char(0),value)
		;;;value(1:%trim(a_value)) = a_value
	
		;Get the value's data type & size
		if (%dll_call(a_reghdl,,"RegQueryValueExA",kh,^addr(value),null,^addr(type),null,^addr(size))) then
			status = REG_ERR_GETVAL
		else
		begin
			case type of
			begincase
			REG_SZ:
			begin
				;It's a string key, get the value
				clear data(1:size)
				if (%dll_call(a_reghdl,,"RegQueryValueExA",kh,^addr(value),null,null,^addr(data),^addr(size))) then
					status = REG_ERR_GETVAL
				else
				begin
					;Look for a Null in the returned string
					pos = %instr(1,data, %char(0))

					;Return data up to the first null
					if pos then
						a_data = data(1:pos-1)
					else
						a_data = data
				end
			end
			REG_DWORD:
				status = REG_ERR_VALTYP
			REG_BINARY:
				status = REG_ERR_VALTYP
			endcase
			
		end
		
		if (%dll_call(a_reghdl,,"RegCloseKey",kh))
			status = REG_ERR_CLSKEY
	end

	freturn status

.end

